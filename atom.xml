<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>学胖子的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xue12311.github.io/"/>
  <updated>2020-01-05T09:15:48.434Z</updated>
  <id>http://xue12311.github.io/</id>
  
  <author>
    <name>学胖子</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kotlin练习 - Kotlin中的【  ?，?.，?:，!! ，filterNotNull 】含义</title>
    <link href="http://xue12311.github.io/2020/01/05/kotlin/kotlin%E7%BB%83%E4%B9%A0-KotlinfilterNotNull%20%E5%90%AB%E4%B9%89/"/>
    <id>http://xue12311.github.io/2020/01/05/kotlin/kotlin练习-KotlinfilterNotNull 含义/</id>
    <published>2020-01-05T08:57:36.000Z</published>
    <updated>2020-01-05T09:15:48.434Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-kotlin中的-filternotnull-含义"> kotlin练习 - Kotlin中的【  ?，?.，?:，!! ，filterNotNull 】含义</span></h1><h2><span id="可空类型表示当前是否对象可以为空"> ?  可空类型，表示当前是否对象可以为空</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:String =&quot;123&quot;</span><br><span class="line">a = null //编译报错</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a:String? =&quot;123&quot;</span><br><span class="line">a = null //编译通过</span><br></pre></td></tr></table></figure><h2><span id="安全调用操作符"> ?.  安全调用操作符</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a:String? =&quot;123&quot;</span><br><span class="line">a = null //编译通过</span><br><span class="line">val length = a.length //编译报错 --- 变量&quot;a&quot;可能会为空</span><br><span class="line">val length = a?.length //编译通过 --- 如果 a 非空，就返回 a.length，否则返回 null</span><br></pre></td></tr></table></figure><h2><span id="elvis-操作符"> ?:  Elvis 操作符</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a:String? =&quot;123&quot;</span><br><span class="line">a = null //编译通过</span><br><span class="line">val lenght = a?.length?:-1 // 当a不为空时，返回a.length，当a为空时，返回-1</span><br></pre></td></tr></table></figure><h2><span id="操作符表示当前对象不为空的情况下执行为空就抛出异常"> !!  操作符，表示当前对象不为空的情况下执行，为空就抛出异常</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a:String? =&quot;123&quot;</span><br><span class="line">a = null //编译通过</span><br><span class="line">val lenght = a!!.length //如果a不为空，则返回a.length，如果b为空，则抛出异常 NullPointerException</span><br></pre></td></tr></table></figure><h2><span id="filternotnull-过滤非空元素"> filterNotNull  过滤非空元素</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val nullableList: List&lt;Int?&gt; = listOf(1, 2, null, 4)</span><br><span class="line">val intList: List&lt;Int&gt; = nullableList.filterNotNull() </span><br><span class="line">println(intList.toString())//[1, 2, 4]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-kotlin中的-filternotnull-含义&quot;&gt; kotlin练习 - Kotlin中的【  ?，?.，?:，!! ，filterNotNull 】含义&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;可空类型表示当前是否对
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - 常见内联扩展函数学习</title>
    <link href="http://xue12311.github.io/2019/07/21/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E5%B8%B8%E8%A7%81%E5%86%85%E8%81%94%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2019/07/21/kotlin/kotlin练习-常见内联扩展函数学习/</id>
    <published>2019-07-21T04:16:01.000Z</published>
    <updated>2019-07-21T07:27:43.271Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#kotlin%E7%BB%83%E4%B9%A0---%E5%B8%B8%E8%A7%81%E5%86%85%E8%81%94%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0">kotlin练习 - 常见内联扩展函数学习</a><ul><li><a href="#let">let</a></li><li><a href="#with">with</a></li><li><a href="#apply">apply</a></li><li><a href="#run">run</a></li><li><a href="#repeat">repeat</a></li><li><a href="#also">also</a></li><li><a href="#takeif">takeIf</a></li><li><a href="#takeunless">takeUnless</a></li></ul></li></ul><h1><span id="kotlin练习-常见内联扩展函数学习"> kotlin练习 - 常见内联扩展函数学习</span></h1><h2><span id="let"> let</span></h2><ul><li><p>定义：</p><p>fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R</p></li><li><p>功能：</p><p>调用对象（T）的let函数，则该对象为函数的参数。在函数内可以通过 it指代该对象。返回值为函数的最后一行或指定return表达式。</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val data = &quot;孙悟空&quot;</span><br><span class="line">    data.let &#123;</span><br><span class="line">        //在函数体内使用it替代object对象去访问其公有的属性和方法</span><br><span class="line">        println(it.toString())</span><br><span class="line">    &#125;</span><br><span class="line">    data?.let &#123;</span><br><span class="line">        // 假如data不为null，代码会执行到此处</span><br><span class="line">        println(it.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="with"> with</span></h2><ul><li><p>定义：</p><p>fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R</p></li><li><p>功能：</p><p>将对象作为函数的参数，在函数内可以通过this指代该对象。返回值为函数的最后一行或return表达式。</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var list = with(mutableListOf&lt;String&gt;()) &#123;</span><br><span class="line">        add(&quot;1&quot;)</span><br><span class="line">        add(&quot;2&quot;)</span><br><span class="line">        add(&quot;3&quot;)</span><br><span class="line">        //返回值为函数的最后一行或return表达式</span><br><span class="line">        this</span><br><span class="line">    &#125;</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var paint = Paint()</span><br><span class="line">    with(paint) &#123;</span><br><span class="line">        color = Color.BLACK</span><br><span class="line">        strokeWidth = 1.0f</span><br><span class="line">        textSize = 18.0f</span><br><span class="line">        isAntiAlias = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="apply"> apply</span></h2><ul><li><p>定义：</p><p>fun T.apply(block: T.() -&gt; Unit): T</p></li><li><p>功能：</p><p>调用对象的apply函数，在函数范围内，可以任意调用该对象的任意方法，并返回该对象。</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    // apply适用于那些对象初始化需要给其属性赋值的情况。</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().apply &#123;</span><br><span class="line">        add(&quot;1&quot;)</span><br><span class="line">        add(&quot;2&quot;)</span><br><span class="line">        add(&quot;3&quot;)</span><br><span class="line">        //apply返回的是对象本身</span><br><span class="line">    &#125;</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">//apply需要先初始化</span><br><span class="line">    var paint = Paint().apply &#123;</span><br><span class="line">        color = Color.BLACK</span><br><span class="line">        strokeWidth = 1.0f</span><br><span class="line">        textSize = 18.0f</span><br><span class="line">        isAntiAlias = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="run"> run</span></h2><ul><li><p>定义：</p><ol><li>fun run(block: () -&gt; R): R</li><li>fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R</li></ol></li><li><p>功能：</p><p>调用run函数返回值为函数体最后一行，或return表达式。</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().run &#123;</span><br><span class="line">        add(&quot;1&quot;)</span><br><span class="line">        add(&quot;2&quot;)</span><br><span class="line">        add(&quot;3&quot;)</span><br><span class="line">        //run返回的是函数体最后一行，或return表达式</span><br><span class="line">        this</span><br><span class="line">    &#125;</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var name = run &#123;</span><br><span class="line">        &quot;孙悟空&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    println(name)//孙悟空</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="repeat"> repeat</span></h2><ul><li><p>定义：</p><p>fun repeat(times: Int, action: (Int) -&gt; Unit)</p></li><li><p>功能：</p><p>重复执行action函数times次，times从0开始</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">   repeat(3)&#123;</span><br><span class="line">       //从0开始循环3次</span><br><span class="line">       println(&quot;repeat:第$&#123;it&#125;次&quot;)</span><br><span class="line">   &#125;</span><br><span class="line">    for(i in 0..2)&#123;</span><br><span class="line">       println(&quot;for:第$&#123;i&#125;次&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    (0..2).forEach&#123;</span><br><span class="line">       println(&quot;forEach:第$&#123;it&#125;次&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="also"> also</span></h2><ul><li><p>定义：</p><p>fun T.also(block: (T) -&gt; Unit): T</p></li><li><p>功能：</p><p>调用对象的also函数，在函数块内可以通过 it指代该对象,返回值为该对象本身。（注意其和let函数的区别，let返回的是最后一行，also返回的是对象本身）</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().also &#123;</span><br><span class="line">        it.add(&quot;1&quot;)</span><br><span class="line">        it.add(&quot;2&quot;)</span><br><span class="line">        it.add(&quot;3&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="takeif"> takeIf</span></h2><ul><li><p>定义：</p><p>fun T.takeIf(predicate: (T) -&gt; Boolean): T?</p></li><li><p>功能：</p><p>传递一个函数参数，如果函数结果为true，返回T对象，否则返回null。</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var list = mutableListOf&lt;String&gt;(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;).takeIf &#123;</span><br><span class="line">        it.size &gt; 3//满足条件则返回it,否则返回null</span><br><span class="line">    &#125;</span><br><span class="line">    if (list != null) &#123;</span><br><span class="line">        println(list.toString())</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        println(&quot;list为空&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="takeunless"> takeUnless</span></h2><ul><li><p>定义：</p><p>fun T.takeUnless(predicate: (T) -&gt; Boolean): T?</p></li><li><p>功能：</p><p>与takeIf相反，参数函数返回false时返回T对象，否则返回null</p></li><li><p>实例：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var list = mutableListOf&lt;String&gt;(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;).takeUnless &#123;</span><br><span class="line">        it.size &gt; 3//不满足条件则返回it,否则返回null</span><br><span class="line">    &#125;</span><br><span class="line">    if (list != null) &#123;</span><br><span class="line">        println(list.toString())</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        println(&quot;list为空&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#kotlin%E7%BB%83%E4%B9%A0---%E5%B8%B8%E8%A7%81%E5%86%85%E8%81%94%E6%89%A9%E5%B1%95%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0&quot;&gt;ko
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>EventBus封装</title>
    <link href="http://xue12311.github.io/2019/07/05/android/EventBus%E5%B0%81%E8%A3%85/"/>
    <id>http://xue12311.github.io/2019/07/05/android/EventBus封装/</id>
    <published>2019-07-05T08:38:23.000Z</published>
    <updated>2019-07-05T08:42:03.838Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="eventbus封装"> EventBus封装</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">package com.example.eventbus.utils</span><br><span class="line"></span><br><span class="line">import com.example.gaokao.event.MessageEvent</span><br><span class="line">import org.greenrobot.eventbus.EventBus</span><br><span class="line">import org.greenrobot.eventbus.meta.SubscriberInfoIndex</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @author: xue</span><br><span class="line"> * @description EventBus封装</span><br><span class="line"> * @date: 2019/7/5</span><br><span class="line"> */</span><br><span class="line">class EventBusUtil &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 使用索引加速</span><br><span class="line">         * 建议在Application中使用</span><br><span class="line">         */</span><br><span class="line">        fun installIndex(index: SubscriberInfoIndex) &#123;</span><br><span class="line">            EventBus.builder().addIndex(index).installDefaultEventBus()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 注册</span><br><span class="line">         */</span><br><span class="line">        fun register(subscribe: Any) &#123;</span><br><span class="line">            if (!EventBus.getDefault().isRegistered(subscribe)) &#123;</span><br><span class="line">                EventBus.getDefault().register(subscribe)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 取消注册</span><br><span class="line">         */</span><br><span class="line">        fun unregister(subscribe: Any) &#123;</span><br><span class="line">            EventBus.getDefault().unregister(subscribe)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发布一个订阅事件</span><br><span class="line">         * 必须先注册，才能接收到发布的事件，有点类似于 startActivityForResult（）方法</span><br><span class="line">         */</span><br><span class="line">        fun postEvent(event: MessageEvent) &#123;</span><br><span class="line">            EventBus.getDefault().post(event)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发布粘性事件（可以先发布事件，在注册后在接收）</span><br><span class="line">         * 粘性事件将最新的信息保存在内存中，取消原始消息，执行最新的消息；</span><br><span class="line">         * 只有注册后，才能接收消息，如果没有注册，消息将保留在内存中。</span><br><span class="line">         */</span><br><span class="line">        fun postStickyEvent(event: MessageEvent) &#123;</span><br><span class="line">            EventBus.getDefault().postSticky(event)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 移除指定的粘性订阅事件</span><br><span class="line">         *  @param eventType 事件类型</span><br><span class="line">         */</span><br><span class="line">        fun &lt;T&gt; removeStickyEvent(eventType: Class&lt;T&gt;) &#123;</span><br><span class="line">            var stickyEvent: T = EventBus.getDefault().getStickyEvent(eventType)</span><br><span class="line">            if (stickyEvent != null) &#123;</span><br><span class="line">                EventBus.getDefault().removeStickyEvent(stickyEvent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        /**</span><br><span class="line">         * 移除指定的粘性订阅事件</span><br><span class="line">         *  @param eventType 事件类型</span><br><span class="line">         */</span><br><span class="line">        fun removeStickyEvent(eventType:Any) &#123;</span><br><span class="line">            var stickyEvent = EventBus.getDefault().getStickyEvent(eventType as Class&lt;Any&gt;?)</span><br><span class="line">            if (stickyEvent != null) &#123;</span><br><span class="line">                EventBus.getDefault().removeStickyEvent(stickyEvent)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 移除所有的粘性订阅事件</span><br><span class="line">         */</span><br><span class="line">        fun removeAllStickyEvents()&#123;</span><br><span class="line">            EventBus.getDefault().removeAllStickyEvents()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 取消事件</span><br><span class="line">         * 优先级高的订阅者可以终止事件往下传递</span><br><span class="line">         * 只有在事件通过时才能调用（即在事件接收方法中调用）</span><br><span class="line">         *  @param event 事件</span><br><span class="line">         */</span><br><span class="line">        fun cancelEventDelivery(event:Any)&#123;</span><br><span class="line">            EventBus.getDefault().cancelEventDelivery(event)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 获取 eventbus 单例</span><br><span class="line">         */</span><br><span class="line">        fun getEventBus():EventBus&#123;</span><br><span class="line">            return EventBus.getDefault()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;eventbus封装&quot;&gt; EventBus封装&lt;/span&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
      <category term="android" scheme="http://xue12311.github.io/categories/android/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
      <category term="EventBus" scheme="http://xue12311.github.io/tags/EventBus/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - 协程</title>
    <link href="http://xue12311.github.io/2019/06/30/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E5%8D%8F%E7%A8%8B/"/>
    <id>http://xue12311.github.io/2019/06/30/kotlin/kotlin练习-协程/</id>
    <published>2019-06-30T13:26:54.000Z</published>
    <updated>2019-07-26T06:55:37.122Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-协程"> kotlin练习 - 协程</span></h1><h2><span id="globalscope构造函数"> GlobalScope构造函数</span></h2><ul><li>launch : 创建协程</li><li>async : 创建带返回值的协程，返回 Deferred</li><li>withContext : 不会创建新的协程，在指定协程上运行代码块</li><li>runBlocking : 不是GlobalScope的API，可以单独使用， runBlocking里面的delay()会堵塞当前线程，launch等不会堵塞</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fun main(arg: Array&lt;String&gt;) &#123;</span><br><span class="line">    GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class="line">        LogUtils.d(&quot;当前线程main: $&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class="line">        withContextTest()</span><br><span class="line">    &#125;</span><br><span class="line">    //newSingleThreadContext 单线程</span><br><span class="line">    //newFixedThreadPoolContext 线程池</span><br><span class="line">    val singleThreadContext = newSingleThreadContext(&quot;single&quot;)</span><br><span class="line">    GlobalScope.launch(singleThreadContext) &#123;</span><br><span class="line">        LogUtils.d(&quot;当前线程_单线程: $&#123;Thread.currentThread().name&#125; &quot;)//single</span><br><span class="line">    &#125;</span><br><span class="line">    val fixedThreadPoolContext = newFixedThreadPoolContext(1, &quot;fixed&quot;)</span><br><span class="line">    GlobalScope.launch(fixedThreadPoolContext) &#123;</span><br><span class="line">        LogUtils.d(&quot;当前线程_线程池: $&#123;Thread.currentThread().name&#125; &quot;)//fixed</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    suspend fun withContextTest() &#123;</span><br><span class="line">        withContext(Dispatchers.IO) &#123;</span><br><span class="line">            LogUtils.d(&quot;当前线程io: $&#123;Thread.currentThread().name&#125; &quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2><span id="coroutinecontext协程运行的线程调度器"> CoroutineContext协程运行的线程调度器</span></h2><ul><li>Dispatchers.Default : 默认（如果不写，默认就是Dispatchers.Default模式）</li><li><a href="http://Dispatchers.IO" target="_blank" rel="noopener">Dispatchers.IO</a> : IO线程</li><li>Dispatchers.Main :  主线程</li><li>Dispatchers.Unconfined : 没指定，就是在当前线程</li></ul><h2><span id="coroutinestart-启动模式"> CoroutineStart 启动模式</span></h2><ul><li>CoroutineStart.DEFAULT：默认（如果不写，默认就是CoroutineStart.DEFAULT模式）</li><li>CoroutineStart.ATOMIC：自动（协程在开始执行之前不能被取消）</li><li>CoroutineStart.UNDISPATCHED：立即执行协程</li><li>CoroutineStart.LAZY：懒加载</li></ul><h2><span id="job方法"> Job方法</span></h2><ul><li><p>job.start() : 启动协程，除了 lazy 模式，协程都不需要手动启动</p></li><li><p>job.join()  : 等待协程执行完毕后再执行后面的代码块</p></li><li><p>job.cancel() : 取消一个协程<br>协程的取消有些特质，因为协程内部可以在创建协程的，这样的协程组织关系可以称为父协程,子协程：</p><ol><li>父协程手动调用 cancel() 或者异常结束，会立即取消它的所有子协程</li><li>父协程必须等待所有子协程完成（处于完成或者取消状态）才能完成</li><li>子协程抛出未捕获的异常时，默认情况下会取消其父协程</li></ol></li><li><p>job.cancelAndJoin() : 等待协程取消完毕后再执行后面的代码块</p></li><li><p>job.isActive : true - 处于活动状态</p></li><li><p>job.isCancelled : true - 已完成</p></li><li><p>job.isCompleted :  true - 已取消</p></li></ul><h2><span id="第一个协程程序"> 第一个协程程序</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import kotlinx.coroutines.GlobalScope</span><br><span class="line">import kotlinx.coroutines.delay</span><br><span class="line">import kotlinx.coroutines.launch</span><br><span class="line"></span><br><span class="line">fun main(arg: Array&lt;String&gt;) &#123;</span><br><span class="line">                GlobalScope.launch &#123;//在后台启动一个新的协程并继续</span><br><span class="line">                    delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println(&quot;我是kotlin&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;你好,&quot;)//协程已在等待时主线程还在继续</span><br><span class="line">    Thread.sleep(3000L)// 阻塞主线程 3 秒钟来保证 JVM 存活</span><br><span class="line">&#125;</span><br><span class="line">    println(&quot;运行了吗？&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="桥接阻塞与非阻塞的世界"> 桥接阻塞与非阻塞的世界</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main(arg: Array&lt;String&gt;) &#123;</span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        //在后台启动新的协程并继续</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是kotlin&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)//协程已在等待时主线程还在继续</span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        //主线程</span><br><span class="line">        delay(3000L)//延迟 3 秒来保证 JVM 的存活</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,运行了吗？&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking&lt;Unit&gt; &#123;</span><br><span class="line">    //启动主协程</span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是kotlin&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)//主协同程序在此处继续</span><br><span class="line">    delay(3000L)//   //延迟 3 秒以保持JVM活动</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,运行了吗？&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="等待工作"> 等待工作</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line"></span><br><span class="line">    var job = GlobalScope.launch &#123;</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是kotlin&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)//主协同程序在此处继续</span><br><span class="line">    job.join()//等到子协程完成后进行</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,运行了吗？&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="结构化的并发"> 结构化的并发</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line">launch &#123;</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是kotlin&quot;)</span><br><span class="line">&#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)//主协同程序在此处继续</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2><span id="范围构建器"> 范围构建器</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(200L)</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是Kotlin&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    coroutineScope &#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(500L)</span><br><span class="line">            println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你知道吗&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        delay(100L)</span><br><span class="line">        println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,运行了吗&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="提取函数重构"> 提取函数重构</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        doWorld()</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,你好,&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">suspend fun doWorld() &#123;</span><br><span class="line">    delay(2000L)</span><br><span class="line">    println(&quot;当前线程: $&#123;Thread.currentThread().name&#125; ,我是Kotlin&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="协同程序重量轻"> 协同程序重量轻</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line">    repeat(100_000)&#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            delay(1000L)</span><br><span class="line">            println(&quot;.&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="全局协程像守护线程"> 全局协程像守护线程</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking &#123;</span><br><span class="line">    GlobalScope.launch &#123;</span><br><span class="line">        repeat(1000) &#123;</span><br><span class="line">            println(&quot;当前是第$&#123;(it + 1)&#125;个线程&quot;)</span><br><span class="line">            delay(500L)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    delay(1300L)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="协程请求网络数据"> 协程请求网络数据</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        coroutine.setOnClickListener &#123; click() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private fun click() = runBlocking &#123;</span><br><span class="line">        GlobalScope.launch(Dispatchers.Main) &#123;</span><br><span class="line">            coroutine.text = GlobalScope.async(Dispatchers.IO) &#123;</span><br><span class="line">                // 比如进行了网络请求</span><br><span class="line">                // 放回了请求后的结构</span><br><span class="line">                return@async &quot;main&quot;</span><br><span class="line">            &#125;.await()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-协程&quot;&gt; kotlin练习 - 协程&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;globalscope构造函数&quot;&gt; GlobalScope构造函数&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;launch : 创建协程&lt;/li
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android基础-RxJava2学习</title>
    <link href="http://xue12311.github.io/2019/03/19/android/RxJava2%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2019/03/19/android/RxJava2常见操作符学习/</id>
    <published>2019-03-19T12:29:34.098Z</published>
    <updated>2019-07-21T06:31:32.046Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考<a href="https://juejin.im/post/5b17560e6fb9a01e2862246f" target="_blank" rel="noopener">RxJava2 只看这一篇文章就够了</a>，强烈推荐大家去看一下。</p><h1><span id="rxjava的组成"> RxJava的组成</span></h1><ul><li>被观察者-------Observable</li><li>观察者-----------Observer</li><li>订阅---------------subscribe</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//被观察者</span><br><span class="line">      Observable observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception &#123;</span><br><span class="line">              emitter.onNext(&quot;a&quot;);</span><br><span class="line">              emitter.onNext(&quot;b&quot;);</span><br><span class="line">              emitter.onNext(&quot;c&quot;);</span><br><span class="line">              emitter.onComplete();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      //观察者</span><br><span class="line">      Observer observer = new Observer&lt;String&gt;() &#123;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onSubscribe(Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onNext(String s) &#123;</span><br><span class="line">              LogUtils.e(s);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      //订阅</span><br><span class="line">      observable.subscribe(observer);</span><br></pre></td></tr></table></figure><h2><span id="创建操作符"> 创建操作符</span></h2><ul><li>create()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//创建一个被观察者</span><br><span class="line">    Observable&lt;String&gt;observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception &#123;</span><br><span class="line">            emitter.onNext(&quot;Hello Java&quot;);</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>just() --------发送事件不可以超过10个</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8,9,0).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">              LogUtils.e(integer);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ul><li>From 操作符</li></ul><ol><li>fromArray() ----- 可以发送数组(数量可以大于10个)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer integers[] = &#123;0,1,2,3,4,5&#125;;</span><br><span class="line">        Observable.fromArray(integers).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">              LogUtils.e(integer);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>fromCallable() -----被观察者返回一个结果值给观察者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.fromCallable(new Callable&lt;String&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String call() throws Exception &#123;</span><br><span class="line">             return &quot;hello&quot;;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(String s) throws Exception &#123;</span><br><span class="line">             LogUtils.e(s);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>fromIterable() ---------可以发送一个List集合给观察者</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;list = new ArrayList&lt;&gt;();</span><br><span class="line">   list.add(&quot;1&quot;);</span><br><span class="line">   list.add(&quot;2&quot;);</span><br><span class="line">   list.add(&quot;3&quot;);</span><br><span class="line">   list.add(&quot;4&quot;);</span><br><span class="line">   list.add(&quot;5&quot;);</span><br><span class="line">   Observable.fromIterable(list).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void accept(String s) throws Exception &#123;</span><br><span class="line">           LogUtils.e(s);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li>fromFuture() ------- 可以发送一个Future</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FutureTask&lt;String&gt;futureTask = new FutureTask&lt;&gt;(new Callable&lt;String&gt;() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public String call() throws Exception &#123;</span><br><span class="line">         return &quot;Hello&quot;;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> //doOnSubscribe()----- 开始订阅时才会执行</span><br><span class="line"> Observable.fromFuture(futureTask).doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void accept(Disposable disposable) throws Exception &#123;</span><br><span class="line">         futureTask.run();//开始执行</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void accept(String s) throws Exception &#123;</span><br><span class="line">         LogUtils.e(s);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li>defer() -------------- 只有观察者订阅时，才会创建新的被观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">String str_name = &quot;张三&quot;;</span><br><span class="line">    public void rxjava() &#123;</span><br><span class="line">        Observable&lt;String&gt; observable = Observable.defer(new Callable&lt;ObservableSource&lt;? extends String&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;? extends String&gt; call() throws Exception &#123;</span><br><span class="line">                return Observable.just(str_name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        str_name = &quot;李四&quot;;</span><br><span class="line">        Observer observer = new Observer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) &#123;</span><br><span class="line">                LogUtils.e(&quot;str_name = &quot; + s);//王五，赵六</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        str_name = &quot;王五&quot;;</span><br><span class="line">        observable.subscribe(observer);</span><br><span class="line">        str_name = &quot;赵六&quot;;</span><br><span class="line">        observable.subscribe(observer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>timer() -------------当到了指定时间就发送一个0L的值给观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.timer(2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">                LogUtils.e(&quot;along : &quot;+aLong);//along : 0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>interval() ------------ 每隔一段时间就会发送一个事件（从0开始不断增加1的数字）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">              //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">              LogUtils.e(&quot;along : &quot;+aLong);//along : 0， along : 1</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      //延迟5s后开始执行</span><br><span class="line">      Observable.interval(5,2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">              //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">              LogUtils.e(&quot;along : &quot;+aLong);//along : 0， along : 1</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ul><li>intervalRange() ------------ 可以指定发送事件的开始值，数量，其他的和interval()一样</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//start：起始数值 -------- 10</span><br><span class="line">//count：发射数量 -------- 3</span><br><span class="line">//initialDelay：延迟执行时间-------- 5s</span><br><span class="line">//period：发射周期时间------2s</span><br><span class="line">//unit：时间单位</span><br><span class="line">//数字从10开始，传递3次，第一次执行延迟5s，每隔2s执行一次</span><br><span class="line">Observable.intervalRange(10,3,5,2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">        //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">        LogUtils.e(&quot;along : &quot;+aLong);//along : 10， along : 11， along : 12</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//start：起始数值 -------- 10</span><br><span class="line">//count：发射数量 -------- 3</span><br><span class="line">//initialDelay：延迟执行时间-------- 5s</span><br><span class="line">//period：发射周期时间------2s</span><br><span class="line">//unit：时间单位</span><br><span class="line">//Scheduler：线程调度</span><br><span class="line">//数字从10开始，传递3次，第一次执行延迟5s，每隔2s执行一次，在新线程中执行</span><br><span class="line">Observable.intervalRange(10,3,5,2, TimeUnit.SECONDS, Schedulers.newThread()).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">        LogUtils.e(&quot;当前线程 ：&quot;+Thread.currentThread().getName());//RxNewThreadScheduler</span><br><span class="line">        //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">        LogUtils.e(&quot;along : &quot;+aLong);//along : 10， along : 11， along : 12</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>range() ----------- 发送一定范围内的事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//从10开始，执行3次</span><br><span class="line">    Observable.range(10,3).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            LogUtils.e(&quot;integer : &quot;+integer);//10,11,12</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>rangeLong() ----和range()方法类似，只是数据类型为Long</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//从10开始，执行3次</span><br><span class="line">     Observable.rangeLong(10,3).subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">             LogUtils.e(&quot;along : &quot;+aLong);//10,11,12</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><ul><li>empty() &amp; never() &amp; error()</li></ul><ol><li>empty()  ---------------  直接发送 onComplete() 事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//只会进入 onSubscribe(),onComplete()方法</span><br><span class="line">    Observable.empty().subscribe(new Observer&lt;Object&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSubscribe(Disposable d) &#123;</span><br><span class="line">            LogUtils.e(&quot;==================onSubscribe&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(Object o) &#123;</span><br><span class="line">            LogUtils.e(&quot;==================onNext&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line">            LogUtils.e(&quot;==================onError &quot; + e);</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public void onComplete() &#123;</span><br><span class="line">            LogUtils.e(&quot;==================onComplete&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>never()  ---------------- 不发生任何时间</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//只会进入 onSubscribe()方法</span><br><span class="line">      Observable.never().subscribe(new Observer&lt;Object&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onSubscribe(Disposable d) &#123;</span><br><span class="line">              LogUtils.e(&quot;==================onSubscribe&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          @Override</span><br><span class="line">          public void onNext(Object o) &#123;</span><br><span class="line">              LogUtils.e(&quot;==================onNext&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          @Override</span><br><span class="line">          public void onError(Throwable e) &#123;</span><br><span class="line">              LogUtils.e(&quot;==================onError &quot; + e);</span><br><span class="line">          &#125;</span><br><span class="line">          @Override</span><br><span class="line">          public void onComplete() &#123;</span><br><span class="line">              LogUtils.e(&quot;==================onComplete&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>error() -------------------发送onError()事件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//只会进入 onSubscribe(),onError()方法</span><br><span class="line">       Observable.error(new NullPointerException()).subscribe(new Observer&lt;Object&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onSubscribe(Disposable d) &#123;</span><br><span class="line">               LogUtils.e(&quot;==================onSubscribe&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(Object o) &#123;</span><br><span class="line">               LogUtils.e(&quot;==================onNext&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">               LogUtils.e(&quot;==================onError &quot; + e);</span><br><span class="line">           &#125;</span><br><span class="line">           @Override</span><br><span class="line">           public void onComplete() &#123;</span><br><span class="line">               LogUtils.e(&quot;==================onComplete&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><h2><span id="转换操作符"> 转换操作符</span></h2><ul><li>map() -------------- 将被观察者发送的数据类型转换成其他的类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5).map(new Function&lt;Integer, String&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public String apply(Integer integer) throws Exception &#123;</span><br><span class="line">             return &quot;当前值为：&quot;+integer;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(String s) throws Exception &#123;</span><br><span class="line">             LogUtils.e(s);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><ul><li>flatMap() ----------------- 作用于map() 方法类似，返回一个 新的Observerable (无序： flatMap()可能交错的发送事件,最终结果的顺序可能并是不原始Observable发送时的顺序 )</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5).flatMap(new Function&lt;Integer, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public ObservableSource&lt;?&gt; apply(Integer integer) throws Exception &#123;</span><br><span class="line">            List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                list.add(&quot;当前值为：&quot;+integer);</span><br><span class="line">            if (integer == 3) &#123;</span><br><span class="line">                return Observable.fromIterable(list).delay(10, TimeUnit.MILLISECONDS);//延迟10毫秒</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).subscribe(new Consumer&lt;Object&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Object o) throws Exception &#123;</span><br><span class="line">            LogUtils.e(o.toString());//当前值为：1,2,4,5,3 ------无序的</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>concatMap() ------------ 作用和flatMap() 方法一样（有序：concatMap()转发事件的顺序是有序的）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5).concatMap(new Function&lt;Integer, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;?&gt; apply(Integer integer) throws Exception &#123;</span><br><span class="line">                List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                    list.add(&quot;当前值为：&quot;+integer);</span><br><span class="line">                if (integer == 3) &#123;</span><br><span class="line">                    return Observable.fromIterable(list).delay(10, TimeUnit.MILLISECONDS);//延迟10毫秒</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return Observable.fromIterable(list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Consumer&lt;Object&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Object o) throws Exception &#123;</span><br><span class="line">                LogUtils.e(o.toString());//当前值为：1,2,3,4,5, ------有序的</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>buffer() ------------- 从需要发送的事件中获取一定数量的事件，将这些事件存放到缓冲区中一并发出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//count: 缓冲区元素的数量</span><br><span class="line">//skip: 就代表缓冲区满了之后，发送下一次事件的时候要跳过的元素数量</span><br><span class="line">Observable.just(1, 2, 3, 4, 5)</span><br><span class="line">        .buffer(3, 2)</span><br><span class="line">        .subscribe(new Consumer&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(List&lt;Integer&gt; integers) throws Exception &#123;</span><br><span class="line">                LogUtils.e(&quot;缓冲区大小: &quot; + integers.size());</span><br><span class="line">                String str = &quot;&quot;;</span><br><span class="line">                for (int i = 0; i &lt; integers.size(); i++) &#123;</span><br><span class="line">                    str = str + &quot;,&quot; + integers.get(i);</span><br><span class="line">                &#125;</span><br><span class="line">                LogUtils.e(&quot;当前元素: &quot; + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>groupBy() ---------------- 将发送的数据进行分组，每个分组都会返回一个被观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">                .groupBy(new Function&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer) throws Exception &#123;</span><br><span class="line">                        return integer % 2;//分为2组</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Consumer&lt;GroupedObservable&lt;Integer, Integer&gt;&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(GroupedObservable&lt;Integer, Integer&gt; integerIntegerGroupedObservable) throws Exception &#123;</span><br><span class="line">                        LogUtils.e(&quot; 第&quot; + integerIntegerGroupedObservable.getKey()+&quot;组&quot;);</span><br><span class="line">                        integerIntegerGroupedObservable.subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                                LogUtils.e(&quot;第&quot; + integerIntegerGroupedObservable.getKey() + &quot;组，当前元素: &quot; + integer);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>scan() ---------------- 将数据按照一定的逻辑合并数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">                .scan(new BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer1, Integer integer2) throws Exception &#123;</span><br><span class="line">                        LogUtils.e(&quot;integer1 = &quot;+integer1);//上一次的结果</span><br><span class="line">                        LogUtils.e(&quot;integer2 = &quot;+integer2);</span><br><span class="line">                        return integer1 +integer2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                LogUtils.e(&quot;integer1 + integer2 =&quot;+integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>window() --------------将发送数据 按指定数量进行分组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">             .window(3)</span><br><span class="line">               .subscribe(new Consumer&lt;Observable&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void accept(Observable&lt;Integer&gt; integerObservable) throws Exception &#123;</span><br><span class="line">                       integerObservable.subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                               LogUtils.e(&quot;当前元素: &quot; + integer);</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><h2><span id="组合操作符"> 组合操作符</span></h2><ul><li>zip()  -------------- 将多个被观察者合并，根据各个被观察者发送事件的顺序一个个结合起来，最终发送的事件数量会与源 Observable 中最少事件的数量一样。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Observable.zip(</span><br><span class="line">        Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s1 = &quot;A&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;A 发送的事件: &quot; + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s2 = &quot;B&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;B 发送的事件: &quot; + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), new BiFunction&lt;String, String, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(String s, String s2) throws Exception &#123;</span><br><span class="line">                String res = s + s2;</span><br><span class="line">                LogUtils.d(&quot;A &amp; B 发送的事件: &quot; + res);</span><br><span class="line">                return res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(String s) throws Exception &#123;</span><br><span class="line">        LogUtils.d( &quot;onNext: &quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>concat() -------------- 将多个观察者组合在一起，然后按照之前的发送顺序发送事件，最多只能合并4个被观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.concat(</span><br><span class="line">               Observable.just(1,2),</span><br><span class="line">               Observable.just(3,4),</span><br><span class="line">               Observable.just(5,6),</span><br><span class="line">               Observable.just(7,8)</span><br><span class="line">       ).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">               LogUtils.e(&quot;当前数字：&quot;+integer);//1,2,3,4,5,6,7,8</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><ul><li>concatArray() ------------ 作用和concat()方法一样，可以发送多于4个的被观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.concatArray(</span><br><span class="line">                Observable.just(1,2),</span><br><span class="line">                Observable.just(3,4),</span><br><span class="line">                Observable.just(5,6),</span><br><span class="line">                Observable.just(7,8),</span><br><span class="line">                Observable.just(9,10),</span><br><span class="line">                Observable.just(11,12)</span><br><span class="line">        ).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                LogUtils.e(&quot;当前数字：&quot;+integer);//1,2,3,4,5,6,7,8,9,10,11,12</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>merge() -------------- 作用和concat() 方法一样，只不过concat()是串行发送，而merge() 是并行发送事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Observable.merge(</span><br><span class="line">               Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                       .map(new Function&lt;Long,String&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                               return &quot;A&quot;+aLong;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;),</span><br><span class="line">               Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                       .map(new Function&lt;Long,String&gt;() &#123;</span><br><span class="line">                           @Override</span><br><span class="line">                           public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                               return &quot;B&quot;+aLong;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;)</span><br><span class="line">       ).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void accept(String s) throws Exception &#123;</span><br><span class="line">               LogUtils.e(s);//A，B 交替出现---------- A0,B0,A1,B1,A2,B2</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><ul><li>combineLatest() ------------ 作用和zip()类似，但是 combineLatest() 发送事件的序列是与发送的时间线有关的，当 combineLatest() 中所有的 Observable 都发送了事件，只要其中有一个 Observable 发送事件，这个事件就会和其他 Observable 最近发送的事件结合起来发送。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Observable.combineLatest(</span><br><span class="line">        Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s1 = &quot;A&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;A 发送的事件: &quot; + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s2 = &quot;B&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;B 发送的事件: &quot; + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;), new BiFunction&lt;String, String, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(String s, String s2) throws Exception &#123;</span><br><span class="line">                String res = s + s2;</span><br><span class="line">                LogUtils.d(&quot;A &amp; B 发送的事件: &quot; + res);</span><br><span class="line">                return res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Consumer&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(String s) throws Exception &#123;</span><br><span class="line">        LogUtils.d( &quot;onNext: &quot; + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>concatArrayDelayError() &amp; mergeArrayDelayError()&amp; combineLatestDelayError() -------------- 如果有一个被观察者发送了一个Error事件，那么就结束发送，如果你想将Error() 事件延迟到所有被观察者都发送完事件后再执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Observable.concatArrayDelayError(</span><br><span class="line">         Observable.just(1,2),</span><br><span class="line">         Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                 e.onNext(3);</span><br><span class="line">                 e.onError(new NullPointerException());</span><br><span class="line">                 e.onNext(4);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;),</span><br><span class="line">         Observable.just(5,6)</span><br><span class="line"> ).subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">     @Override</span><br><span class="line">     public void onSubscribe(Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onNext(Integer integer) &#123;</span><br><span class="line">         LogUtils.e(&quot;onNext : 当前数字：&quot;+integer);//1,2,3,5,6</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onError(Throwable e) &#123;</span><br><span class="line">         LogUtils.e(&quot;onError : &quot;+e.toString());//java.lang.NullPointerException</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Observable.mergeArrayDelayError(</span><br><span class="line">                Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                        .map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                                return &quot;A&quot; + aLong;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;),</span><br><span class="line">                Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">                        e.onNext(&quot;C1&quot;);</span><br><span class="line">                        e.onNext(&quot;C2&quot;);</span><br><span class="line">                        e.onNext(&quot;C3&quot;);</span><br><span class="line">                        e.onError(new NullPointerException());</span><br><span class="line">                        e.onNext(&quot;C4&quot;);</span><br><span class="line">                        e.onNext(&quot;C5&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line">                Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                        .map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                                return &quot;B&quot; + aLong;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">        ).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123; &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) &#123;</span><br><span class="line">                LogUtils.e(s);</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123; &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;String&gt; observable1 = Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s1 = &quot;A&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;A 发送的事件: &quot; + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Observable&lt;String&gt; observable2 = Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception &#123;</span><br><span class="line">                String s2 = &quot;B&quot; + aLong;</span><br><span class="line">                LogUtils.d(&quot;B 发送的事件: &quot; + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Observable&lt;String&gt; observable3 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(&quot;C1&quot;);</span><br><span class="line">                e.onNext(&quot;C2&quot;);</span><br><span class="line">                e.onNext(&quot;C3&quot;);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">                e.onNext(&quot;C4&quot;);</span><br><span class="line">                e.onNext(&quot;C5&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Observable.combineLatestDelayError(new ObservableSource[]&#123;observable1, observable2, observable3&#125;, new Function() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object apply(Object o) throws Exception &#123;</span><br><span class="line">                Object[] objects = (Object[]) o;</span><br><span class="line">                String res = &quot;&quot;;</span><br><span class="line">                for (int i = 0; i &lt; objects.length; i++) &#123;</span><br><span class="line">                    res = res + String.valueOf(objects[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                LogUtils.d(&quot;A &amp; B &amp; C 发送的事件: &quot; + res);</span><br><span class="line">                return res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Observer&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) &#123;</span><br><span class="line">                LogUtils.d(s);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>reduce()  ------------ 将所有数据聚合在一起才会发送事件给观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8)</span><br><span class="line">                .reduce(new BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer, Integer integer2) throws Exception &#123;</span><br><span class="line">                        int res = integer + integer2;</span><br><span class="line">                        LogUtils.d(&quot;integer : &quot; + integer);</span><br><span class="line">                        LogUtils.d(&quot;integer2 : &quot; + integer2);</span><br><span class="line">                        LogUtils.d(&quot;res : &quot; + res);</span><br><span class="line">                        return res;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                LogUtils.d(&quot;accept : &quot;+ integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>collect()  ------------ 将数据收集到数据结构当中。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8)</span><br><span class="line">                .collect(new Callable&lt;ArrayList&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public ArrayList&lt;Integer&gt; call() throws Exception &#123;</span><br><span class="line">                        return new ArrayList&lt;&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, new BiConsumer&lt;ArrayList&lt;Integer&gt;, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(ArrayList&lt;Integer&gt; integers, Integer integer) throws Exception &#123;</span><br><span class="line">                        integers.add(integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(new Consumer&lt;ArrayList&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(ArrayList&lt;Integer&gt; integers) throws Exception &#123;</span><br><span class="line">                LogUtils.d(integers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>startWith() &amp; startWithArray()  ------------ 在发送事件之前追加事件，startWith() 追加一个事件，startWithArray() 可以追加多个事件。追加的事件会先发出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(6, 7, 8)</span><br><span class="line">                .startWithArray(3, 4, 5)</span><br><span class="line">                .startWith(2)</span><br><span class="line">                .startWithArray(0, 1)</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(String.valueOf(integer));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>count()  ------------ 返回被观察者发送事件的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7, 8)</span><br><span class="line">                .count()</span><br><span class="line">                .subscribe(new Consumer&lt;Long&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Long aLong) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;发送数量：&quot; + aLong);//8</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h2><span id="功能操作符"> 功能操作符</span></h2><ul><li>delay() -------------- 延迟一段事件发送事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .delay(2, TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnEach() ---------------- Observable 每发送一个之前都会先回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">              e.onNext(1);</span><br><span class="line">              e.onNext(2);</span><br><span class="line">              e.onNext(3);</span><br><span class="line">              e.onNext(4);</span><br><span class="line">              e.onComplete();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">              .doOnEach(new Consumer&lt;Notification&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public void accept(Notification&lt;Integer&gt; integerNotification) throws Exception &#123;</span><br><span class="line">                      LogUtils.d(&quot;doOnEach 方法 &quot;+ integerNotification.getValue());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">              .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                      LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onNext(Integer integer) &#123;</span><br><span class="line">                      LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onError(Throwable e) &#123;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onComplete() &#123;</span><br><span class="line">                      LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnNext() ----------------- Observable 每发送 onNext() 之前都会先回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">               .doOnNext(new Consumer&lt;Integer&gt;()&#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                       LogUtils.d(&quot;doOnNext 方法 &quot;+ integer);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>doAfterNext() -------------- Observable 每发送 onNext() 之后都会回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .doAfterNext(new Consumer&lt;Integer&gt;()&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doAfterNext 方法 &quot;+ integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnComplete ------------------ Observable 每发送 onComplete() 之前都会回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">             .doOnComplete(new Action() &#123;</span><br><span class="line">                 @Override</span><br><span class="line">                 public void run() throws Exception &#123;</span><br><span class="line">                     LogUtils.d(&quot;doOnComplete 方法&quot;);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnError() ---------------- Observable 每发送 onError() 之前都会回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .doOnError(new Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Throwable throwable) throws Exception &#123;</span><br><span class="line">                        LogUtils.e(&quot;doOnError() :&quot;+throwable.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnSubscribe() ----------------- Observable 每发送 onSubscribe() 之前都会回调这个方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onNext(4);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        .doOnSubscribe(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Disposable disposable) throws Exception &#123;</span><br><span class="line">               LogUtils.d(&quot;doOnSubscribe()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer integer) &#123;</span><br><span class="line">                LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnDispose() -------------- 当调用 Disposable 的取消订阅dispose()方法之后回调该方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">               .doOnDispose(new Action() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void run() throws Exception &#123;</span><br><span class="line">                       LogUtils.d(&quot;doOnDispose（）方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                   private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                       this.disposable = d;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   if(integer==2)&#123;</span><br><span class="line">                       disposable.dispose();//取消订阅</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                       LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnLifecycle() ------------- 在回调 onSubscribe 之前回调该方法的第一个参数的回调方法，可以使用该回调方法决定是否取消订阅</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .doOnLifecycle(new Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Disposable disposable) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doOnLifecycle accept&quot;);</span><br><span class="line">                        //disposable.dispose();//取消订阅</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doOnLifecycle Action &quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .doOnDispose(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doOnDispose（）方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                        this.disposable = d;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                        if (integer == 2) &#123;</span><br><span class="line">                            disposable.dispose();//取消订阅</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>doOnTerminate() &amp; doAfterTerminate() --------------- doOnTerminate 是在 onError 或者 onComplete 发送之前回调，而 doAfterTerminate 则是 onError 或者 onComplete 发送之后回调。如果取消订阅之后 doAfterTerminate() 就不会被回调</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .doOnTerminate(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doOnTerminate() 方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .doAfterTerminate(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doAfterTerminate() 方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>doFinally() ------------- 在所有事件发送完毕之后回调该方法，doFinally() 在取消订阅后也都会被回调，且都会在事件序列的最后。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .doFinally(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doFinally() 方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .doAfterTerminate(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doAfterTerminate() 方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .doOnDispose(new Action() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;doOnDispose（）方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                        this.disposable = d;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                        if (integer == 2) &#123;</span><br><span class="line">                            disposable.dispose();//取消订阅</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>onErrorReturn() ------------------- 当接受到一个 onError() 事件之后回调，返回的值会回调 onNext() 方法，并正常结束该事件序列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .onErrorReturn(new Function&lt;Throwable, Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Throwable throwable) throws Exception &#123;</span><br><span class="line">                        LogUtils.e(&quot;onErrorReturn() 方法&quot;+throwable.toString());</span><br><span class="line">                        return 404;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>onErrorResumeNext() ----------- 当接收到 onError() 事件时，返回一个新的 Observable，并正常结束事件序列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onError(new NullPointerException());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">               .onErrorResumeNext(new Function&lt;Throwable, ObservableSource&lt;? extends Integer&gt;&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public ObservableSource&lt;? extends Integer&gt; apply(Throwable throwable) throws Exception &#123;</span><br><span class="line">                       LogUtils.e(&quot;onErrorResumeNext()方法&quot;+throwable.toString());</span><br><span class="line">                       return Observable.just(5,6,7,8,9);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                       LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>onExceptionResumeNext() -------------- 与 onErrorResumeNext() 作用基本一致，但是这个方法只能捕捉 Exception</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new Exception(&quot;111&quot;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">               .onExceptionResumeNext(new Observable&lt;Integer&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   protected void subscribeActual(Observer&lt;? super Integer&gt; observer) &#123;</span><br><span class="line">                       observer.onNext(404);</span><br><span class="line">                       observer.onNext(405);</span><br><span class="line">                       observer.onComplete();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>retry() ----------------- 如果出现错误事件，则会重新发送所有事件序列。times 是代表重新发的次数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onNext(4);</span><br><span class="line">        e.onError(new NullPointerException());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">   .retry(2)</span><br><span class="line">        .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer integer) &#123;</span><br><span class="line">                LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>retryUntil() --------------- 出现错误事件之后，可以通过此方法判断是否继续发送事件。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">final int[] i = &#123;0&#125;;</span><br><span class="line">       Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onNext(5);</span><br><span class="line">               e.onError(new NullPointerException());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">               .retryUntil(new BooleanSupplier() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public boolean getAsBoolean() throws Exception &#123;</span><br><span class="line">                       if (i[0] &gt;= 6) &#123;//停止继续发送</span><br><span class="line">                           return true;</span><br><span class="line">                       &#125; else &#123;</span><br><span class="line">                           return false;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       i[0] += integer;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                       LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>retryWhen() ---------------- 当被观察者接收到异常或者错误事件时会回调该方法，这个方法会返回一个新的被观察者。如果返回的被观察者发送 Error 事件则之前的被观察者不会继续发送事件，如果发送正常事件则之前的被观察者会继续不断重试发送事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onNext(5);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .retryWhen(new Function&lt;Observable&lt;Throwable&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public ObservableSource&lt;?&gt; apply(Observable&lt;Throwable&gt; throwableObservable) throws Exception &#123;</span><br><span class="line">                        return throwableObservable.flatMap(new Function&lt;Throwable, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public ObservableSource&lt;?&gt; apply(Throwable throwable) throws Exception &#123;</span><br><span class="line">                                if (throwable instanceof NullPointerException)&#123;</span><br><span class="line">                                    return Observable.error(new Throwable(&quot;终止啦&quot;));</span><br><span class="line">                                &#125;else&#123;</span><br><span class="line">                                    return Observable.just(6,7,8,9);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>repeat() -------------- 重复发送被观察者的事件，times 为发送次数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .repeat(2)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>repeatWhen() ------------------ 这个方法可以会返回一个新的被观察者设定一定逻辑来决定是否重复发送事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .repeatWhen(new Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public ObservableSource&lt;?&gt; apply(Observable&lt;Object&gt; objectObservable) throws Exception &#123;</span><br><span class="line">                        return Observable.empty();//直接发送 onComplete() 事件</span><br><span class="line">//                        return Observable.just(1);//不发送任何事件</span><br><span class="line">//                        return Observable.error(new Exception(&quot;404&quot;));//发送 onError() 事件</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.e(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>subscribeOn() ------------ 指定被观察者的线程，要注意的时，如果多次调用此方法，只有第一次有效</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                LogUtils.d(&quot;当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.newThread())</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                        LogUtils.d(&quot;onError()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>observeOn() ----------------- 指定观察者的线程，每指定一次就会生效一次</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                LogUtils.d(&quot;当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .subscribeOn(Schedulers.newThread())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                        LogUtils.d(&quot;onError()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法—当前线程：&quot;+Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h2><span id="过滤操作符"> 过滤操作符</span></h2><ul><li>filter() -------------- 通过一定逻辑来过滤被观察者发送的事件，如果返回 true 则会发送事件，否则不会发送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6)</span><br><span class="line">                .filter(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                        if (integer % 2 == 0) &#123;</span><br><span class="line">                            return true;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>ofType() ----------------- 可以过滤不符合该类型事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(&quot;one&quot;,&quot;two&quot;,&quot;three&quot;,1,2,3)</span><br><span class="line">               .ofType(Integer.class)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) &#123;</span><br><span class="line">                       LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() &#123;</span><br><span class="line">                       LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure><ul><li>skip() &amp; skipLast() --------------- 跳过正序某些事件，count 代表跳过事件的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6)</span><br><span class="line">                .skip(2)//跳过前面2个事件</span><br><span class="line">                .skipLast(2)//跳过后面2个事件</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>distinct() ------------ 过滤事件序列中的重复事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,4,3,2,1)</span><br><span class="line">                .distinct()</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);//1,2,3,4</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>distinctUntilChanged() ---------------- 过滤掉连续重复的事件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,4,3,2,1)</span><br><span class="line">                .distinctUntilChanged()</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);//1，2，3，4，3，2，1</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>take() &amp; takeLast() --------------------- 控制观察者接收的事件的数量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8,9)</span><br><span class="line">                .take(3)//只接收前面3个</span><br><span class="line">//                .takeLast(2)//只接收后面2个</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>debounce() ----------------- 如果两件事件发送的时间间隔小于设定的时间间隔则前一件事件就不会发送给观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                Thread.sleep(900);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .debounce(1,TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>firstElement() &amp;&amp; lastElement() ----------------- firstElement() 取事件序列的第一个元素，lastElement() 取事件序列的最后一个元素</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .firstElement()</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;firstElement() 方法 &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        Observable.just(1, 2, 3, 4)</span><br><span class="line">                .lastElement()</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;lastElement() 方法 &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>elementAt() &amp; elementAtOrError() -------------- elementAt() 可以指定取出事件序列中事件，但是输入的 index 超出事件序列的总数的话就不会出现任何结果。这种情况下，你想发出异常信息的话就用 elementAtOrError()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .elementAt(4)</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;elementAt() 方法 &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .elementAtOrError(4)//报错</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;elementAtOrError() 方法 &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><h2><span id="条件操作符"> 条件操作符</span></h2><ul><li>all() ---------------- 判断事件序列是否全部满足某个事件，如果都满足则返回 true，反之则返回 false</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .all(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                        return integer &lt; 5;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(new Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Boolean aBoolean) throws Exception &#123;</span><br><span class="line">                LogUtils.d(&quot;aBoolean : &quot; + aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>takeWhile() ------------- 可以设置条件，当某个数据满足条件时就会发送该数据，反之则不发送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">                .takeWhile(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                        return integer &lt; 4;//如果第一条数据没有满足条件，后面的都不会进行</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                LogUtils.d(&quot;integer : &quot; + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>skipWhile() ---------- 可以设置条件，当某个数据满足条件时不发送该数据，反之则发送</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">        .skipWhile(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                return integer &lt; 4;//当满足条件时，后面的都运行</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">        LogUtils.d(&quot;integer : &quot; + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>takeUntil() -------------- 可以设置条件，当事件满足此条件时，下一次的事件就不会被发送了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">            .takeUntil(new Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public boolean test(Integer integer) throws Exception &#123;</span><br><span class="line">                    return integer &gt;= 3;//当满足条件后，从下一次的事件开始都不会发送了</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">            LogUtils.d(&quot;integer : &quot; + integer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ul><li>skipUntil() ------------ 当 skipUntil() 中的 Observable 发送事件了，原来的 Observable 才会发送事件给观察者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.intervalRange(1, 5, 0, 1, TimeUnit.SECONDS)</span><br><span class="line">                .skipUntil(Observable.intervalRange(1, 3, 2, 1, TimeUnit.SECONDS))</span><br><span class="line">                .subscribe(new Observer&lt;Long&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Long along) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onNext()方法 : &quot; + along);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) &#123;</span><br><span class="line">                        LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() &#123;</span><br><span class="line">                        LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>sequenceEqual() --------------- 判断两个 Observable 发送的事件是否相同</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.sequenceEqual(Observable.just(1, 2, 3), Observable.just(1, 2, 3))</span><br><span class="line">                .subscribe(new Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Boolean aBoolean) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;aBoolean : &quot; + aBoolean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>contains() ------------- 判断事件序列中是否含有某个元素，如果有则返回 true，如果没有则返回 false</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5)</span><br><span class="line">                .contains(3)</span><br><span class="line">                .subscribe(new Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Boolean aBoolean) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;aBoolean : &quot; + aBoolean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><ul><li>isEmpty() --------------- 判断事件序列是否为空 ( true ：空 )</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">              e.onComplete();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">              .isEmpty()</span><br><span class="line">              .subscribe(new Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">                  @Override</span><br><span class="line">                  public void accept(Boolean aBoolean) throws Exception &#123;</span><br><span class="line">                      LogUtils.d(&quot;aBoolean : &quot; + aBoolean);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br></pre></td></tr></table></figure><ul><li>amb() --------------- amb() 要传入一个 Observable 集合，但是只会发送最先发送事件的 Observable 中的事件，其余 Observable 将会被丢弃</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Observable&lt;Long&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS));</span><br><span class="line">list.add(Observable.intervalRange(11, 5, 0, 1, TimeUnit.SECONDS));</span><br><span class="line">list.add(Observable.intervalRange(21, 5, 2, 1, TimeUnit.SECONDS));</span><br><span class="line">Observable.amb(list)</span><br><span class="line">        .subscribe(new Observer&lt;Long&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) &#123;</span><br><span class="line">                LogUtils.d(&quot;onSubscribe()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Long along) &#123;</span><br><span class="line">                LogUtils.d(&quot;onNext()方法 : &quot; + along);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) &#123;</span><br><span class="line">                LogUtils.d(&quot;onError()方法 :&quot; + e.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() &#123;</span><br><span class="line">                LogUtils.d(&quot;onComplete()方法&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ul><li>defaultIfEmpty() -------------- 如果观察者只发送一个 onComplete() 事件，则可以利用这个方法发送一个值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">                e.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .defaultIfEmpty(1001)</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception &#123;</span><br><span class="line">                        LogUtils.d(&quot;integer : &quot; + integer);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考&lt;a href=&quot;https://juejin.im/post/5b17560e6fb9a01e2862246f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RxJava2 只看这一篇文章就够了&lt;/a&gt;，强烈推荐大家去看一下。&lt;/p&gt;
&lt;h1&gt;&lt;
      
    
    </summary>
    
      <category term="android" scheme="http://xue12311.github.io/categories/android/"/>
    
    
      <category term="rxjava2" scheme="http://xue12311.github.io/tags/rxjava2/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - 集合练习</title>
    <link href="http://xue12311.github.io/2019/03/14/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2019/03/14/kotlin/kotlin练习-集合练习/</id>
    <published>2019-03-14T13:32:31.000Z</published>
    <updated>2019-06-01T14:25:49.280Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-集合练习"> kotlin练习 - 集合练习</span></h1><h2><span id="set集合"> Set集合</span></h2><ul><li>Set集合创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //创建不可变集合，返回Set</span><br><span class="line">    var set = setOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line">    println(set)//[java, kotlin, go]</span><br><span class="line">    println(&quot;setOf 返回类型 $&#123;set.javaClass&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    //创建可变集合，返回值MutableSet</span><br><span class="line">    var mutablemap = mutableListOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line">    mutablemap[0] = &quot;JavaScript&quot;</span><br><span class="line">    println(mutablemap)//[JavaScript, kotlin, go]</span><br><span class="line">    println(&quot;mutableListOf 返回类型 $&#123;mutablemap.javaClass&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    //创建LinkedHashSet集合</span><br><span class="line">    var linkedHashSet = linkedSetOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line">    println(linkedHashSet)</span><br><span class="line">    println(&quot;linkedHashSet 返回类型 $&#123;linkedHashSet.javaClass&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    //创建HashSet集合</span><br><span class="line">    var hashSet = hashSetOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line">    println(hashSet)//不保证元素的顺序--[kotlin, go, java]</span><br><span class="line"></span><br><span class="line">    //创建TreeSet集合</span><br><span class="line">    var treeSet = sortedSetOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line">    println(treeSet)//集合按从小到大排列--[go, java, kotlin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Set集合的使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//创建不可变集合，返回Set</span><br><span class="line"> var set = setOf(&quot;java&quot;, &quot;kotlin&quot;, &quot;go&quot;)</span><br><span class="line"></span><br><span class="line"> //判断是否所有的元素长度都大于5  ------所有元素都满足条件</span><br><span class="line"> println(set.all &#123; it.length &gt; 5 &#125;)// false</span><br><span class="line"></span><br><span class="line"> //判断是否任意一元素的长度大于5  ------任意元素都满足条件</span><br><span class="line"> println(set.any &#123; it.length &gt; 5 &#125;)//true</span><br><span class="line"></span><br><span class="line"> //以Lambda 表达式的值为key , 集合元素为value ,组成的Map集合</span><br><span class="line"> var map = set.associateBy(&#123; &quot;我正在学习$&#123;it&#125;&quot; &#125;)</span><br><span class="line"> println(map)//&#123;我正在学习java=java, 我正在学习kotlin=kotlin, 我正在学习go=go&#125;</span><br><span class="line"></span><br><span class="line"> //使用in、!in运算符</span><br><span class="line"> println(&quot;java&quot; in set)// true</span><br><span class="line"> println(&quot;java&quot; !in set)// false</span><br><span class="line"></span><br><span class="line"> //删除Set集合前面两个元素</span><br><span class="line"> var dropedList = set.drop(2)</span><br><span class="line"> println(dropedList)// [go]</span><br><span class="line"></span><br><span class="line"> //对Set集合进行过滤: 需要得到所有包含 va 的集合,</span><br><span class="line"> var filteredList1 = set.filter(&#123; &quot;va&quot; in it &#125;)//如果没有返回空元素的集合</span><br><span class="line"> println(filteredList1)//[java]</span><br><span class="line"></span><br><span class="line"> //查找Set集合中包含 va 的元素，如果找到就返回该元素，否则返回 null</span><br><span class="line"> var filteredList2 = set.find(&#123; &quot;o&quot; in it &#125;)</span><br><span class="line"> println(filteredList2)//kotlin</span><br><span class="line"> var filteredList3 = set.find(&#123; &quot;va1&quot; in it &#125;)</span><br><span class="line"> println(filteredList3)//null</span><br><span class="line"></span><br><span class="line"> //将Set集合中所有字符串拼接在一起</span><br><span class="line"> var foldedList1 = set.fold(&quot;&quot;, &#123; acc, s -&gt; acc + s &#125;)</span><br><span class="line"> println(foldedList1)//javakotlingo</span><br><span class="line"> var foldedList2 = set.fold(&quot;456&quot;, &#123; acc, s -&gt; acc +&quot; 123 $&#123;s&#125;&quot;  &#125;)</span><br><span class="line"> println(foldedList2)//456 123 java 123 kotlin 123 go</span><br><span class="line"> //查找某个元素的出现位置------没有就会返回-1</span><br><span class="line"> println(set.indexOf(&quot;kotlin&quot;))// 1</span><br><span class="line"> println(set.indexOf(&quot;kotlin1&quot;))// -1</span><br><span class="line"> </span><br><span class="line">   //循环遍历</span><br><span class="line"> var books = setOf(&quot;疯狂java讲义&quot;, &quot;疯狂kotlin讲义&quot;, &quot;疯狂IOS讲义&quot;, &quot;疯狂android讲义&quot;)</span><br><span class="line"> for (book in books)&#123;</span><br><span class="line">     println(book)</span><br><span class="line"> &#125;</span><br><span class="line"> books.forEach(&#123;</span><br><span class="line">     println(it)</span><br><span class="line"> &#125;)</span><br><span class="line"> for (i in books.indices)&#123;</span><br><span class="line">     println(books.elementAt(i))</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> var books = mutableSetOf(&quot;疯狂java讲义&quot;)</span><br><span class="line">   //新增</span><br><span class="line"> books.addAll(setOf(&quot;疯狂kotlin讲义&quot;, &quot;疯狂IOS讲义&quot;))</span><br><span class="line"> books.add(&quot;疯狂android讲义&quot;)</span><br><span class="line"> println(books.toString())//[疯狂java讲义, 疯狂kotlin讲义, 疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> //删除</span><br><span class="line"> books.remove(&quot;疯狂kotlin讲义&quot;)</span><br><span class="line"> println(books.toString())//[疯狂java讲义,疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> books.removeAll(setOf(&quot;疯狂java讲义&quot;))</span><br><span class="line"> println(books.toString())//[疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> //清空所有</span><br><span class="line"> books.clear()</span><br><span class="line"> println(books.toString())//[]</span><br><span class="line"> //只保留公共的元素</span><br><span class="line"> books = mutableSetOf(&quot;疯狂java讲义&quot;, &quot;疯狂kotlin讲义&quot;, &quot;疯狂IOS讲义&quot;, &quot;疯狂android讲义&quot;)</span><br><span class="line"> books.retainAll(setOf(&quot;疯狂kotlin讲义&quot;, &quot;疯狂PHP讲义&quot;, &quot;疯狂android讲义&quot;))</span><br><span class="line"> println(books.toString())//[疯狂kotlin讲义, 疯狂android讲义]</span><br></pre></td></tr></table></figure><h2><span id="list集合"> List集合</span></h2><ul><li>List集合创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var list1 = listOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list1.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  var list2 = listOfNotNull(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list2.toString())//[1, 2, 3, 4, 5, 7, 8, 9]</span><br><span class="line">  var list3 = mutableListOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list3.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  list3.add(10)</span><br><span class="line">  list3.set(5, 6)</span><br><span class="line">  println(list3.toString())//[1, 2, 3, 4, 5, 6, 7, 8, 9,10]</span><br><span class="line">  var list4 = arrayListOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list4.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  list4.set(5, 6)</span><br><span class="line">  list4.add(10)</span><br><span class="line">  println(list4.toString())//[1, 2, 3, 4, 5, 6, 7, 8, 9,10]</span><br></pre></td></tr></table></figure><ul><li>List集合的使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> //遍历List</span><br><span class="line">    var list1 = listOf(&quot;Java&quot;, null, &quot;Kotlin&quot;, &quot;Go&quot;)</span><br><span class="line">    list1.forEach &#123;</span><br><span class="line">        println(it)</span><br><span class="line">    &#125;</span><br><span class="line">    for (str in list1) &#123;</span><br><span class="line">        println(str)</span><br><span class="line">    &#125;</span><br><span class="line">    for (i in list1.indices) &#123;</span><br><span class="line">        println(list1[i])</span><br><span class="line">        println(&quot;get = $&#123;list1.get(i)&#125;&quot;)</span><br><span class="line">        println(&quot;elementAt = $&#123;list1.elementAt(i)&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    var index = list1.indexOf(&quot;Go&quot;)</span><br><span class="line">    println(&quot;Go 在数组中的位置：$&#123;index&#125;&quot;)//3</span><br><span class="line"></span><br><span class="line">    var list2 = mutableListOf(1, 2, 3, 1, 8, 3, 4, 6, 1, 4, 2, 3)</span><br><span class="line">    //最后一次出现的的位置</span><br><span class="line">    var last1 = list2.lastIndexOf(2)//10</span><br><span class="line">    //最后一次出现的的位置</span><br><span class="line">    var last2 = list2.indexOfLast &#123; it == 2 &#125;//10</span><br><span class="line">    //第一次出现的位置</span><br><span class="line">    var first = list2.indexOfFirst &#123; it == 2 &#125;//1</span><br><span class="line">    println(&quot;2在数组中第一次出现在$&#123;first&#125;,最后一次出现在$&#123;last1&#125;,$&#123;last2&#125;&quot;)</span><br><span class="line">    //返回集合</span><br><span class="line">    var list3 = listOf(&quot;Java&quot;, null, &quot;Kotlin&quot;, &quot;PHP&quot;, null, &quot;Go&quot;)</span><br><span class="line">    var sublist = list3.subList(2, 5)//从第2个到第5个之间的元素</span><br><span class="line">    println(sublist.toString())//[Kotlin, PHP, null]</span><br><span class="line">//    var list4 = mutableListOf(&quot;Java&quot;, &quot;JavaScript&quot;, null, &quot;HTML&quot;, &quot;Kotlin&quot;, null, &quot;Python&quot;, &quot;PHP&quot;, &quot;Go&quot;)</span><br><span class="line">    var list4 = mutableListOf(&quot;Java&quot;, null, &quot;HTML&quot;, &quot;Go&quot;)</span><br><span class="line">    println(list4)//[Java, null, HTML, Go]</span><br><span class="line">    //新增</span><br><span class="line">    list4.add(&quot;Python&quot;)</span><br><span class="line">    list4.add(2, &quot;C++&quot;)</span><br><span class="line">    list4.addAll(listOf(&quot;Kotlin&quot;, null))</span><br><span class="line">    println(list4)//[Java, null, C++, HTML, Go, Python, Kotlin, null]</span><br><span class="line">    //删除</span><br><span class="line">    list4.removeAt(1)</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Kotlin, null]</span><br><span class="line">    //list4[6] =&quot;CSS&quot;;</span><br><span class="line">    list4.set(6, &quot;CSS&quot;)</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Kotlin, CSS]</span><br><span class="line">    list4.remove(&quot;Go&quot;)</span><br><span class="line">    println(list4)//[Java, C++, HTML, Python, Kotlin, CSS]</span><br><span class="line">    list4.add(3, &quot;Go&quot;)</span><br><span class="line">    list4.add(5, &quot;Go&quot;)</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Go, Kotlin, CSS]</span><br><span class="line">    //替换元素</span><br><span class="line">    list4.replaceAll &#123;</span><br><span class="line">        if (it.equals(&quot;Go&quot;)) &#123;</span><br><span class="line">            &quot;go&quot;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            it</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(list4)//[Java, C++, HTML, go, Python, go, Kotlin, CSS] </span><br><span class="line">    //删除</span><br><span class="line">    list4.removeAll(listOf(&quot;go&quot;))</span><br><span class="line">    println(list4)//[Java, C++, HTML, Python, Kotlin, CSS]</span><br><span class="line"></span><br><span class="line">    //清空</span><br><span class="line">    list4.clear()</span><br><span class="line">    println(list4)//[]</span><br></pre></td></tr></table></figure><h2><span id="map集合"> Map集合</span></h2><ul><li>Map集合创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//不可变map集合</span><br><span class="line">var map1 = mapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">println(map1)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4&#125;</span><br><span class="line">//可变集合MutableMap</span><br><span class="line">var map2 = mutableMapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">println(map2)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4&#125;</span><br><span class="line">map2.put(&quot;Python&quot;, 5)</span><br><span class="line">println(map2)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=5&#125;</span><br><span class="line">map2.remove(&quot;JavaScript&quot;)</span><br><span class="line">println(map2)//&#123;Java=1, HTML=3, Kotlin=4, Python=5&#125;</span><br><span class="line">//HashMap集合----不保证key-value的顺序</span><br><span class="line">var map3 = hashMapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">println(map3)//&#123;Java=1, HTML=3, JavaScript=2, Kotlin=4&#125;</span><br><span class="line">//LinkedHashMap集合---key-value按添加顺序排列</span><br><span class="line">var map4 = linkedMapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">println(map4)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4&#125;</span><br><span class="line">//SortedMap集合------ key-value按key由小到大排列</span><br><span class="line">var map5 = sortedMapOf(&quot;Java&quot; to 1, &quot;Python&quot; to 5, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4, &quot;JavaScript&quot; to 2, &quot;Go&quot; to 6)</span><br><span class="line">println(map5)//&#123;Go=6, HTML=3, Java=1, JavaScript=2, Kotlin=4, Python=5&#125;</span><br></pre></td></tr></table></figure><ul><li>Map集合的使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">var map1 = mapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">//当map集合中所有key-value对都满足条件返回true</span><br><span class="line">var all = map1.all &#123;</span><br><span class="line">    it.key.length &gt;= 4 &amp;&amp; it.value &gt; 0</span><br><span class="line">&#125;</span><br><span class="line">println(all)//true</span><br><span class="line">//当map集合中任意一个key-value对满足条件就会返回true</span><br><span class="line">var any = map1.any &#123;</span><br><span class="line">    it.key.length &gt;= 10 &amp;&amp; it.value &gt; 1</span><br><span class="line">&#125;</span><br><span class="line">println(any)//true</span><br><span class="line">//判断map集合中是否有对于key的key-value</span><br><span class="line">println(&quot;Java&quot; in map1);//true</span><br><span class="line">println(&quot;Java&quot; !in map1);//false</span><br><span class="line">println(&quot;Go&quot; in map1);//false</span><br><span class="line">println(&quot;Go&quot; !in map1);//true</span><br><span class="line"></span><br><span class="line">//对map进行过滤，要求key中包含：Java</span><br><span class="line">var filterMap1 = map1.filter &#123; &quot;Java&quot; in it.key &#125;</span><br><span class="line">println(filterMap1)//&#123;Java=1, JavaScript=2&#125;</span><br><span class="line">var filterMap2 = map1.filter &#123; it.key in &quot;Java&quot; &#125;</span><br><span class="line">println(filterMap2)//&#123;Java=1&#125;</span><br><span class="line">//通过map集合，返回一个新的List</span><br><span class="line">var mappedList1 = map1.map &#123; &quot;《疯狂$&#123;it.key&#125;》讲义,第$&#123;it.value&#125;个&quot; &#125;</span><br><span class="line">var mappedList2 = map1.map &#123; &quot;《疯狂$&#123;it.key&#125;》讲义&quot; to &quot;第$&#123;it.value&#125;个&quot; &#125;</span><br><span class="line">println(mappedList1)//[《疯狂Java》讲义,第1个, 《疯狂JavaScript》讲义,第2个, 《疯狂HTML》讲义,第3个, 《疯狂Kotlin》讲义,第4个]</span><br><span class="line">println(mappedList2)//[(《疯狂Java》讲义, 第1个), (《疯狂JavaScript》讲义, 第2个), (《疯狂HTML》讲义, 第3个), (《疯狂Kotlin》讲义, 第4个)]</span><br><span class="line">//Map集合中key-value对中 value最大的值</span><br><span class="line">var maxby1 = map1.maxBy &#123; it.value &#125;</span><br><span class="line">println(maxby1)//Kotlin=4</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 value最小的值</span><br><span class="line">var minby1 = map1.minBy &#123; it.value &#125;</span><br><span class="line">println(minby1)//Java=1</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 key的长度最大的值</span><br><span class="line">var maxby2 = map1.maxBy &#123; it.key.length &#125;</span><br><span class="line">println(maxby2)//JavaScript=2</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 key的长度最小的值</span><br><span class="line">var minby2 = map1.minBy &#123; it.key.length &#125;</span><br><span class="line">println(minby2)//Java=1</span><br><span class="line"></span><br><span class="line">var map2 = mapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">var map3 = mapOf(&quot;Python&quot; to 1, &quot;Go&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4)</span><br><span class="line">//集合相加---相当于并集</span><br><span class="line">println(map2 + map3)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=1, Go=2&#125;</span><br><span class="line">//集合相减---减去公共的元素</span><br><span class="line">println(map2 - map3)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4&#125;</span><br><span class="line"></span><br><span class="line">var plus = map2.plus(map3)</span><br><span class="line">println(plus)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=1, Go=2&#125;</span><br><span class="line"></span><br><span class="line">var minus = map2.minus(map3)</span><br><span class="line">println(minus)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4&#125;</span><br><span class="line">//遍历Map集合</span><br><span class="line">var map4 = mapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4, &quot;Go&quot; to 5)</span><br><span class="line">for (en in map4.entries) &#123;</span><br><span class="line">    println(&quot;$&#123;en.key&#125; -&gt; $&#123;en.value&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">for (key in map4.keys) &#123;</span><br><span class="line">    println(&quot;$&#123;key&#125; -&gt; $&#123;map4[key]&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">for ((key, value) in map4) &#123;</span><br><span class="line">    println(&quot;$&#123;key&#125; -&gt; $&#123;value&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">map4.forEach(&#123;</span><br><span class="line">    println(&quot;$&#123;it.key&#125; -&gt; $&#123;it.value&#125;&quot;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var map5 = mutableMapOf(&quot;Java&quot; to 1, &quot;JavaScript&quot; to 2, &quot;HTML&quot; to 3, &quot;Kotlin&quot; to 4, &quot;Go&quot; to 5)</span><br><span class="line">map5[&quot;Go&quot;] = 0</span><br><span class="line">println(map5)//&#123;Java=1, JavaScript=2, HTML=3, Kotlin=4, Go=0&#125;</span><br><span class="line">map5.put(&quot;HTML&quot;, 10)</span><br><span class="line">println(map5)//&#123;Java=1, JavaScript=2, HTML=10, Kotlin=4, Go=0&#125;</span><br><span class="line">map5.remove(&quot;Go&quot;)</span><br><span class="line">println(map5)//&#123;Java=1, JavaScript=2, HTML=10, Kotlin=4&#125;</span><br><span class="line">map5.remove(&quot;Java&quot;, 2)</span><br><span class="line">println(map5)//&#123;Java=1, JavaScript=2, HTML=10, Kotlin=4&#125;</span><br><span class="line">map5.remove(&quot;Java&quot;, 1)</span><br><span class="line">println(map5)//&#123;JavaScript=2, HTML=10, Kotlin=4&#125;</span><br><span class="line">map5.putAll(hashMapOf(&quot;PHP&quot; to 6, &quot;C++&quot; to 7,&quot;JavaScript&quot; to 8 ))</span><br><span class="line">println(map5)//&#123;JavaScript=8, HTML=10, Kotlin=4, PHP=6, C++=7&#125;</span><br><span class="line">//清空Map集合</span><br><span class="line">map5.clear()</span><br><span class="line">println(map5)//&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-集合练习&quot;&gt; kotlin练习 - 集合练习&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;set集合&quot;&gt; Set集合&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set集合创建&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>WebView 图片选择</title>
    <link href="http://xue12311.github.io/2019/01/20/android/WebView%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/"/>
    <id>http://xue12311.github.io/2019/01/20/android/WebView选择图片/</id>
    <published>2019-01-20T07:11:00.000Z</published>
    <updated>2019-06-01T15:42:58.391Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="webview-图片选择"> WebView 图片选择</span></h1><p>最近需要做webview选择图片，就找了一些资料，记录一下。<br>本文参考:<a href="https://blog.csdn.net/djcken/article/details/46379929" target="_blank" rel="noopener">Android使用WebView从相册/拍照中添加图片</a></p><h2><span id="自定义webchromeclient"> 自定义WebChromeClient</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import android.net.Uri;</span><br><span class="line">import android.webkit.ValueCallback;</span><br><span class="line">import android.webkit.WebChromeClient;</span><br><span class="line">import android.webkit.WebView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * WebView 上传文件</span><br><span class="line"> */</span><br><span class="line">public class ReWebChomeClient extends WebChromeClient &#123;</span><br><span class="line"></span><br><span class="line">    private OpenFileChooserCallBack mOpenFileChooserCallBack;</span><br><span class="line"></span><br><span class="line">    public ReWebChomeClient(OpenFileChooserCallBack openFileChooserCallBack) &#123;</span><br><span class="line">        mOpenFileChooserCallBack = openFileChooserCallBack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //For Android 3.0+</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType) &#123;</span><br><span class="line">        mOpenFileChooserCallBack.openFileChooserCallBack(uploadMsg, acceptType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // For Android &lt; 3.0</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg) &#123;</span><br><span class="line">        openFileChooser(uploadMsg, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // For Android  &gt; 4.1.1</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) &#123;</span><br><span class="line">        openFileChooser(uploadMsg, acceptType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // For Android 5.0+</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) &#123;</span><br><span class="line">        mOpenFileChooserCallBack.showFileChooserCallBack(filePathCallback);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public interface OpenFileChooserCallBack &#123;</span><br><span class="line">        void openFileChooserCallBack(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType);</span><br><span class="line"></span><br><span class="line">        void showFileChooserCallBack(ValueCallback&lt;Uri[]&gt; filePathCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="使用rewebchomeclient"> 使用ReWebChomeClient</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">private ValueCallback&lt;Uri&gt; uploadMessage;</span><br><span class="line">private ValueCallback&lt;Uri[]&gt; uploadMessageAboveL;</span><br><span class="line">//用来判断是否需要给WebView返回null</span><br><span class="line">private int web_image = 0;</span><br><span class="line">private String picFilePath;//图片保存路径</span><br><span class="line">private int IDENTITY_IMAGE_REQUEST_CODE_Album = 1;//相册</span><br><span class="line">private int IDENTITY_IMAGE_REQUEST_CODE_Photograph = 2;// 拍照</span><br><span class="line">private int FILE_CHOOSER_RESULT_CODE = 3;//图片选择</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">//设置WebChromeClient</span><br><span class="line">mWebView.setWebChromeClient(mWebChromeClient);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">private ReWebChomeClient mWebChromeClient = new ReWebChomeClient(new ReWebChomeClient.OpenFileChooserCallBack() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void openFileChooserCallBack(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType) &#123;//Android &gt;=3.0</span><br><span class="line">            uploadMessage = uploadMsg;</span><br><span class="line">            openImageChooserActivity();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void showFileChooserCallBack(ValueCallback&lt;Uri[]&gt; filePathCallback) &#123;// Android &gt;= 5.0</span><br><span class="line">            uploadMessageAboveL = filePathCallback;</span><br><span class="line">            openImageChooserActivity();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2><span id="选择图片"> 选择图片</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">  private void openImageChooserActivity() &#123;</span><br><span class="line">        web_image = 0;//判断是否已经选择了</span><br><span class="line">        //自定义选择图片提示框</span><br><span class="line">        AlertDialog dialog = new AlertDialog.Builder(mContext).setItems(R.array.head_type_array, (dialog1, which) -&gt; &#123;</span><br><span class="line">        //如果点击了dialog的选项，修改变量，不要在setOnDismissListener()方法中</span><br><span class="line">            web_image = 1;</span><br><span class="line">            selected(which);</span><br><span class="line">        &#125;).create();</span><br><span class="line">        dialog.show();</span><br><span class="line">        dialog.setOnDismissListener(dialog12 -&gt; &#123;</span><br><span class="line">            if (web_image == 0) &#123;</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void selected(int position) &#123;</span><br><span class="line">        switch (position) &#123;</span><br><span class="line">            case 0://相册</span><br><span class="line">                getPermissionsStorage();</span><br><span class="line">                break;</span><br><span class="line">            case 1:// 拍照</span><br><span class="line">                getPermissionsCamera();</span><br><span class="line">                break;</span><br><span class="line">           case 2://选择图片</span><br><span class="line">                Intent i = new Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">                i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">                i.setType(&quot;image/*&quot;);</span><br><span class="line">                startActivityForResult(Intent.createChooser(i, &quot;Image Chooser&quot;), FILE_CHOOSER_RESULT_CODE);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     @Override</span><br><span class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        if (requestCode == IDENTITY_IMAGE_REQUEST_CODE_Photograph) &#123;//拍照</span><br><span class="line">            if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">                // 添加图片</span><br><span class="line">                if (picFilePath == null) &#123;</span><br><span class="line">                    picFilePath = Datas.picPathSD + BitmapUtil.pictime;</span><br><span class="line">                &#125;</span><br><span class="line">                getImageWebView(picFilePath);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 删除图片</span><br><span class="line">                BitmapUtil.deleteTempFile(picFilePath);</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (requestCode == IDENTITY_IMAGE_REQUEST_CODE_Album) &#123;//相册</span><br><span class="line">            if (resultCode == 1020) &#123;</span><br><span class="line">                String str_images = StringUtils.null2Length0(data.getStringExtra(&quot;images&quot;));</span><br><span class="line">                getImageWebView(str_images);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (requestCode == FILE_CHOOSER_RESULT_CODE) &#123;//选择图片</span><br><span class="line">            if (null == uploadMessage &amp;&amp; null == uploadMessageAboveL) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            Uri result = data == null || resultCode != RESULT_OK ? null : data.getData();</span><br><span class="line">            if (uploadMessageAboveL != null) &#123;</span><br><span class="line">                onActivityResultAboveL(requestCode, resultCode, data);</span><br><span class="line">            &#125; else if (uploadMessage != null) &#123;</span><br><span class="line">                uploadMessage.onReceiveValue(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void getImageWebView(String str_image) &#123;//将图片路径返回给webview</span><br><span class="line">        if (!StringUtils.isEmpty(str_image)) &#123;</span><br><span class="line">            Uri uri = getImageContentUri(mContext, new File(str_image));</span><br><span class="line">            if (uploadMessageAboveL != null) &#123;</span><br><span class="line">                Uri[] uris = new Uri[]&#123;uri&#125;;</span><br><span class="line">                uploadMessageAboveL.onReceiveValue(uris);</span><br><span class="line">                uploadMessageAboveL = null;</span><br><span class="line">            &#125; else if (uploadMessage != null) &#123;</span><br><span class="line">                uploadMessage.onReceiveValue(uri);</span><br><span class="line">                uploadMessage = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (uploadMessageAboveL != null) &#123;</span><br><span class="line">                uploadMessageAboveL.onReceiveValue(null);</span><br><span class="line">                uploadMessageAboveL = null;</span><br><span class="line">            &#125; else if (uploadMessage != null) &#123;</span><br><span class="line">                uploadMessage.onReceiveValue(null);</span><br><span class="line">                uploadMessage = null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//选择图片</span><br><span class="line">    @TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    private void onActivityResultAboveL(int requestCode, int resultCode, Intent intent) &#123;</span><br><span class="line">        if (uploadMessageAboveL == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Uri[] results = null;</span><br><span class="line">        if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">            if (intent != null) &#123;</span><br><span class="line">                String dataString = intent.getDataString();</span><br><span class="line">                LogUtils.e(&quot;web&quot;, dataString);</span><br><span class="line">                ClipData clipData = intent.getClipData();</span><br><span class="line">                if (clipData != null) &#123;</span><br><span class="line">                    results = new Uri[clipData.getItemCount()];</span><br><span class="line">                    for (int i = 0; i &lt; clipData.getItemCount(); i++) &#123;</span><br><span class="line">                        ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">                        results[i] = item.getUri();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (dataString != null) &#123;</span><br><span class="line">                    results = new Uri[]&#123;Uri.parse(dataString)&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        uploadMessageAboveL.onReceiveValue(results);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        uploadMessage = null;</span><br><span class="line">        uploadMessageAboveL = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//将文件File转成Uri</span><br><span class="line">    public Uri getImageContentUri(Context context, File imageFile) &#123;</span><br><span class="line">        String filePath = imageFile.getAbsolutePath();</span><br><span class="line">        Cursor cursor = context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">                new String[]&#123;MediaStore.Images.Media._ID&#125;, MediaStore.Images.Media.DATA + &quot;=? &quot;,</span><br><span class="line">                new String[]&#123;filePath&#125;, null);</span><br><span class="line">        if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">            int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));</span><br><span class="line">            Uri baseUri = Uri.parse(&quot;content://media/external/images/media&quot;);</span><br><span class="line">            return Uri.withAppendedPath(baseUri, &quot;&quot; + id);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (imageFile.exists()) &#123;</span><br><span class="line">                ContentValues values = new ContentValues();</span><br><span class="line">                values.put(MediaStore.Images.Media.DATA, filePath);</span><br><span class="line">                return context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;webview-图片选择&quot;&gt; WebView 图片选择&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;最近需要做webview选择图片，就找了一些资料，记录一下。&lt;br&gt;
本文参考:&lt;a href=&quot;https://blog.csdn.net/djcken/artic
      
    
    </summary>
    
      <category term="android" scheme="http://xue12311.github.io/categories/android/"/>
    
    
      <category term="webview" scheme="http://xue12311.github.io/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>flutter练习 - Container控件</title>
    <link href="http://xue12311.github.io/2018/12/29/flutter/flutter%E7%BB%83%E4%B9%A0%20-Container%E5%B8%83%E5%B1%80/"/>
    <id>http://xue12311.github.io/2018/12/29/flutter/flutter练习 -Container布局/</id>
    <published>2018-12-29T05:11:23.000Z</published>
    <updated>2019-06-01T14:41:16.246Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="flutter练习-container控件"> flutter练习 - Container控件</span></h1><h2><span id="属性"> 属性</span></h2><p><strong>key：</strong> Container唯一标识符，用于查找更新。</p><p><strong>alignment：</strong> 控制child的对齐方式，如果container或者container父节点尺寸大于child的尺寸，这个属性设置会起作用，有很多种对齐方式。</p><p><strong>padding：</strong> decoration内部的空白区域，如果有child的话，child位于padding内部。padding与margin的不同之处在于，padding是包含在content内，而margin则是外部边界，设置点击事件的话，padding区域会响应，而margin区域不会响应。</p><p><strong>color：</strong> 用来设置container背景色，如果foregroundDecoration设置的话，可能会遮盖color效果。</p><p><strong>decoration：</strong> 绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。</p><p><strong>foregroundDecoration：</strong> 绘制在child前面的装饰。</p><p><strong>width：</strong> container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据<br>child和父节点两者一起布局。</p><p><strong>height：</strong> container的高度，设置为double.infinity可以强制在高度上撑满。</p><p><strong>constraints：</strong> 添加到child上额外的约束条件。</p><p><strong>margin：</strong> 围绕在decoration和child之外的空白区域，不属于内容区域。</p><p><strong>transform：</strong> 设置container的变换矩阵，类型为Matrix4。</p><p><strong>child：</strong> container中的内容widget。</p><h2><span id="实例代码"> 实例代码</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import &apos;package:flutter/material.dart&apos;;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">  runApp(new myApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class myApp extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: &quot;text&quot;,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(&quot;Container练习&quot;),</span><br><span class="line">        ),</span><br><span class="line">        body: Container(</span><br><span class="line">          constraints: new BoxConstraints.expand(</span><br><span class="line">            height: Theme.of(context).textTheme.display1.fontSize * 1.1 + 200.0,</span><br><span class="line">          ),</span><br><span class="line">          decoration: new BoxDecoration(</span><br><span class="line">            //边框</span><br><span class="line">            border: new Border.all(width: 2.0, color: Colors.red),</span><br><span class="line">            //背景色</span><br><span class="line">            color: Colors.grey,</span><br><span class="line">            //边框圆角</span><br><span class="line">            borderRadius: new BorderRadius.all(new Radius.circular(20.0)),</span><br><span class="line">            image: new DecorationImage(</span><br><span class="line">              image: new NetworkImage(</span><br><span class="line">              &quot;http://www.zhangjiaxue.cn/images/avatar.jpg&quot;),</span><br><span class="line">              centerSlice: new Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          padding: const EdgeInsets.all(8.0),</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: new Text(</span><br><span class="line">            &apos;Hello World&apos;,</span><br><span class="line">              style: Theme.of(context)</span><br><span class="line">                  .textTheme</span><br><span class="line">                  .display1</span><br><span class="line">                  .copyWith(color: Colors.blue),</span><br><span class="line">          ),</span><br><span class="line">          //变换矩阵</span><br><span class="line">          transform: new Matrix4.rotationZ(0.3),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;flutter练习-container控件&quot;&gt; flutter练习 - Container控件&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;属性&quot;&gt; 属性&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;key：&lt;/strong&gt; Contain
      
    
    </summary>
    
      <category term="flutter" scheme="http://xue12311.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://xue12311.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>flutter练习 - flutter基本控件</title>
    <link href="http://xue12311.github.io/2018/12/26/flutter/flutter%E7%BB%83%E4%B9%A0%20-%20flutter%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6/"/>
    <id>http://xue12311.github.io/2018/12/26/flutter/flutter练习 - flutter基本控件/</id>
    <published>2018-12-26T07:18:23.000Z</published>
    <updated>2019-06-01T14:40:59.338Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="flutter-基本控件"> Flutter 基本控件</span></h1><h2><span id="widget"> Widget</span></h2><ol><li>StatelessWidget — 只能用来展示信息，不能有用户交互</li><li>StatefulWidget —   可以通过改变状态使得 UI 发生变化</li></ol><h2><span id="文本-text"> 文本 Text</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Text(&quot;text&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="图片-image"> 图片 Image</span></h2><ol><li>资源：Image.asset(name);</li><li>文件：Image.file(file);</li><li>内存：Image.memory(bytes);</li><li>网络：Image.network(src);</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Image.network(</span><br><span class="line">      &quot;http://www.zhangjiaxue.cn/images/avatar.jpg&quot;,</span><br><span class="line">      width: 150.0,</span><br><span class="line">      height: 150.0,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="按钮-flatbutton-raisedbutton"> 按钮（ FlatButton ，RaisedButton ）</span></h2><ol><li>FlatButton</li><li>RaisedButton</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    var flatBtn = FlatButton(</span><br><span class="line">      //按钮被点击的时候得到回调</span><br><span class="line">      onPressed: () =&gt; print(&apos;FlatButton pressed&apos;),</span><br><span class="line">      //设置按钮的内容</span><br><span class="line">      child: Text(&apos;FlatButton BUTTON&apos;),</span><br><span class="line">    );</span><br><span class="line">    var raisedButton = RaisedButton(</span><br><span class="line">      onPressed: () =&gt; print(&apos;RaisedButton pressed&apos;),</span><br><span class="line">      child: Text(&apos;RaisedButton BUTTON&apos;),</span><br><span class="line">    );</span><br><span class="line">    return raisedButton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="文本输入框-textfield"> 文本输入框 TextField</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">   return Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text(&quot;输入&quot;)),</span><br><span class="line">      body: TextField(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="显示弹框-dialog"> 显示弹框 dialog</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">   return RaisedButton(</span><br><span class="line">        child: Text(&quot;点击按钮弹出Dialog&quot;),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          showDialog(</span><br><span class="line">              // 第一个 context 是参数名，第二个 context 是 State 的成员变量</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (_) &#123;</span><br><span class="line">                return AlertDialog(</span><br><span class="line">                  // dialog 的内容</span><br><span class="line">                  content: Text(&quot;提示框&quot;),</span><br><span class="line">                  // actions 设置 dialog 的按钮</span><br><span class="line">                  actions: &lt;Widget&gt;[</span><br><span class="line">                    FlatButton(</span><br><span class="line">                      child: Text(&apos;OK&apos;),</span><br><span class="line">                      // 用户点击按钮后，关闭弹框</span><br><span class="line">                      onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                    )</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="布局"> 布局</span></h2><ol><li>Container（容器）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Container(</span><br><span class="line">      padding: EdgeInsets.all(8.0),</span><br><span class="line">      margin: EdgeInsets.all(4.0),</span><br><span class="line">      width: 200.0,</span><br><span class="line">      height: 200.0,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        // 背景色</span><br><span class="line">        color: Colors.grey,</span><br><span class="line">        // 圆角</span><br><span class="line">        borderRadius: BorderRadius.circular(5.0),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      // 把文本放在 Container 的中间</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text(&apos;text&apos;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Row(水平布局)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    //水平布局</span><br><span class="line">    return Row(</span><br><span class="line">      // 只有一个子元素的 widget，一般使用 child 参数来设置；Row 可以包含多个子控件，</span><br><span class="line">      // 对应的则是 children。</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(&apos;text1&apos;),</span><br><span class="line">        Text(&apos;text2&apos;),</span><br><span class="line">        Text(&apos;text3&apos;),</span><br><span class="line">        Text(&apos;text4&apos;),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Column(竖直布局)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    //垂直布局</span><br><span class="line">    return Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text(&apos;text1&apos;),</span><br><span class="line">        Text(&apos;text2&apos;),</span><br><span class="line">        Text(&apos;text3&apos;),</span><br><span class="line">        Text(&apos;text4&apos;),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Stack(层叠布局)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    return Stack(</span><br><span class="line">      // Aligment 的取值范围为 [-1, 1]，Stack 中心为 (0, 0)，</span><br><span class="line">      // 这里设置为 (-0.5, -0.5) 后，可以让文本对齐到 Container 的 1/4 处</span><br><span class="line">      alignment: const Alignment(-0.5, -0.5),</span><br><span class="line">      children: &lt;Widget&gt;[   </span><br><span class="line">      Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        Text(&quot;text2&quot;),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="布局控件"> 布局控件</span></h2><ol><li>Flexible</li></ol><p>Flexible组件可以使Row、Column、Flex等子组件在主轴方向有填充可用空间的能力(例如，Row在水平方向，Column在垂直方向)，但是它与Expanded组件不同，它不强制子组件填充可用空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">  return new Scaffold(</span><br><span class="line">      appBar: new AppBar(</span><br><span class="line">        title: new Text(&apos;水平方向布局&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: new Row(children: &lt;Widget&gt;[</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;点击红色按钮事件&apos;);</span><br><span class="line">          &#125;,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: new Text(&apos;红色按钮&apos;),</span><br><span class="line">        ),</span><br><span class="line">        new Flexible(</span><br><span class="line">          flex: 1,</span><br><span class="line">          child: new RaisedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;点击黄色按钮事件&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            color: Colors.yellow,</span><br><span class="line">            child: new Text(&apos;黄色按钮&apos;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;点击蓝色按钮事件&apos;);</span><br><span class="line">          &#125;,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: new Text(&apos;蓝色按钮&apos;),</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Expanded</li></ol><p>Expanded组件可以使Row、Column、Flex等子组件在其主轴方向上展开并填充可用空间(例如，Row在水平方向，Column在垂直方向)。如果多个子组件展开，可用空间会被其flex factor(表示扩展的速度、比例)分割。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget &#123;</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">  return new Scaffold(</span><br><span class="line">      appBar: new AppBar(</span><br><span class="line">        title: new Text(&apos;水平方向布局&apos;),</span><br><span class="line">      ),</span><br><span class="line">      body: new Row(children: &lt;Widget&gt;[</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;点击红色按钮事件&apos;);</span><br><span class="line">          &#125;,</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: new Text(&apos;红色按钮&apos;),</span><br><span class="line">        ),</span><br><span class="line">        new Expanded(</span><br><span class="line">          flex: 1,</span><br><span class="line">          child: new RaisedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              print(&apos;点击黄色按钮事件&apos;);</span><br><span class="line">            &#125;,</span><br><span class="line">            color: Colors.yellow,</span><br><span class="line">            child: new Text(&apos;黄色按钮&apos;),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            print(&apos;点击蓝色按钮事件&apos;);</span><br><span class="line">          &#125;,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: new Text(&apos;蓝色按钮&apos;),</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="非常感谢"> 非常感谢</span></h2><p><a href="https://mp.weixin.qq.com/s/V0cL9bSTM65HTIJ4CU4Cow" target="_blank" rel="noopener">Flutter学习指南：UI布局和控件</a>（微信号：玉刚说 YugangTalk），作者：水晶虾饺</p><p><a href="https://blog.csdn.net/chunchun1230/article/details/82460257" target="_blank" rel="noopener">flutter控件Flexible和 Expanded的区别</a>  ，作者：chunchun1230</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;flutter-基本控件&quot;&gt; Flutter 基本控件&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;widget&quot;&gt; Widget&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;StatelessWidget — 只能用来展示信息，不能有用户交互&lt;
      
    
    </summary>
    
      <category term="flutter" scheme="http://xue12311.github.io/categories/flutter/"/>
    
    
      <category term="flutter" scheme="http://xue12311.github.io/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - 数组练习</title>
    <link href="http://xue12311.github.io/2018/12/17/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E6%95%B0%E7%BB%84%E7%BB%83%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2018/12/17/kotlin/kotlin练习-数组练习/</id>
    <published>2018-12-17T13:34:57.000Z</published>
    <updated>2019-06-01T14:42:56.976Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-数组练习"> kotlin练习 - 数组练习</span></h1><h2><span id="数组创建"> 数组创建</span></h2><ol><li>使用arrayOf()函数：这种方式无需显示指定数组的长度，但需要依次列出每个数组元素。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //创建包含指定元素的数组</span><br><span class="line">    var arg1 = arrayOf(&quot;Java&quot;,&quot;Kotlin&quot;,&quot;PHP&quot;,&quot;Swift&quot;)</span><br><span class="line">    var arg2 = arrayOf(0,1,2,3,4,5)</span><br><span class="line">    println(&quot;arg1 = $&#123;Arrays.toString(arg1)&#125;&quot;)</span><br><span class="line">    println(&quot;arg2 = $&#123;Arrays.toString(arg2)&#125;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用arrayOfNulls()函数：这种方法需要显示指定数组的长度，数组元素全部被初始化为null。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //创建指定长度，元素为null的数组</span><br><span class="line">    var arg3 = arrayOfNulls&lt;Int&gt;(5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用emptyArray()函数：这种方法会创建一个长度为0的空数组。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //创建长度为0的空数组</span><br><span class="line">    var arg4 = emptyArray&lt;String&gt;()</span><br><span class="line">    var arg5 = emptyArray&lt;Int&gt;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>使用Array(size : Int,init ：(Int) -&gt; T )构造器：这种方法需要显示指定数组的长度，并可通过Lambda表达式来动态计算各数组元素的值，</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //创建指定长度，使用Lambda表达式初始化数组元素的数组</span><br><span class="line">    var arg6 = Array(5,&#123;(it * 2+97).toChar()&#125;)</span><br><span class="line">    var arg7 = Array(6,&#123;&quot;fkit&quot;&#125;)</span><br><span class="line">    println(&quot;arg6 = $&#123;Arrays.toString(arg6)&#125;&quot;)</span><br><span class="line">    println(&quot;arg7 = $&#123;Arrays.toString(arg7)&#125;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>其他 Array<t>：Kotlin专门提供了 ByteArray、ShortArray、IntArra、LongArray、CharArray、FloatArray、DoubleArray、BooleanArray 分别对应java中的 byte[]、short[]、int[]、long[]、char[]、floar[]、double[]、boolean[] 这8种基本数据类型的数组。</t></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var intArr = intArrayOf(2,3,4,5,6)</span><br><span class="line">    var doubleArr = doubleArrayOf(2.1,2.2,2.3,2.4)</span><br><span class="line">    var intArr2 = IntArray(5,&#123;it*it&#125;)</span><br><span class="line">    var charArr = CharArray(5,&#123;(it*2+97).toChar()&#125;)</span><br><span class="line"></span><br><span class="line">    println(&quot;intArr = $&#123;Arrays.toString(intArr)&#125;&quot;)</span><br><span class="line">    println(&quot;doubleArr = $&#123;Arrays.toString(doubleArr)&#125;&quot;)</span><br><span class="line">    println(&quot;intArr2 = $&#123;Arrays.toString(intArr2)&#125;&quot;)</span><br><span class="line">    println(&quot;charArr = $&#123;Arrays.toString(charArr)&#125;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="数组使用"> 数组使用</span></h2><ul><li>get(index) 方法 ，set(index，value)方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var strArray = arrayListOf&lt;String&gt;(&quot;Java&quot;,&quot;Kotlin&quot;,&quot;Go&quot;,&quot;Swift&quot;)</span><br><span class="line">    println(strArray[1])//Kotlin</span><br><span class="line">    println(strArray.get(1))//Kotlin</span><br><span class="line">    strArray.set(0,&quot;Python&quot;)</span><br><span class="line">    strArray[2] = &quot;Groovy&quot;</span><br><span class="line">    println(strArray.toString())//[Python, Kotlin, Groovy, Swift]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组遍历</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var books = arrayListOf&lt;String&gt;(&quot;疯狂java讲义&quot;, &quot;疯狂android讲义&quot;, &quot;疯狂kotlin讲义&quot;)</span><br><span class="line">    for (book in books) &#123;</span><br><span class="line">        println(book)</span><br><span class="line">    &#125;</span><br><span class="line">    for (i in 0 until books.size) &#123;</span><br><span class="line">        println(books[i])</span><br><span class="line">    &#125;</span><br><span class="line">    //根据数组的索引来遍历数组</span><br><span class="line">    for (i in books.indices)&#123;//索引 = size -1</span><br><span class="line">        println(books[i])</span><br><span class="line">    &#125;</span><br><span class="line">    for ((index,value) in books.withIndex())&#123;//索引 = size -1</span><br><span class="line">        println(&quot;索引为$&#123;index&#125;的元素为：$&#123;value&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数组常用方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">var indexs = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> //所有元素都要满足条件则返回 true</span><br><span class="line"> var isAll = indexs.all &#123; x -&gt; x &gt; 0 &amp;&amp; x &lt; 10 &#125;</span><br><span class="line"> print(isAll)//true</span><br><span class="line"> //任一数组元素满足条件则返回 true</span><br><span class="line"> var isAny = indexs.any &#123; x -&gt; x == 9 &#125;</span><br><span class="line"> println(isAny)//true</span><br><span class="line"> //将数组转为List集合</span><br><span class="line"> var indexList = indexs.asList()</span><br><span class="line"> println(indexList.toString())</span><br><span class="line"> //返回Map集合</span><br><span class="line"> var indexMap1 = indexs.associate &#123; x -&gt; x to x * x &#125;</span><br><span class="line"> println(indexMap1.toString())//&#123;1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81&#125;</span><br><span class="line"> var indexMap2 = indexs.associate &#123; it to it * it &#125;</span><br><span class="line"> println(indexMap2.toString())//&#123;1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81&#125;</span><br><span class="line"> //返回Map集合</span><br><span class="line"> var indexMap3 = indexs.associateBy &#123; it * it &#125;//Map&lt;K,T&gt;中的K</span><br><span class="line"> println(indexMap3.toString())//&#123;1=1, 4=2, 9=3, 16=4, 25=5, 36=6, 49=7, 64=8, 81=9&#125;</span><br><span class="line"> var indexMap4 = indexs.associateBy(&#123; it &#125;, &#123; it * it &#125;)</span><br><span class="line"> println(indexMap4.toString())//&#123;1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81&#125;</span><br><span class="line"> var indexMap5 = indexs.associateBy(&#123; it * it &#125;)//Map&lt;K,T&gt;中的K</span><br><span class="line"> println(indexMap5.toString())//&#123;1=1, 4=2, 9=3, 16=4, 25=5, 36=6, 49=7, 64=8, 81=9&#125;</span><br><span class="line"> //在将数组转成的Map集合插入map，最后返回修改后的map</span><br><span class="line"> var map6 = mutableMapOf(10 to 100, 11 to 121, 12 to 144)</span><br><span class="line"> var indexMap6 = indexs.associateByTo(map6, &#123; it &#125;, &#123; it * it &#125;)</span><br><span class="line"> println(map6.toString())//&#123;10=100, 11=121, 12=144, 1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81&#125;</span><br><span class="line"> //在将数组转成的Map集合插入map，最后返回修改后的map</span><br><span class="line"> var map7 = mutableMapOf(10 to 100, 11 to 121, 12 to 144)</span><br><span class="line"> var indexMap7 = indexs.associateTo(map7, &#123; it to it * it &#125;)</span><br><span class="line"> println(map7.toString())//&#123;10=100, 11=121, 12=144, 1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81&#125;</span><br><span class="line"> //数组平均值</span><br><span class="line"> var average = indexs.average();</span><br><span class="line"> println(&quot;平均值为$average&quot;)//5.0</span><br><span class="line"> //通过二分法查询element出现的索引，如果找不到则返回负数-------要求数组中的元素已经按升序排序</span><br><span class="line"> var binarySearch1 = indexs.binarySearch(4, 0, 3)</span><br><span class="line"> println(&quot;4在数组(数组从第一个元素,到第三个元素)中的位置：$binarySearch1&quot;)//-4</span><br><span class="line"> var binarySearch2 = indexs.binarySearch(4)</span><br><span class="line"> println(&quot;4在数组中的位置：$binarySearch2&quot;)//3</span><br><span class="line"> //判断数组中是否包含元素</span><br><span class="line"> var contains = indexs.contains(10);</span><br><span class="line"> println(&quot;数组中是否有元素10：$&#123;contains&#125;&quot;)//false</span><br><span class="line"></span><br><span class="line"> var indexs1 = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> //判断两个数组是否相等</span><br><span class="line"> var contentDeepEquals = indexs.contentDeepEquals(indexs1)</span><br><span class="line"> println(&quot;两个数组是否相等：$&#123;contentDeepEquals&#125;&quot;)//true</span><br><span class="line"> //将数组转成String</span><br><span class="line"> var str_index = indexs.contentToString();</span><br><span class="line"> println(str_index)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> //复制数组成为一个新数组</span><br><span class="line"> var copyof1 = indexs.copyOf()</span><br><span class="line"> println(&quot;copyof1 = $&#123;copyof1.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> indexs[0] = 0;</span><br><span class="line"> println(&quot;copyof1 = $&#123;copyof1.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> indexs[0] = 1;</span><br><span class="line"> var copyof2 = indexs.copyOf(5)</span><br><span class="line"> println(&quot;copyof2 = $&#123;copyof2.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5]</span><br><span class="line"> var copyof3 = indexs.copyOf(10)</span><br><span class="line"> println(&quot;copyof3 = $&#123;copyof3.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> //复制数组（通过索引指定）</span><br><span class="line"> var copyOfRange1 = indexs.copyOfRange(0, 10)</span><br><span class="line"> println(&quot;copyOfRange1 = $&#123;copyOfRange1.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> indexs[0] = 10</span><br><span class="line"> println(&quot;copyOfRange1 = $&#123;copyOfRange1.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> indexs[0] = 1</span><br><span class="line"> var copyOfRange2 = indexs.copyOfRange(0, 5)</span><br><span class="line"> println(&quot;copyOfRange2 = $&#123;copyOfRange2.contentToString()&#125;&quot;)//[1, 2, 3, 4, 5]</span><br><span class="line"> //数组满足条件的数量</span><br><span class="line"> var count1 = indexs.count(&#123; it &gt; 5 &#125;)</span><br><span class="line"> println(&quot;数组中大于5的元素有：$&#123;count1&#125;个&quot;)//4</span><br><span class="line"></span><br><span class="line"> var indexs2 = arrayOf(1, 2, 3, 1, 4, 2, 3, 4, 1)</span><br><span class="line"> //去掉数组中重复的元素</span><br><span class="line"> var indexs2_distinct1 = indexs2.distinct()</span><br><span class="line"> println(indexs2_distinct1.toString())//[1, 2, 3, 4]</span><br><span class="line"> var indexs2_distinct2 = indexs2.distinctBy &#123; it % 2 == 0 &#125;</span><br><span class="line"> println(indexs2_distinct2.toString())//[1, 2]</span><br><span class="line"></span><br><span class="line"> //去掉数组中前3个元素</span><br><span class="line"> var drop = indexs.drop(3);</span><br><span class="line"> println(drop.toString())</span><br><span class="line"></span><br><span class="line"> //去掉前面满足条件的元素，当出现第一个条件不满足时，返回后面的所有元素</span><br><span class="line"> var dropWhile = indexs.dropWhile &#123; it &lt;= 3 &#125;</span><br><span class="line"> println(dropWhile.toString())//[4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line"> //去掉数组中后3个元素</span><br><span class="line"> var dropLast = indexs.dropLast(3);</span><br><span class="line"> println(dropLast.toString())//[1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line"> //去掉前面满足条件的元素，当出现第一个条件不满足时，返回前面的所有元素</span><br><span class="line"> var dropLastWhile = indexs.dropLastWhile &#123; it &gt; 6 &#125;</span><br><span class="line"> println(dropLastWhile.toString())//[1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line"> //将数组中的元素赋值为element</span><br><span class="line"> var indexs4 = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> indexs4.fill(3)</span><br><span class="line"> println(indexs4.contentToString())//[3, 3, 3, 3, 3, 3, 3, 3, 3]</span><br><span class="line"></span><br><span class="line"> var indexs5 = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> indexs5.fill(3, 0, 5);</span><br><span class="line"> println(indexs5.contentToString())//[3, 3, 3, 3, 3, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line"> var first1 = indexs.first()</span><br><span class="line"> println(&quot;数组的第一个元素：$&#123;first1&#125;&quot;)//1</span><br><span class="line"> var first2 = indexs.first &#123; it &gt; 5 &#125;</span><br><span class="line"> println(&quot;数组的第一个满足条件的元素：$&#123;first2&#125;&quot;)//6</span><br><span class="line"></span><br><span class="line"> var last1 = indexs.last()</span><br><span class="line"> println(&quot;数组的最后一个元素：$&#123;last1&#125;&quot;)//9</span><br><span class="line"> var last2 = indexs.last &#123; it &gt; 5 &#125;</span><br><span class="line"> println(&quot;数组的最后一个满足条件的元素：$&#123;last2&#125;&quot;)//9</span><br><span class="line"></span><br><span class="line"> //求和</span><br><span class="line"> var fold = indexs.fold(0, &#123; acc, i -&gt; acc + i &#125;)</span><br><span class="line"> println(&quot;数组元素和为：$&#123;fold&#125;&quot;)</span><br><span class="line"> //搜索元素查询的位置</span><br><span class="line"> var index1 = indexs.indexOf(5)//从前往后</span><br><span class="line"> var index2 = indexs.lastIndexOf(5)//从后往前</span><br><span class="line"> println(&quot;元素5在数组中的位置是：$&#123;index1&#125;和$&#123;index2&#125;&quot;)</span><br><span class="line"></span><br><span class="line"> var indexs6 = arrayOf(1, 2, 3, 1, 4, 2, 3, 4, 1)</span><br><span class="line"> var index3 = indexs6.indexOfFirst &#123; it == 3 &#125;//第一次出现的位置</span><br><span class="line"> var index4 = indexs6.indexOfLast &#123; it == 3 &#125;//最后一次查询的位置</span><br><span class="line"> println(&quot;元素3在数组中第一次出现在$&#123;index3&#125;,最后一次出现在$&#123;index4&#125;&quot;)//2,6</span><br><span class="line"></span><br><span class="line"> var indexs7 = arrayListOf&lt;Int&gt;(3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> var indexs8 = arrayListOf&lt;Int&gt;(1, 2, 5, 6)</span><br><span class="line"> //intersect(交集)，subtract(差集)，union(并集)，minus(补集)</span><br><span class="line"> var intersect = indexs7.intersect(indexs8)</span><br><span class="line"> var subtract = indexs7.subtract(indexs8)</span><br><span class="line"> var union = indexs7.union(indexs8)</span><br><span class="line"> var minus = indexs7.minus(indexs8)</span><br><span class="line"> println(&quot;交集：$&#123;intersect&#125;&quot;)//[5, 6]</span><br><span class="line"> println(&quot;差集：$&#123;subtract&#125;&quot;)//[3, 4, 7, 8, 9]</span><br><span class="line"> println(&quot;并集：$&#123;union&#125;&quot;)//[3, 4, 5, 6, 7, 8, 9, 1, 2]</span><br><span class="line"> println(&quot;补集：$&#123;minus&#125;&quot;)//[3, 4, 7, 8, 9]</span><br><span class="line"> //数组最大值</span><br><span class="line"> var max = indexs.max();//9</span><br><span class="line"> //数组最小值</span><br><span class="line"> var min = indexs.min();//1</span><br><span class="line"> println(&quot;数组中的最大值：$&#123;max&#125; 最小值：$&#123;min&#125;&quot;)</span><br><span class="line"></span><br><span class="line"> var indexs9 = arrayListOf&lt;Int&gt;(1, 9, 3, 7, 2, 5, 4, 6, 8)</span><br><span class="line"> //排序</span><br><span class="line"> indexs9.sort();</span><br><span class="line"> println(indexs9)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> //排序</span><br><span class="line"> val mapList = mutableListOf(1 to &quot;A&quot; , 2 to &quot;B&quot;, 5 to &quot;C&quot;, 3 to &quot;D&quot;)</span><br><span class="line"> mapList.sortBy &#123; it.first &#125;</span><br><span class="line"> println(mapList) // [(1, A), (2, B), (3, D), (5, C)]</span><br><span class="line"> mapList.sortBy &#123; it.second &#125;</span><br><span class="line"> println(mapList) // [(1, A), (2, B), (5, C), (3, D)]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-数组练习&quot;&gt; kotlin练习 - 数组练习&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;数组创建&quot;&gt; 数组创建&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用arrayOf()函数：这种方式无需显示指定数组的长度，但需要依次
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - 循环练习</title>
    <link href="http://xue12311.github.io/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E5%BE%AA%E7%8E%AF%E7%BB%83%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2018/12/16/kotlin/kotlin练习-循环练习/</id>
    <published>2018-12-16T10:54:24.000Z</published>
    <updated>2019-06-01T14:43:39.359Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-循环练习"> kotlin练习 - 循环练习</span></h1><h2><span id="for-in-循环"> for-in 循环</span></h2><ul><li>for-in 循环语法格式<br>for（常量名 in 字符串|范围|集合）{}</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//循环打印1-10</span><br><span class="line">fun main (args : Array&lt;String&gt;)&#123;</span><br><span class="line">for(num in 1..10)&#123;</span><br><span class="line">    println(&quot;num = $num&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="while-循环"> while 循环</span></h2><ul><li>while循环语法格式<br>[init_statements]<br>while (test_expression){<br>body_statements<br>[iteration_statements]<br>}<br>while每次在执行循环体之前，都要先对test_expression 循环条件求值，如果循环条件为真，则运行循环体。从上面的语法格式来看，迭代语句 iteration_statements 总是位于循环体的最后，因此只有当循环体能成功执行完成时，while循环才会执行迭代语句iteration_statements；如果test_expression 循环条件为假，则循环体部分将不会执行。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//循环 0-10</span><br><span class="line">fun main (args : Array&lt;String&gt;)&#123;</span><br><span class="line">    var num =0</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    while (num&lt;10)&#123;</span><br><span class="line">        println(&quot;num = $num&quot;)</span><br><span class="line">        //迭代语句</span><br><span class="line">        num++</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="do-while-循环"> do while 循环</span></h2><ul><li>do while循环语法格式<br>[init_statements]<br>do{<br>body_statements<br>[iteration_statements]<br>} while (test_expression){<br>}<br>do while 循环 先执行循环体，再判断循环条件，如果条件为真，则执行下一次循环，否则中止循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun main (args : Array&lt;String&gt;)&#123;</span><br><span class="line">    var num =0</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    do&#123;</span><br><span class="line">        println(&quot;num = $num&quot;)</span><br><span class="line">        num++</span><br><span class="line">    &#125;while (num&lt;10)</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="嵌套循环"> 嵌套循环</span></h2><ul><li>使用 for-in 和 while 嵌套循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main (args : Array&lt;String&gt;)&#123;</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    for(i in 0 until 10)&#123;//0-9</span><br><span class="line">        var j = 0</span><br><span class="line">        while (j&lt;3)&#123;</span><br><span class="line">            println(&quot;i = $i +，j = $&#123;j++&#125;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="控制循环"> 控制循环</span></h2><ul><li>使用break结束循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    for (i in 0..10) &#123;//0-10</span><br><span class="line">        println(&quot;i = $i&quot;)</span><br><span class="line">        if (i==3)&#123;</span><br><span class="line">            break//结束循环</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用标识符@</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    outer@ for (i in 0..10) &#123;//0-10</span><br><span class="line">        for (j in 0 until 3)&#123;//0-2</span><br><span class="line">            println(&quot;i = $i ,j = $j&quot;)</span><br><span class="line">            if(j==1)&#123;</span><br><span class="line">                //跳出outer标签所标识的循环</span><br><span class="line">                break@outer</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    循环开始</span><br><span class="line">    i = 0 ,j = 0</span><br><span class="line">    i = 0 ,j = 1</span><br><span class="line">    循环结束</span><br></pre></td></tr></table></figure><p>** 代码解释：<br>​    程序从外层循环进入内层循环后，当j等于1时，程序执行break@outer语句，这条语句将会结束outer@标签指定的循环。（并不是结束break所在的内层循环，而是结束 outer@标签所标识的外层循环）<br>** 注意：<br>​通常警跟break之后的标签，必须在break所在的循环的外层循环之前定义才有意义</p><h2><span id="使用continue忽略本次循环剩下的语句"> 使用continue忽略本次循环剩下的语句</span></h2><ul><li>使用continue结束本次循环</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    for (i in 0..10) &#123;//0-10</span><br><span class="line">        if (i == 2) &#123;</span><br><span class="line">            continue//结束本次循环</span><br><span class="line">        &#125;</span><br><span class="line">        println(&quot;i = $i&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用标识符@</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    //外层循环</span><br><span class="line">    outer@ for (i in 0..3) &#123;//0-3</span><br><span class="line">        // 内层循环</span><br><span class="line">        for (j in 0 until 3)&#123;//0-2</span><br><span class="line">            println(&quot;i = $i ,j = $j&quot;)</span><br><span class="line">            if(j==1)&#123;</span><br><span class="line">                //忽略outer标签所标识的循环中当次循环剩下的语句</span><br><span class="line">               continue@outer</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">循环结果：</span><br><span class="line">    i = 0 ,j = 0</span><br><span class="line">    i = 0 ,j = 1</span><br><span class="line">    i = 1 ,j = 0</span><br><span class="line">    i = 1 ,j = 1</span><br><span class="line">    i = 2 ,j = 0</span><br><span class="line">    i = 2 ,j = 1</span><br><span class="line">    i = 3 ,j = 0</span><br><span class="line">    i = 3 ,j = 1</span><br></pre></td></tr></table></figure><ul><li>代码解释<br>程序从外层循环进入内层循环后，当j等于1时，程序执行continue@outer语句，这条语句将会结束outer@标签指定的循环的当次循环，直接开始下一次循环，内层循环没有机会执行完成。</li></ul><h2><span id="使用return结束方法"> 使用return结束方法</span></h2><ul><li>使用return语句结束函数或方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    println(&quot;循环开始&quot;)</span><br><span class="line">    text()</span><br><span class="line">    println(&quot;循环结束&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fun text()&#123;//循环到3后，结束循环</span><br><span class="line">for(i in 0 until 10)&#123;//0-9</span><br><span class="line">println(&quot;i = $i&quot;)</span><br><span class="line">    if(i==3)&#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    //当i等于3时，无法执行</span><br><span class="line">    println(&quot;循环中...&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-循环练习&quot;&gt; kotlin练习 - 循环练习&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;for-in-循环&quot;&gt; for-in 循环&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for-in 循环语法格式&lt;br&gt;
for（常量名
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - when分支结构练习</title>
    <link href="http://xue12311.github.io/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-when%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2018/12/16/kotlin/kotlin练习-when分支结构练习/</id>
    <published>2018-12-16T10:54:14.000Z</published>
    <updated>2019-06-01T14:41:49.442Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-when分支练习"> kotlin练习 - when分支练习</span></h1><h2><span id="when表达式"> when表达式</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when(expression)&#123;</span><br><span class="line">expression1 -&gt;statements...</span><br><span class="line">expression2 -&gt; statements...</span><br><span class="line">else -&gt; statements...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var score = &apos;B&apos;</span><br><span class="line">    when (score) &#123;</span><br><span class="line">        &apos;A&apos; -&gt; println(&quot;优秀&quot;)</span><br><span class="line">        &apos;B&apos; -&gt; println(&quot;良好&quot;)</span><br><span class="line">        &apos;C&apos; -&gt; println(&quot;中&quot;)</span><br><span class="line">        &apos;D&apos; -&gt; println(&quot;及格&quot;)</span><br><span class="line">        else -&gt; println(&quot;不及格&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var score = &apos;c&apos;</span><br><span class="line">    when (score) &#123;</span><br><span class="line">        &apos;A&apos;, &apos;a&apos; -&gt; println(&quot;优秀&quot;)</span><br><span class="line">        &apos;B&apos;, &apos;b&apos; -&gt; println(&quot;良好&quot;)</span><br><span class="line">        &apos;C&apos;, &apos;c&apos; -&gt; println(&quot;中&quot;)</span><br><span class="line">        &apos;D&apos;, &apos;d&apos; -&gt; println(&quot;及格&quot;)</span><br><span class="line">        else -&gt; &#123;</span><br><span class="line">            println(&quot;不及格&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子3</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var score = &apos;A&apos;</span><br><span class="line">    var str = &quot;EFGH&quot;</span><br><span class="line">    when (score) &#123;</span><br><span class="line">        str[0]-4,str[1]-4 -&gt; println(&quot;优秀&quot;)</span><br><span class="line">        str[2]-4,str[3]-4  -&gt; println(&quot;中&quot;)</span><br><span class="line">        else -&gt; &#123;</span><br><span class="line">            println(&quot;不及格&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子4</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var date = Date()</span><br><span class="line">    when (date) &#123;</span><br><span class="line">        Date() -&gt; println(&quot;优秀&quot;) </span><br><span class="line">        else -&gt; &#123;</span><br><span class="line">            println(&quot;不及格&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var score = &apos;B&apos;</span><br><span class="line">    var  str = when (score) &#123;</span><br><span class="line">        &apos;A&apos; -&gt; &quot;优秀&quot;</span><br><span class="line">        &apos;B&apos; -&gt; &quot;良好&quot;</span><br><span class="line">        &apos;C&apos; -&gt; &quot;中&quot;</span><br><span class="line">        &apos;D&apos; -&gt; &quot;及格&quot;</span><br><span class="line">        else -&gt; &quot;不格&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子6</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var score = Random().nextInt(100)</span><br><span class="line">    var str = when (score) &#123;</span><br><span class="line">        in 90..100 -&gt; &quot;优秀&quot;</span><br><span class="line">        in 80..90 -&gt; &quot;良好&quot;</span><br><span class="line">        in 70..80 -&gt; &quot;中&quot;</span><br><span class="line">        in 60..70 -&gt; &quot;及格&quot;</span><br><span class="line">        else -&gt; &quot;不及格&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    println(&quot;$&#123;score&#125; = $&#123;str&#125;&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子7</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    var inputPrice = &quot;09&quot;</span><br><span class="line">    println(realPrice(inputPrice))</span><br><span class="line">&#125;</span><br><span class="line">fun realPrice(inputPrice:Any)=when(inputPrice)&#123;</span><br><span class="line">    is String -&gt; inputPrice.toDouble()//如果inputPrice类型为String,返回该字符的Double值</span><br><span class="line">    is Int -&gt; inputPrice.toDouble()//如果inputPrice类型为Int,返回该字符的Double值</span><br><span class="line">    is  Double -&gt; inputPrice</span><br><span class="line">    else -&gt; 0.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例子8</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    println(&quot;请输入内容&quot;)</span><br><span class="line">    val string = readLine()//读取控制台的一行输入 类型: String?</span><br><span class="line">    if(string!=null)&#123;</span><br><span class="line">        when&#123;</span><br><span class="line">            //每个分支条件都需要是布尔表达式</span><br><span class="line">            string.matches(Regex(&quot;\\d+&quot;)) -&gt; println(&quot;您输入的全是数字&quot;)</span><br><span class="line">            string.matches(Regex(&quot;[a-zA-Z]+&quot;)) -&gt; println(&quot;您输入的全是字母&quot;)</span><br><span class="line">            string.matches(Regex(&quot;[a-zA-Z0-9]+&quot;)) -&gt; println(&quot;您输入的既有数字也有字母&quot;)</span><br><span class="line">            else -&gt; println(&quot;您输入的内容中包含了特殊字符&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-when分支练习&quot;&gt; kotlin练习 - when分支练习&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;when表达式&quot;&gt; when表达式&lt;/span&gt;&lt;/h2&gt;
&lt;figure class=&quot;highlight plain
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>kotlin练习 - if分支结构练习</title>
    <link href="http://xue12311.github.io/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-if%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0/"/>
    <id>http://xue12311.github.io/2018/12/16/kotlin/kotlin练习-if分支结构练习/</id>
    <published>2018-12-16T10:54:00.000Z</published>
    <updated>2019-06-01T14:41:36.290Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="kotlin练习-if分支结构练习"> kotlin练习 - if分支结构练习</span></h1><h2><span id="if-分支"> if 分支</span></h2><ul><li>常见形式：</li></ul><ol><li>第一种形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(expression)&#123;</span><br><span class="line">statements...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第二种形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(expression)&#123;</span><br><span class="line">statements...</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    statements...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>第三种形式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(expression)&#123;</span><br><span class="line">statements...</span><br><span class="line">&#125;else if(expression)&#123;</span><br><span class="line">    statements...</span><br><span class="line">&#125;</span><br><span class="line">...  //可以有零个或多个else判断</span><br></pre></td></tr></table></figure><ul><li><p>注意事项<br>通常建议不要省略if、else、else if后执行体的花括号{}，即使条件执行体只有一行代码，也要保留花括号，这样有更好的可读性，也可以避免发生错误的可能。</p></li><li><p>表达式</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str = if (age&gt;20) &quot;age大于20&quot; else if (age&lt;20) &quot;age小于20&quot;  else &quot;age等于20&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var age = 20</span><br><span class="line">var str = if (age &gt; 20) &#123;</span><br><span class="line">    println(&quot;age大于20的分支&quot;)</span><br><span class="line">    &quot;age大于20&quot;</span><br><span class="line">&#125; else if (age &lt; 20) &#123;</span><br><span class="line">    println(&quot;age小于20的分支&quot;)</span><br><span class="line">    &quot;age小于20&quot;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    println(&quot;age等于20的分支&quot;)</span><br><span class="line">    &quot;age等于20&quot;</span><br><span class="line">&#125;</span><br><span class="line">println(str)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;kotlin练习-if分支结构练习&quot;&gt; kotlin练习 - if分支结构练习&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span id=&quot;if-分支&quot;&gt; if 分支&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;常见形式：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li
      
    
    </summary>
    
      <category term="kotlin" scheme="http://xue12311.github.io/categories/kotlin/"/>
    
    
      <category term="kotlin" scheme="http://xue12311.github.io/tags/kotlin/"/>
    
  </entry>
  
</feed>
