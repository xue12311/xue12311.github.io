<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jetpack Compose学习  AnimationVisibility</title>
    <url>/2021/05/27/Jetpack%20Compose/Jetpack%20Compose%20AnimationVisibility/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-animationvisibility"> Jetpack Compose学习 -------- AnimationVisibility</span></h2>
<h3><span id="animationvisibility-动画-可见-基础用法"> AnimationVisibility 动画 可见 基础用法</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalAnimationApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> state <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxSize(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center</span><br><span class="line">    ) {</span><br><span class="line">        AnimatedVisibility(visible = state) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">"这是一个普通的正文"</span>,</span><br><span class="line">                fontWeight = FontWeight.W900,</span><br><span class="line">                style = MaterialTheme.typography.h5</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">50.</span>dp))</span><br><span class="line">        Button(onClick = { state = !state }) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="keyword">if</span> (state) {</span><br><span class="line">                    <span class="string">"隐藏"</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="string">"显示"</span></span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="进场动画"> 进场动画</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalAnimationApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> state <span class="keyword">by</span> remember { mutableStateOf(<span class="literal">true</span>) }</span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxSize(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center</span><br><span class="line">    ) {</span><br><span class="line">        AnimatedVisibility(</span><br><span class="line">            visible = state,</span><br><span class="line">            enter = slideInVertically(</span><br><span class="line">                <span class="comment">//初始位置 Y轴</span></span><br><span class="line">                initialOffsetY = { -<span class="number">1000</span> },</span><br><span class="line">                animationSpec = tween(</span><br><span class="line">                    <span class="comment">//动画持续时间</span></span><br><span class="line">                    durationMillis = <span class="number">1200</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        ) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">"这是一个普通的正文"</span>,</span><br><span class="line">                fontWeight = FontWeight.W900,</span><br><span class="line">                style = MaterialTheme.typography.h5</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">50.</span>dp))</span><br><span class="line">        Button(onClick = { state = !state }) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="keyword">if</span> (state) {</span><br><span class="line">                    <span class="string">"隐藏"</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="string">"显示"</span></span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalAnimationApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> state <span class="keyword">by</span> remember { mutableStateOf(<span class="literal">true</span>) }</span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxSize(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally,</span><br><span class="line">        verticalArrangement = Arrangement.Center</span><br><span class="line">    ) {</span><br><span class="line">        AnimatedVisibility(</span><br><span class="line">            visible = state,</span><br><span class="line">            <span class="comment">//垂直滑入</span></span><br><span class="line">            enter = slideInVertically(</span><br><span class="line">                <span class="comment">//初始位置 Y轴</span></span><br><span class="line">                initialOffsetY = { -<span class="number">1000</span> },</span><br><span class="line">                animationSpec = tween(</span><br><span class="line">                    <span class="comment">//动画持续时间</span></span><br><span class="line">                    durationMillis = <span class="number">1200</span></span><br><span class="line">                )</span><br><span class="line">                <span class="comment">//淡入</span></span><br><span class="line">            ) + fadeIn(</span><br><span class="line">                animationSpec = tween(</span><br><span class="line">                    <span class="comment">//动画持续时间</span></span><br><span class="line">                    durationMillis = <span class="number">1200</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        ) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">"这是一个普通的正文"</span>,</span><br><span class="line">                fontWeight = FontWeight.W900,</span><br><span class="line">                style = MaterialTheme.typography.h5</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">50.</span>dp))</span><br><span class="line">        Button(onClick = { state = !state }) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="keyword">if</span> (state) {</span><br><span class="line">                    <span class="string">"隐藏"</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="string">"显示"</span></span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  AlertDialog</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20AlertDialog/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-alertdialog"> Jetpack Compose学习 -------- AlertDialog</span></h2>
<h3><span id="alertdialog-提示框-简单使用"> AlertDialog 提示框 简单使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AlertDialogSample</span><span class="params">()</span></span> {</span><br><span class="line">    MaterialTheme {</span><br><span class="line">        Column(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .wrapContentSize(Alignment.Center)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> openDialog = remember {</span><br><span class="line">                mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">            }</span><br><span class="line">            Button(onClick = {</span><br><span class="line">                openDialog.value = <span class="literal">true</span></span><br><span class="line">            }) {</span><br><span class="line">                Text(text = <span class="string">"弹出提示框"</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (openDialog.value) {</span><br><span class="line">                AlertDialog(</span><br><span class="line">                    onDismissRequest = {</span><br><span class="line">                        <span class="comment">// 当用户点击对话框以外的地方或者按下系统返回键将会执行的代码</span></span><br><span class="line">                        openDialog.value = <span class="literal">false</span></span><br><span class="line">                    },</span><br><span class="line">                    title = {</span><br><span class="line">                        Text(text = <span class="string">"提示框标题"</span>)</span><br><span class="line">                    },</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(text = <span class="string">"提示框内容"</span>)</span><br><span class="line">                    },</span><br><span class="line">                    confirmButton = {</span><br><span class="line">                        Button(onClick = { openDialog.value = <span class="literal">false</span> }) {</span><br><span class="line">                            Text(text = <span class="string">"确认按钮"</span>)</span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    dismissButton = {</span><br><span class="line">                        Button(onClick = { openDialog.value = <span class="literal">false</span> }) {</span><br><span class="line">                            Text(text = <span class="string">"取消按钮"</span>)</span><br><span class="line">                        }</span><br><span class="line">                    })</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AlertDialogSample2</span><span class="params">()</span></span> {</span><br><span class="line">    MaterialTheme {</span><br><span class="line">        Column(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .wrapContentSize(Alignment.Center)</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> openDialog = remember {</span><br><span class="line">                mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">            }</span><br><span class="line">            Button(onClick = {</span><br><span class="line">                openDialog.value = <span class="literal">true</span></span><br><span class="line">            }) {</span><br><span class="line">                Text(text = <span class="string">"弹出提示框"</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (openDialog.value) {</span><br><span class="line">                AlertDialog(</span><br><span class="line">                    onDismissRequest = {</span><br><span class="line">                        <span class="comment">// 当用户点击对话框以外的地方或者按下系统返回键将会执行的代码</span></span><br><span class="line">                        openDialog.value = <span class="literal">false</span></span><br><span class="line">                    },</span><br><span class="line">                    title = {</span><br><span class="line">                        Text(</span><br><span class="line">                            text = <span class="string">"开启位置服务"</span>,</span><br><span class="line">                            fontWeight = FontWeight.W700,</span><br><span class="line">                            style = MaterialTheme.typography.h6</span><br><span class="line">                        )</span><br><span class="line">                    },</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(</span><br><span class="line">                            text = <span class="string">"这将意味着，我们会给您提供精准的位置服务，并且您将接受关于您订阅的位置信息"</span>,</span><br><span class="line">                            fontSize = <span class="number">16.</span>sp</span><br><span class="line">                        )</span><br><span class="line">                    },</span><br><span class="line">                    confirmButton = {</span><br><span class="line">                        TextButton(</span><br><span class="line">                            onClick = {</span><br><span class="line">                                openDialog.value = <span class="literal">false</span></span><br><span class="line">                            },</span><br><span class="line">                        ) {</span><br><span class="line">                            Text(</span><br><span class="line">                                <span class="string">"确认"</span>,</span><br><span class="line">                                fontWeight = FontWeight.W700,</span><br><span class="line">                                style = MaterialTheme.typography.button</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    dismissButton = {</span><br><span class="line">                        TextButton(</span><br><span class="line">                            onClick = {</span><br><span class="line">                                openDialog.value = <span class="literal">false</span></span><br><span class="line">                            }</span><br><span class="line">                        ) {</span><br><span class="line">                            Text(</span><br><span class="line">                                <span class="string">"取消"</span>,</span><br><span class="line">                                fontWeight = FontWeight.W700,</span><br><span class="line">                                style = MaterialTheme.typography.button</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    })</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">AlertDialogSample3</span><span class="params">()</span></span> {</span><br><span class="line">      MaterialTheme {</span><br><span class="line">          Column(</span><br><span class="line">              Modifier</span><br><span class="line">                  .fillMaxSize()</span><br><span class="line">                  .wrapContentSize(Alignment.Center)</span><br><span class="line">          ) {</span><br><span class="line">              <span class="keyword">val</span> openDialog = remember {</span><br><span class="line">                  mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">              }</span><br><span class="line">              Button(onClick = {</span><br><span class="line">                  openDialog.value = <span class="literal">true</span></span><br><span class="line">              }) {</span><br><span class="line">                  Text(text = <span class="string">"弹出提示框"</span>)</span><br><span class="line">              }</span><br><span class="line">              <span class="keyword">if</span> (openDialog.value) {</span><br><span class="line">                  AlertDialog(</span><br><span class="line">                      onDismissRequest = {</span><br><span class="line">                          openDialog.value = <span class="literal">false</span></span><br><span class="line">                      },</span><br><span class="line">                      title = {</span><br><span class="line">                          Text(</span><br><span class="line">                              text = <span class="string">"开启位置服务"</span>,</span><br><span class="line">                              fontWeight = FontWeight.W700,</span><br><span class="line">                              style = MaterialTheme.typography.h6</span><br><span class="line">                          )</span><br><span class="line">                      },</span><br><span class="line">                      text = {</span><br><span class="line">                          Text(</span><br><span class="line">                              text = <span class="string">"这将意味着，我们会给您提供精准的位置服务，并且您将接受关于您订阅的位置信息"</span>,</span><br><span class="line">                              fontSize = <span class="number">16.</span>sp</span><br><span class="line">                          )</span><br><span class="line">                      },</span><br><span class="line">                      buttons = {</span><br><span class="line">                          Row(</span><br><span class="line">                              modifier = Modifier.padding(all = <span class="number">8.</span>dp),</span><br><span class="line">                              horizontalArrangement = Arrangement.Center</span><br><span class="line">                          ) {</span><br><span class="line">                              Button(</span><br><span class="line">                                  modifier = Modifier.fillMaxWidth(),</span><br><span class="line">                                  onClick = { openDialog.value = <span class="literal">false</span> }</span><br><span class="line">                              ) {</span><br><span class="line">                                  Text(<span class="string">"必须接受！"</span>)</span><br><span class="line">                              }</span><br><span class="line">                          }</span><br><span class="line">                      }</span><br><span class="line">                  )</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Canvas</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Canvas/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-canvas-图形"> Jetpack Compose学习 -------- Canvas 图形</span></h2>
<h3><span id="canvas-图形-基本属性"> Canvas 图形 基本属性</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//绘制 线</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasDrawLineDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasWidth = size.width</span><br><span class="line">            <span class="keyword">val</span> canvasHeight = size.height</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制 线</span></span><br><span class="line">            drawLine(</span><br><span class="line">                start = Offset(x = canvasWidth, y = <span class="number">0f</span>),</span><br><span class="line">                end = Offset(x = <span class="number">0f</span>, y = canvasHeight),</span><br><span class="line">                color = Color.Red</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="comment">//绘制 圆</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasDrawCircleDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasWidth = size.width</span><br><span class="line">            <span class="keyword">val</span> canvasHeight = size.height</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制 圆</span></span><br><span class="line">            drawCircle(</span><br><span class="line">                color = Color.Red,</span><br><span class="line">                <span class="comment">//圆心  画布中心点</span></span><br><span class="line">                center = Offset(</span><br><span class="line">                    x = canvasWidth / <span class="number">2</span>,</span><br><span class="line">                    y = canvasHeight / <span class="number">2</span></span><br><span class="line">                ),</span><br><span class="line">                <span class="comment">//半径 : 画布最小边 的 1/4</span></span><br><span class="line">                radius = size.minDimension / <span class="number">4</span></span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制 弧</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CanvasDrawArcDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//画布</span></span><br><span class="line">    Canvas(</span><br><span class="line">        <span class="comment">//充满整个屏幕</span></span><br><span class="line">        modifier = Modifier.fillMaxSize()</span><br><span class="line">    ) {</span><br><span class="line">        <span class="comment">//绘制 弧</span></span><br><span class="line">        drawArc(</span><br><span class="line">            color = Color.Red,</span><br><span class="line">            startAngle = <span class="number">0f</span>,</span><br><span class="line">            sweepAngle = <span class="number">60f</span>,</span><br><span class="line">            useCenter = <span class="literal">true</span>,</span><br><span class="line">            size = Size(<span class="number">300f</span>, <span class="number">300f</span>),</span><br><span class="line">            topLeft = Offset(<span class="number">60f</span>, <span class="number">60f</span>)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> <span class="comment">//绘制 矩形</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasDrawRectDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasQuadrantSize = size / <span class="number">2f</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制 矩形</span></span><br><span class="line">            drawRect(</span><br><span class="line">                color = Color.Red,</span><br><span class="line">                size = canvasQuadrantSize</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制 矩形</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasInsetDrawRectDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasQuadrantSize = size / <span class="number">2f</span></span><br><span class="line">            <span class="comment">//更改绘图边界</span></span><br><span class="line">            inset(<span class="number">150f</span>, <span class="number">30f</span>) {</span><br><span class="line">                <span class="comment">//绘制 矩形</span></span><br><span class="line">                drawRect(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    size = canvasQuadrantSize</span><br><span class="line">                )</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">      <span class="comment">//绘制 矩形</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasDrawRectTopLeftDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasWidth = size.width</span><br><span class="line">            <span class="keyword">val</span> canvasHeight = size.height</span><br><span class="line">            <span class="keyword">val</span> canvasSize = size</span><br><span class="line">            <span class="comment">//绘制 矩形</span></span><br><span class="line">            drawRect(</span><br><span class="line">                color = Color.Red,</span><br><span class="line">                topLeft = Offset(x = canvasWidth / <span class="number">3f</span>, y = canvasHeight / <span class="number">3f</span>),</span><br><span class="line">                size = canvasSize / <span class="number">3f</span></span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//绘制 矩形</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasRotateDrawRectDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//旋转 45 度</span></span><br><span class="line">            rotate(degrees = <span class="number">45f</span>) {</span><br><span class="line">                <span class="keyword">val</span> canvasWidth = size.width</span><br><span class="line">                <span class="keyword">val</span> canvasHeight = size.height</span><br><span class="line">                <span class="keyword">val</span> canvasSize = size</span><br><span class="line">                <span class="comment">//绘制 矩形</span></span><br><span class="line">                drawRect(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    topLeft = Offset(x = canvasWidth / <span class="number">3f</span>, y = canvasHeight / <span class="number">3f</span>),</span><br><span class="line">                    size = canvasSize / <span class="number">3f</span></span><br><span class="line">                )</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绘制 矩形</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">CanvasTransformDrawRectDemo</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//画布</span></span><br><span class="line">        Canvas(</span><br><span class="line">            <span class="comment">//充满整个屏幕</span></span><br><span class="line">            modifier = Modifier.fillMaxSize()</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">val</span> canvasWidth = size.width</span><br><span class="line">            <span class="keyword">val</span> canvasHeight = size.height</span><br><span class="line">            <span class="keyword">val</span> canvasSize = size</span><br><span class="line">            <span class="comment">//多种转换</span></span><br><span class="line">            withTransform({</span><br><span class="line">                <span class="comment">//平移</span></span><br><span class="line">                translate(left = canvasWidth / <span class="number">5f</span>)</span><br><span class="line">                <span class="comment">//旋转 45 度</span></span><br><span class="line">                rotate(degrees = <span class="number">45f</span>)</span><br><span class="line">            }) {</span><br><span class="line">                <span class="comment">//绘制 矩形</span></span><br><span class="line">                drawRect(</span><br><span class="line">                    color = Color.Red,</span><br><span class="line">                    topLeft = Offset(x = canvasWidth / <span class="number">3f</span>, y = canvasHeight / <span class="number">3f</span>),</span><br><span class="line">                    size = canvasSize / <span class="number">3f</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  BottomNavigation</title>
    <url>/2021/05/27/Jetpack%20Compose/Jetpack%20Compose%20BottomNavigation/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-bottomnavigation-底部导航栏"> Jetpack Compose学习 -------- BottomNavigation 底部导航栏</span></h2>
<h3><span id="bottomnavigation-底部导航栏-基本使用"> BottomNavigation  底部导航栏 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> selectedItem <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> list_name = listOf(<span class="string">"主页"</span>, <span class="string">"喜爱"</span>, <span class="string">"设置"</span>)</span><br><span class="line">    <span class="keyword">val</span> list_icon = listOf(Icons.Filled.Home, Icons.Filled.Favorite, Icons.Filled.Settings)</span><br><span class="line">    Scaffold(</span><br><span class="line">        topBar = {</span><br><span class="line">            <span class="comment">//顶部导航栏</span></span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = list_name.<span class="keyword">get</span>(selectedItem))</span><br><span class="line">                },</span><br><span class="line">                navigationIcon = {</span><br><span class="line">                    IconButton(onClick = {}) {</span><br><span class="line">                        Icon(Icons.Filled.ArrowBack, <span class="literal">null</span>)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        },</span><br><span class="line">        bottomBar = {</span><br><span class="line">            BottomNavigation {</span><br><span class="line">                list_name.forEachIndexed { index, item -&gt;</span><br><span class="line">                    BottomNavigationItem(</span><br><span class="line">                        selected = selectedItem == index,</span><br><span class="line">                        onClick = { selectedItem = index },</span><br><span class="line">                        icon = {</span><br><span class="line">                            Icon(</span><br><span class="line">                                imageVector = list_icon[index],</span><br><span class="line">                                contentDescription = <span class="literal">null</span>,</span><br><span class="line">                            )</span><br><span class="line">                        }, label = {</span><br><span class="line">                            Text(text = item)</span><br><span class="line">                        })</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = list_name[selectedItem],</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .wrapContentSize(Alignment.Center)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Card</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Card/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-card"> Jetpack Compose学习 -------- Card</span></h2>
<h3><span id="card-卡片-简单使用"> Card 卡片 简单使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">CardDemo</span><span class="params">()</span></span> {</span><br><span class="line">     Card(</span><br><span class="line">         modifier = Modifier.fillMaxWidth() ,</span><br><span class="line">         backgroundColor = Color.White,</span><br><span class="line">         elevation = <span class="number">10.</span>dp,</span><br><span class="line">     ) {</span><br><span class="line">         Text(text = <span class="string">"This is a Card Demo"</span>,Modifier.padding(<span class="number">10.</span>dp))</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Card(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">200.</span>dp)</span><br><span class="line">            .padding(<span class="number">10.</span>dp),</span><br><span class="line">        <span class="comment">//形状 圆角矩形</span></span><br><span class="line">        shape = RoundedCornerShape(<span class="number">8.</span>dp),</span><br><span class="line">        <span class="comment">//背景颜色</span></span><br><span class="line">        backgroundColor = Color.White,</span><br><span class="line">        <span class="comment">//内容的颜色</span></span><br><span class="line">        contentColor = Color.Black,</span><br><span class="line">        <span class="comment">//边框</span></span><br><span class="line">        border = BorderStroke(<span class="number">0.5</span>.dp, Color.Gray),</span><br><span class="line">        <span class="comment">//阴影</span></span><br><span class="line">        elevation = <span class="number">10.</span>dp</span><br><span class="line">    ) {</span><br><span class="line">        Column() {</span><br><span class="line">            Image(</span><br><span class="line">                painter = painterResource(id = R.mipmap.icon_header),</span><br><span class="line">                contentDescription = <span class="string">"图片描述"</span>,</span><br><span class="line">                contentScale = ContentScale.FillBounds</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">CardDemo</span><span class="params">()</span></span> {</span><br><span class="line">       Card(</span><br><span class="line">           modifier = Modifier</span><br><span class="line">               .fillMaxWidth()</span><br><span class="line">               <span class="comment">// 外边距</span></span><br><span class="line">               .padding(<span class="number">15.</span>dp)</span><br><span class="line">               .clickable(</span><br><span class="line">                   <span class="comment">// 设置点击波纹效果，注意如果 CardDemo() 函数不在 ExamplesTheme() {} 下调用</span></span><br><span class="line">                   <span class="comment">// 将无法显示波纹效果</span></span><br><span class="line">                   onClick = {</span><br><span class="line">                       Log.d(<span class="string">"Clickable"</span>, <span class="string">" clicked."</span>)</span><br><span class="line">                   }),</span><br><span class="line">           backgroundColor = Color.White,</span><br><span class="line">           <span class="comment">// 设置阴影</span></span><br><span class="line">           elevation = <span class="number">10.</span>dp,</span><br><span class="line">       )</span><br><span class="line">       {</span><br><span class="line">           Column(</span><br><span class="line">               <span class="comment">// 内边距</span></span><br><span class="line">               Modifier.padding(<span class="number">15.</span>dp)</span><br><span class="line">           ) {</span><br><span class="line">               Text(buildAnnotatedString {</span><br><span class="line">                   append(<span class="string">"welcome to "</span>)</span><br><span class="line">                   withStyle(</span><br><span class="line">                       style = SpanStyle(</span><br><span class="line">                           color = Color(<span class="number">0xFF4552B8</span>),</span><br><span class="line">                           fontWeight = FontWeight.W900,</span><br><span class="line">                       )</span><br><span class="line">                   ) {</span><br><span class="line">                       append(<span class="string">"Jetpack Compose Playground"</span>)</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">               Text(buildAnnotatedString {</span><br><span class="line">                   append(<span class="string">"Now you are in the "</span>)</span><br><span class="line">                   withStyle(</span><br><span class="line">                       style = SpanStyle(</span><br><span class="line">                           fontWeight = FontWeight.W900,</span><br><span class="line">                       )</span><br><span class="line">                   ) {</span><br><span class="line">                       append(<span class="string">"Card"</span>)</span><br><span class="line">                   }</span><br><span class="line">                   append(<span class="string">" section"</span>)</span><br><span class="line">               })</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Button IconButton</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Button/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-按钮-button-iconbutton"> Jetpack Compose学习 -------- 按钮 Button , IconButton</span></h2>
<h3><span id="button-按钮-基本使用"> Button 按钮 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ButtonSample</span><span class="params">()</span></span> {</span><br><span class="line">    Button(</span><br><span class="line">        onClick = {</span><br><span class="line">            Log.d(<span class="string">"ButtonSample"</span>, <span class="string">"按钮被点击"</span>)</span><br><span class="line">        },</span><br><span class="line">        modifier = Modifier.padding(<span class="number">10.</span>dp),</span><br><span class="line">        colors = ButtonDefaults.textButtonColors(backgroundColor = Color.Blue)</span><br><span class="line">    ) {</span><br><span class="line">        Text(text = <span class="string">"按钮"</span>, color = Color.White)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Button(onClick = { }) {</span><br><span class="line">        Icon(</span><br><span class="line">            imageVector = Icons.Filled.Favorite,</span><br><span class="line">            contentDescription = <span class="string">"喜爱"</span>,</span><br><span class="line">            modifier = Modifier.size(ButtonDefaults.IconSize)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//间隔</span></span><br><span class="line">        Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))</span><br><span class="line">        Text(text = <span class="string">"喜爱"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="iconbutton-图标按钮-基本使用"> IconButton 图标按钮 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Row {</span><br><span class="line">        IconButton(onClick = { }) {</span><br><span class="line">            Icon(Icons.Filled.Search, <span class="literal">null</span>)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        IconButton(onClick = { }) {</span><br><span class="line">            Icon(Icons.Filled.ArrowBack, <span class="literal">null</span>)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        IconButton(onClick = { }) {</span><br><span class="line">            Icon(Icons.Filled.Done, <span class="literal">null</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">val</span> isSelected = remember {</span><br><span class="line">            mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//取消水波纹</span></span><br><span class="line">        IconButtonNoIndication(onClick = {</span><br><span class="line">            isSelected.value = !isSelected.value</span><br><span class="line">        }) {</span><br><span class="line">            Icon(</span><br><span class="line">                Icons.Filled.Home,</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                tint = <span class="keyword">if</span> (isSelected.value) {</span><br><span class="line">                    Color.Red</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    Color.Gray</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 去掉水波纹</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">IconButtonNoIndication</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        onClick: () -&gt; <span class="type">Unit</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="params"><span class="function">        enabled: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        interactionSource: <span class="type">MutableInteractionSource</span> = remember { MutableInteractionSource()</span></span> },</span><br><span class="line">        content: <span class="meta">@Composable</span> () -&gt; <span class="built_in">Unit</span></span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = modifier</span><br><span class="line">                .clickable(</span><br><span class="line">                    onClick = onClick,</span><br><span class="line">                    enabled = enabled,</span><br><span class="line">                    role = Role.Button,</span><br><span class="line">                    interactionSource = interactionSource,</span><br><span class="line">                    <span class="comment">//取消水波纹</span></span><br><span class="line">                    indication = <span class="literal">null</span></span><br><span class="line">                )</span><br><span class="line">                .then(Modifier.size(<span class="number">48.</span>dp)),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) { content() }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  CircularProgressIndicator</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20CircularProgressIndicator/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-circularprogressindicator-圆形进度条"> Jetpack Compose学习 -------- CircularProgressIndicator 圆形进度条</span></h2>
<h3><span id="circularprogressindicator-圆形进度条-基本使用"> CircularProgressIndicator 圆形进度条 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CircularProgressIndicatorSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> progress = remember {</span><br><span class="line">        mutableStateOf(<span class="number">0.0f</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> animatedProgress = animateFloatAsState(</span><br><span class="line">        targetValue = progress.value,</span><br><span class="line">        animationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec</span><br><span class="line">    ).value</span><br><span class="line">    Column(horizontalAlignment = Alignment.CenterHorizontally) {</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        Text(text = <span class="string">"进度 不确定 的 圆形 进度条"</span>)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        CircularProgressIndicator()</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        Text(text = <span class="string">"圆形进度条 进度通过 点击按钮 添加"</span>)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        CircularProgressIndicator(progress = animatedProgress)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        OutlinedButton(onClick = {</span><br><span class="line">            <span class="keyword">if</span> (progress.value &lt; <span class="number">1f</span>) {</span><br><span class="line">                progress.value += <span class="number">0.1f</span></span><br><span class="line">            }</span><br><span class="line">        }) {</span><br><span class="line">            Text(text = <span class="string">"添加进度"</span>)</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        OutlinedButton(onClick = {</span><br><span class="line">            <span class="keyword">if</span> (progress.value &gt; <span class="number">0f</span>) {</span><br><span class="line">                progress.value -= <span class="number">0.1f</span></span><br><span class="line">            }</span><br><span class="line">        }) {</span><br><span class="line">            Text(text = <span class="string">"降低进度"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Crossfade</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Crossfade/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-crossfade"> Jetpack Compose学习 -------- Crossfade</span></h2>
<h3><span id="crossfade-动画-淡入淡出"> Crossfade 动画 淡入淡出</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">MyColors</span></span>(<span class="keyword">val</span> color: Color) {</span><br><span class="line">    Red(Color.Red),</span><br><span class="line">    Green(Color.Green),</span><br><span class="line">    Blue(Color.Blue),</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//淡入淡出 动画</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CrossfadeDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> currentColor = remember {</span><br><span class="line">        mutableStateOf(MyColors.Red)</span><br><span class="line">    }</span><br><span class="line">    Column {</span><br><span class="line">        Row {</span><br><span class="line">            MyColors.values().forEach { myColors -&gt;</span><br><span class="line">                Button(</span><br><span class="line">                    onClick = { currentColor.value = myColors },</span><br><span class="line">                    Modifier.weight(<span class="number">1f</span>, <span class="literal">true</span>)</span><br><span class="line">                        .height(<span class="number">48.</span>dp)</span><br><span class="line">                        .background(myColors.color),</span><br><span class="line">                    colors = ButtonDefaults.buttonColors(</span><br><span class="line">                        backgroundColor = myColors.color</span><br><span class="line">                    )</span><br><span class="line">                ) {</span><br><span class="line">                    Text(myColors.name, color = Color.White)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//淡入淡出 切换动画</span></span><br><span class="line">        Crossfade(</span><br><span class="line">            targetState = currentColor,</span><br><span class="line">            animationSpec = tween(<span class="number">3000</span>)</span><br><span class="line">        ) { selectedColor -&gt;</span><br><span class="line">            Box(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    .fillMaxSize()</span><br><span class="line">                    .background(color = selectedColor.value.color)</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Checkbox</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Checkbox/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-checkbox-复选框"> Jetpack Compose学习 -------- Checkbox 复选框</span></h2>
<h3><span id="checkbox-复选框-基本使用"> Checkbox 复选框 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CheckBoxDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> checkedState = remember {</span><br><span class="line">        mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line">    Checkbox(</span><br><span class="line">        checked = checkedState.value,</span><br><span class="line">        onCheckedChange = {</span><br><span class="line">            checkedState.value = it</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  DropdownMenu</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20DropdownMenu/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-dropdownmenu-下拉菜单"> Jetpack Compose学习 -------- DropdownMenu 下拉菜单</span></h2>
<h3><span id="dropdownmenu-下拉菜单-基本使用"> DropdownMenu 下拉菜单 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DropdownSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> isExpanded = remember {</span><br><span class="line">        mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>)</span><br><span class="line">    <span class="keyword">val</span> disabledValue = <span class="string">"B"</span></span><br><span class="line">    <span class="keyword">var</span> selectedIndex = remember {</span><br><span class="line">        mutableStateOf(<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .wrapContentSize(Alignment.TopStart)</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = list[selectedIndex.value],</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .height(<span class="number">30.</span>dp)</span><br><span class="line">                .padding(<span class="number">10.</span>dp)</span><br><span class="line">                .clickable {</span><br><span class="line">                    isExpanded.value = <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">                .background(</span><br><span class="line">                    Color.Black</span><br><span class="line">                ),</span><br><span class="line">            color = Color.White</span><br><span class="line">        )</span><br><span class="line">        DropdownMenu(</span><br><span class="line">            expanded = isExpanded.value,</span><br><span class="line">            onDismissRequest = { isExpanded.value = <span class="literal">false</span> },</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .background(Color.Red)</span><br><span class="line">        ) {</span><br><span class="line">            list.forEachIndexed { index, s -&gt;</span><br><span class="line">                DropdownMenuItem(onClick = {</span><br><span class="line">                    selectedIndex.value = index</span><br><span class="line">                    isExpanded.value = <span class="literal">false</span></span><br><span class="line">                }</span><br><span class="line">                ) {</span><br><span class="line">                    <span class="keyword">val</span> disaledText = <span class="keyword">if</span> (disabledValue == s) {</span><br><span class="line">                        <span class="string">" (Disabled)"</span></span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        <span class="string">""</span></span><br><span class="line">                    }</span><br><span class="line">                    Text(text = <span class="string">"<span class="subst">${s}</span><span class="subst">${disaledText}</span>"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  FloatingActionButton</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20FloatingActionButton/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-floatingactionbutton-悬浮按钮"> Jetpack Compose学习 -------- FloatingActionButton 悬浮按钮</span></h2>
<h3><span id="floatingactionbutton-悬浮按钮-基本使用"> FloatingActionButton 悬浮按钮 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FloatingActionButtonSample</span><span class="params">()</span></span> {</span><br><span class="line">    Column(Modifier.padding(<span class="number">10.</span>dp)) {</span><br><span class="line">        FloatingActionButton(</span><br><span class="line">            onClick = { },</span><br><span class="line">        ) {</span><br><span class="line">            Text(text = <span class="string">"悬浮按钮"</span>)</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        ExtendedFloatingActionButton(</span><br><span class="line">            text = {</span><br><span class="line">                Text(text = <span class="string">"悬浮按钮"</span>)</span><br><span class="line">            },</span><br><span class="line">            icon = {</span><br><span class="line">                Icon(imageVector = Icons.Filled.Favorite, contentDescription = <span class="string">"喜爱"</span>)</span><br><span class="line">            },</span><br><span class="line">            onClick = {</span><br><span class="line"></span><br><span class="line">            },</span><br><span class="line">            elevation = FloatingActionButtonDefaults.elevation(<span class="number">8.</span>dp),</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Divider</title>
    <url>/2021/05/27/Jetpack%20Compose/Jetpack%20Compose%20Divider/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-divider-分割线"> Jetpack Compose学习 -------- Divider 分割线</span></h2>
<h3><span id="divider-分割线-基本使用"> Divider 分割线 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Column(Modifier.fillMaxWidth()) {</span><br><span class="line">        Text(<span class="string">"Hello Word Hello Word Hello Word"</span>)</span><br><span class="line">        <span class="comment">//分割线</span></span><br><span class="line">        Divider(</span><br><span class="line">            <span class="comment">//颜色</span></span><br><span class="line">            color = Color.Blue,</span><br><span class="line">            <span class="comment">//线的高度</span></span><br><span class="line">            thickness = <span class="number">1.</span>dp,</span><br><span class="line">            <span class="comment">//距离开始的间距</span></span><br><span class="line">            startIndent = <span class="number">10.</span>dp</span><br><span class="line">        )</span><br><span class="line">        Text(<span class="string">"Hello Word"</span>)</span><br><span class="line">        <span class="comment">//分割线</span></span><br><span class="line">        Divider(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">                .height(<span class="number">1.</span>dp)</span><br><span class="line">                .padding(start = <span class="number">10.</span>dp, end = <span class="number">10.</span>dp),</span><br><span class="line">            <span class="comment">//颜色</span></span><br><span class="line">            color = Color.Green,</span><br><span class="line">        )</span><br><span class="line">        Text(<span class="string">"Hello Word Hello Word"</span>)</span><br><span class="line">        Text(<span class="string">"Hello Word Hello Word Hello Word"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习 Image Icon</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Image%20Icon/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-图片-image-icon"> Jetpack Compose学习 -------- 图片 Image , Icon</span></h2>
<h3><span id="image-图片-基本使用"> Image 图片 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ImageResourceDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> image = painterResource(id = R.mipmap.icon_header)</span><br><span class="line">    Column {</span><br><span class="line">        Image(</span><br><span class="line">            painter = image,</span><br><span class="line">            contentDescription = <span class="string">"图片描述"</span></span><br><span class="line">        )</span><br><span class="line">        Image(</span><br><span class="line">            painter = image,</span><br><span class="line">            contentDescription = <span class="string">"图片描述"</span>,</span><br><span class="line">            <span class="comment">//设置图片大小</span></span><br><span class="line">            modifier = Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Surface( </span><br><span class="line">            <span class="comment">//设置形状</span></span><br><span class="line">            shape = CircleShape</span><br><span class="line">        ) {</span><br><span class="line">            Image(</span><br><span class="line">                painter = image,</span><br><span class="line">                contentDescription = <span class="string">"图片描述"</span>,</span><br><span class="line">                <span class="comment">//设置图片大小</span></span><br><span class="line">                modifier = Modifier.size(<span class="number">100.</span>dp),</span><br><span class="line">                <span class="comment">//保持宽高比缩放</span></span><br><span class="line">                contentScale = ContentScale.Crop</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Surface(</span><br><span class="line">            <span class="comment">//设置形状</span></span><br><span class="line">            shape = CircleShape,</span><br><span class="line">            <span class="comment">//边框</span></span><br><span class="line">            border = BorderStroke(<span class="number">2.</span>dp, Color.Gray),</span><br><span class="line">        ) {</span><br><span class="line">            Image(</span><br><span class="line">                painter = image,</span><br><span class="line">                contentDescription = <span class="string">"图片描述"</span>,</span><br><span class="line">                <span class="comment">//设置图片大小</span></span><br><span class="line">                modifier = Modifier.size(<span class="number">100.</span>dp),</span><br><span class="line">                <span class="comment">//保持宽高比缩放</span></span><br><span class="line">                contentScale = ContentScale.Crop</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="图片加载"> 图片加载</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//图片加载    </span></span><br><span class="line">implementation(<span class="string">"com.github.bumptech.glide:glide:4.12.0"</span>)</span><br><span class="line">annotationProcessor(<span class="string">"com.github.bumptech.glide:compiler:4.12.0"</span>)</span><br><span class="line">implementation(<span class="string">"com.google.accompanist:accompanist-glide:0.10.0"</span>)</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.accompanist.glide.rememberGlidePainter</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxWidth(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) {</span><br><span class="line">        <span class="keyword">val</span> str_img_url <span class="keyword">by</span> remember {</span><br><span class="line">            mutableStateOf(</span><br><span class="line">                <span class="string">"https://tenfei04.cfp.cn/creative/vcg/veer/800water/veer-170860698.jpg"</span></span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">        Image(</span><br><span class="line">            painter = rememberGlidePainter(</span><br><span class="line">                request = str_img_url,</span><br><span class="line">                <span class="comment">//占位图片</span></span><br><span class="line">                previewPlaceholder = R.mipmap.ic_launcher,</span><br><span class="line">            ),</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">20.</span>dp))</span><br><span class="line">        Image(painter = rememberGlidePainter(</span><br><span class="line">            request = str_img_url,</span><br><span class="line">            requestBuilder = {</span><br><span class="line">                <span class="comment">//圆形</span></span><br><span class="line">                transform(CircleCrop())</span><br><span class="line">            }</span><br><span class="line">        ), contentDescription = <span class="literal">null</span>,</span><br><span class="line">            Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">20.</span>dp))</span><br><span class="line">        Image(painter = rememberGlidePainter(</span><br><span class="line">            request = str_img_url,</span><br><span class="line">            requestBuilder = {</span><br><span class="line">                <span class="comment">//圆角</span></span><br><span class="line">                transform(RoundedCorners(<span class="number">20</span>))</span><br><span class="line">            }</span><br><span class="line">        ), contentDescription = <span class="literal">null</span>,</span><br><span class="line">            Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="自定义控件"> 自定义控件</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> painter =</span><br><span class="line">        rememberGlidePainter(</span><br><span class="line">            request = <span class="string">"https://tva1.sinaimg.cn/large/a15b4afegy1fmvjlgdxxgj21hc0u04qp.jpg"</span></span><br><span class="line">        )</span><br><span class="line">    Box(Modifier.fillMaxSize()) {</span><br><span class="line">        Image(</span><br><span class="line">            painter = painter,</span><br><span class="line">            contentDescription = <span class="literal">null</span>,</span><br><span class="line">            <span class="comment">//居中</span></span><br><span class="line">            Modifier.align(Alignment.Center)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//加载状态</span></span><br><span class="line">        <span class="keyword">when</span> (painter.loadState) {</span><br><span class="line">            <span class="comment">//加载中</span></span><br><span class="line">            <span class="keyword">is</span> ImageLoadState.Loading -&gt; {</span><br><span class="line">                <span class="comment">//圆形进度条</span></span><br><span class="line">                CircularProgressIndicator(</span><br><span class="line">                    <span class="comment">//居中</span></span><br><span class="line">                    Modifier.align(Alignment.Center)</span><br><span class="line">                )</span><br><span class="line">                Snackbar {</span><br><span class="line">                    Text(text = <span class="string">"图片加载中"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//加载失败</span></span><br><span class="line">            <span class="keyword">is</span> ImageLoadState.Error -&gt; {</span><br><span class="line">                Snackbar {</span><br><span class="line">                    Text(text = <span class="string">"图片加载失败"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//加载成功</span></span><br><span class="line">            <span class="keyword">is</span> ImageLoadState.Success -&gt; {</span><br><span class="line">                Snackbar {</span><br><span class="line">                    Text(text = <span class="string">"图片加载成功"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="icon-基本使用"> Icon 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Row {</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.Gray)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.Red)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.DarkGray)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.Magenta)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.Cyan)</span><br><span class="line">        Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="literal">null</span>, tint = Color.Blue)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  LazyColumn</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20LazyColumn/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-lazycolumn-延迟-垂直-布局"> Jetpack Compose学习 -------- LazyColumn 延迟 垂直 布局</span></h2>
<h3><span id="lazycolumn-延迟-垂直-布局-简单使用"> LazyColumn 延迟 垂直 布局 简单使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LazyColumnDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>) + ((<span class="number">0.</span><span class="number">.20</span>).map { it.toString() })</span><br><span class="line">    LazyColumn(Modifier.fillMaxWidth()) {</span><br><span class="line">        items(</span><br><span class="line">            key = { list.<span class="keyword">get</span>(it) },</span><br><span class="line">            count = list.size,</span><br><span class="line">            itemContent = { item -&gt;</span><br><span class="line">                <span class="keyword">val</span> content = list.<span class="keyword">get</span>(item)</span><br><span class="line">                Log.d(<span class="string">"COMPOSE"</span>, <span class="string">"This get rendered <span class="subst">${content}</span>"</span>)</span><br><span class="line">                <span class="keyword">when</span> (content) {</span><br><span class="line">                    <span class="string">"A"</span> -&gt; {</span><br><span class="line">                        Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                    }</span><br><span class="line">                    <span class="string">"B"</span> -&gt; {</span><br><span class="line">                        Button(onClick = {}) {</span><br><span class="line">                            Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                    <span class="string">"C"</span> -&gt; {</span><br><span class="line">                    }</span><br><span class="line">                    <span class="string">"D"</span> -&gt; {</span><br><span class="line">                        Text(text = content)</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span> -&gt; {</span><br><span class="line">                        Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Column Row Box Spacer BoxWithConstraints ConstraintLayout</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Layout/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-布局-column-row-box-spacer-boxwithconstraints-constraintlayout"> Jetpack Compose学习 -------- 布局 Column Row Box Spacer BoxWithConstraints ConstraintLayout</span></h2>
<h3><span id="column-垂直布局将多个项垂直地放置在屏幕上"> Column 垂直布局（将多个项垂直地放置在屏幕上）</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">ColumnLayoutDemo</span><span class="params">()</span></span> {</span><br><span class="line">     <span class="comment">//垂直布局</span></span><br><span class="line">     Column {</span><br><span class="line">         Text(text = <span class="string">"Alfred Sisley"</span>)</span><br><span class="line">         Text(text = <span class="string">"3 minutes ago"</span>)</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//文字居中</span></span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxWidth(),</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) {</span><br><span class="line">        Text(<span class="string">"你好呀"</span>)</span><br><span class="line">        Text(<span class="string">"我正在使用 Android Studio"</span>)</span><br><span class="line">        Text(<span class="string">"现在是晚上"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//特定文字居中</span></span><br><span class="line">    Column(</span><br><span class="line">        Modifier.fillMaxWidth(),</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"夜色"</span>,</span><br><span class="line">            <span class="comment">//特定文字居中</span></span><br><span class="line">            modifier = Modifier.align(Alignment.CenterHorizontally),</span><br><span class="line">            style = MaterialTheme.typography.h6,</span><br><span class="line">            fontWeight = FontWeight.W900</span><br><span class="line">        )</span><br><span class="line">        Text(<span class="string">"今晚的夜色很不错，我和朋友走在河边的小路上，看到了很多美丽的风景"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="row-水平布局-将多个项水平地放置在屏幕上"> Row 水平布局 （将多个项水平地放置在屏幕上）</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">RowLayoutDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//水平布局</span></span><br><span class="line">    Row(verticalAlignment = Alignment.CenterVertically) {</span><br><span class="line">        <span class="comment">//图片</span></span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.mipmap.icon_header),</span><br><span class="line">            contentDescription = <span class="literal">null</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//垂直布局</span></span><br><span class="line">        Column {</span><br><span class="line">            Text(text = <span class="string">"Alfred Sisley"</span>)</span><br><span class="line">            Text(text = <span class="string">"3 minutes ago"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Preview</span></span><br><span class="line">  <span class="meta">@Composable</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">AlignInRowDemo</span><span class="params">()</span></span> {</span><br><span class="line">      Row(</span><br><span class="line">          modifier = Modifier</span><br><span class="line">              .size(<span class="number">150.</span>dp)</span><br><span class="line">              .background(Color.Gray),</span><br><span class="line">          <span class="comment">//水平排列</span></span><br><span class="line">          horizontalArrangement = Arrangement.End,</span><br><span class="line">          <span class="comment">//垂直排列</span></span><br><span class="line">          verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">      ) {</span><br><span class="line">          Box(Modifier.size(<span class="number">50.</span>dp).background(Color.Yellow))</span><br><span class="line">          Box(Modifier.size(<span class="number">50.</span>dp).background(Color.Blue))</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  </span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Row {</span><br><span class="line">        Box(Modifier.size(<span class="number">40.</span>dp).background(Color.Magenta))</span><br><span class="line">        Box(Modifier.size(<span class="number">40.</span>dp).background(Color.Yellow))</span><br><span class="line">        Box(Modifier.size(<span class="number">40.</span>dp).background(Color.Green))</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Row {</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">40.</span>dp)</span><br><span class="line">                <span class="comment">//权重</span></span><br><span class="line">                .weight(<span class="number">1f</span>)</span><br><span class="line">                .background(Color.Magenta)</span><br><span class="line">        )</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">40.</span>dp)</span><br><span class="line">                .background(Color.Yellow))</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">40.</span>dp)</span><br><span class="line">                <span class="comment">//权重</span></span><br><span class="line">                .weight(<span class="number">1f</span>)</span><br><span class="line">                .background(Color.Green))</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="box-水平布局-将一个元素放在另一个元素上"> Box 水平布局 （将一个元素放在另一个元素上）</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">BoxLayoutDemo</span><span class="params">()</span></span> {</span><br><span class="line">        Box() {</span><br><span class="line">            Text(text = <span class="string">"测试"</span>, color = Color.Blue, fontSize = <span class="number">15.</span>sp)</span><br><span class="line">            Text(text = <span class="string">"测试"</span>, color = Color.Yellow, fontSize = <span class="number">30.</span>sp)</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p><img src="/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Layout/1.png" alt=""></p>
<h3><span id="spacer-空白布局"> Spacer 空白布局</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Row {</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">100.</span>dp)</span><br><span class="line">                .background(Color.Magenta)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//空白布局</span></span><br><span class="line">        Spacer(modifier = Modifier.width(<span class="number">20.</span>dp))</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">100.</span>dp)</span><br><span class="line">                .background(Color.Yellow)</span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.weight(<span class="number">1f</span>))</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                .size(<span class="number">100.</span>dp)</span><br><span class="line">                .background(Color.Green)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ArtistCardDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> padding = <span class="number">16.</span>dp</span><br><span class="line">    Column(</span><br><span class="line">        Modifier</span><br><span class="line">            .clickable(onClick = {</span><br><span class="line">                Log.d(<span class="string">"Clickable"</span>, <span class="string">" clicked."</span>)</span><br><span class="line">            })</span><br><span class="line">            .padding(padding)</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">    ) {</span><br><span class="line">        RowLayoutDemo()</span><br><span class="line">        Spacer(Modifier.size(padding))</span><br><span class="line">        Card(elevation = <span class="number">4.</span>dp) {</span><br><span class="line">            Image(</span><br><span class="line">                painter = painterResource(id = R.mipmap.icon_header),</span><br><span class="line">                contentDescription = <span class="literal">null</span></span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">//内边距</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PaddedComposableDemo</span><span class="params">()</span></span> {</span><br><span class="line">    Text(</span><br><span class="line">        text=<span class="string">"Hello World"</span>,</span><br><span class="line">        modifier =</span><br><span class="line">        <span class="comment">//背景</span></span><br><span class="line">        Modifier.background(Color.Green)</span><br><span class="line">            <span class="comment">//内边距</span></span><br><span class="line">            .padding(<span class="number">20.</span>dp))</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设置尺寸</span></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">SizedComposableDemo</span><span class="params">()</span></span> {</span><br><span class="line">        Box(</span><br><span class="line">            <span class="comment">//设置尺寸</span></span><br><span class="line">            modifier = Modifier.size(<span class="number">100.</span>dp, <span class="number">100.</span>dp)</span><br><span class="line">                <span class="comment">//背景</span></span><br><span class="line">                .background(Color.Red))</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">FixedSizeComposableDemo</span><span class="params">()</span></span> {</span><br><span class="line">     Box(</span><br><span class="line">         modifier =</span><br><span class="line">         Modifier</span><br><span class="line">             <span class="comment">//设置尺寸</span></span><br><span class="line">             .size(<span class="number">90.</span>dp, <span class="number">150.</span>dp)</span><br><span class="line">             <span class="comment">//背景</span></span><br><span class="line">             .background(Color.Blue)</span><br><span class="line">     ) {</span><br><span class="line">         <span class="comment">//设置所需尺寸</span></span><br><span class="line">         Box(</span><br><span class="line">             Modifier</span><br><span class="line">                 .requiredSize(<span class="number">120.</span>dp, <span class="number">120.</span>dp)</span><br><span class="line">                 <span class="comment">//背景</span></span><br><span class="line">                 .background(Color.Red)</span><br><span class="line">         )</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FillSizeComposableDemo</span><span class="params">()</span></span> {</span><br><span class="line">    Box(</span><br><span class="line">        Modifier</span><br><span class="line">            <span class="comment">//背景</span></span><br><span class="line">            .background(Color.Green)</span><br><span class="line">            <span class="comment">//尺寸</span></span><br><span class="line">            .size(<span class="number">50.</span>dp)</span><br><span class="line">            <span class="comment">//内边距</span></span><br><span class="line">            .padding(<span class="number">10.</span>dp)</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            Modifier</span><br><span class="line">                <span class="comment">//背景</span></span><br><span class="line">                .background(Color.Blue)</span><br><span class="line">                <span class="comment">//填充 最大边距</span></span><br><span class="line">                .fillMaxSize()</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="meta">@Composable</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">MatchParentSizeComposable</span><span class="params">()</span></span> {</span><br><span class="line">        Box {</span><br><span class="line">            Spacer(</span><br><span class="line">                modifier = Modifier</span><br><span class="line">                    <span class="comment">// 仅在 Box 作用域内可用</span></span><br><span class="line">                    .matchParentSize()</span><br><span class="line">                    <span class="comment">//Spacer 将占用父项允许的所有可用空间，反过来使父项展开并填满所有可用空间</span></span><br><span class="line"><span class="comment">//                    .fillMaxSize()</span></span><br><span class="line">                    .background(Color.Green)</span><br><span class="line">            )</span><br><span class="line">            Text(text = <span class="string">"Hello World"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//在文本基线上方添加内边距</span></span><br><span class="line"> <span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">TextWithPaddingFromBaseline</span><span class="params">()</span></span> {</span><br><span class="line">     Box(modifier = Modifier.background(Color.Green)) {</span><br><span class="line">         Text(</span><br><span class="line">             text = <span class="string">"Hello World"</span>,</span><br><span class="line">             modifier = Modifier</span><br><span class="line">                 <span class="comment">//在文本基线上方添加内边距</span></span><br><span class="line">                 .paddingFromBaseline(top = <span class="number">20.</span>dp, bottom = <span class="number">5.</span>dp)</span><br><span class="line">         )</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//偏移量</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">OffsetComposable</span><span class="params">()</span></span> {</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(width = <span class="number">160.</span>dp, height = <span class="number">80.</span>dp)</span><br><span class="line">            .background(Color.Blue)</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Layout offset modifier sample"</span>,</span><br><span class="line">            <span class="comment">//偏移量</span></span><br><span class="line">            Modifier.offset(x = <span class="number">16.</span>dp, y = <span class="number">40.</span>dp)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//自适应布局</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">FlexibleComposable</span><span class="params">()</span></span> {</span><br><span class="line">    Row(Modifier.width(<span class="number">200.</span>dp)) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .weight(<span class="number">1f</span>)</span><br><span class="line">                .height(<span class="number">30.</span>dp)</span><br><span class="line">                .background(Color.Green)</span><br><span class="line">        )</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .weight(<span class="number">3f</span>)</span><br><span class="line">                .height(<span class="number">30.</span>dp)</span><br><span class="line">                .background(Color.Red)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="boxwithconstraints"> BoxWithConstraints</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//约束条件</span></span><br><span class="line">  <span class="meta">@Composable</span></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">WithConstraintsComposable</span><span class="params">()</span></span> {</span><br><span class="line">  <span class="comment">//约束条件</span></span><br><span class="line">      BoxWithConstraints {</span><br><span class="line">          Text(<span class="string">"My minHeight is <span class="variable">$minHeight</span> while my maxWidth is <span class="variable">$maxWidth</span>"</span>)</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    BoxWithConstraints(</span><br><span class="line">        modifier = Modifier.fillMaxWidth(),</span><br><span class="line">        <span class="comment">//内容的对齐方式</span></span><br><span class="line">        contentAlignment = Alignment.TopStart,</span><br><span class="line">        <span class="comment">//是否将约束作用于 子 View 上</span></span><br><span class="line">        propagateMinConstraints = <span class="literal">true</span>,</span><br><span class="line">    ) {</span><br><span class="line">        <span class="keyword">val</span> itemW = <span class="number">50.</span>dp</span><br><span class="line">        <span class="keyword">val</span> spaceW = <span class="number">2.</span>dp</span><br><span class="line">        <span class="keyword">val</span> count = (maxWidth.value / (itemW.value + spaceW.value)).toInt()</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">            Row() {</span><br><span class="line">                <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until count) {</span><br><span class="line">                    Box(</span><br><span class="line">                        Modifier</span><br><span class="line">                            .size(itemW, itemW)</span><br><span class="line">                            .background(Color.Blue)</span><br><span class="line">                    )</span><br><span class="line">                    Spacer(Modifier.size(spaceW))</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="constraintlayout-约束布局"> ConstraintLayout 约束布局</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ConstraintLayoutDemo</span><span class="params">()</span></span> {</span><br><span class="line">    ConstraintLayout {</span><br><span class="line">        <span class="comment">//通过 createRefs() 或 createRefFor() 创建关联的引用</span></span><br><span class="line">        <span class="keyword">val</span> (text1,text2,text3) = createRefs()</span><br><span class="line">        <span class="comment">//使用 constrainAs() 修饰符提供的约束条件</span></span><br><span class="line">        Text(text = <span class="string">"Text1"</span>, Modifier.constrainAs(text1) {</span><br><span class="line">            <span class="comment">//指定约束条件</span></span><br><span class="line">            start.linkTo(text2.end)</span><br><span class="line">        })</span><br><span class="line">        Text(text = <span class="string">"Text2"</span>, Modifier.constrainAs(text2) {</span><br><span class="line">            top.linkTo(text1.bottom)</span><br><span class="line">        })</span><br><span class="line">        Text(text = <span class="string">"This is a very long text"</span>, Modifier.constrainAs(text3) {</span><br><span class="line">            start.linkTo(text2.end)</span><br><span class="line">            top.linkTo(text2.bottom)</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  LinearProgressIndicator</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20LinearProgressIndicator/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-linearprogressindicator-线形进度条"> Jetpack Compose学习 -------- LinearProgressIndicator 线形进度条</span></h2>
<h3><span id="linearprogressindicator-线形进度条-基本使用"> LinearProgressIndicator 线形进度条 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">LinearProgressIndicatorSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> progress = remember {</span><br><span class="line">        mutableStateOf(<span class="number">0.0f</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> animatedProgress = animateFloatAsState(</span><br><span class="line">        targetValue = progress.value,</span><br><span class="line">        animationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec</span><br><span class="line">    ).value</span><br><span class="line">    Column(horizontalAlignment = Alignment.CenterHorizontally,modifier = Modifier.padding(<span class="number">10.</span>dp)) {</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        Text(text = <span class="string">"进度 不确定 的 线形进度条"</span>)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        LinearProgressIndicator()</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        Text(text = <span class="string">"线形进度条 进度通过 点击按钮 添加"</span>)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        LinearProgressIndicator(progress = animatedProgress)</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        OutlinedButton(onClick = {</span><br><span class="line">            <span class="keyword">if</span> (progress.value &lt; <span class="number">1f</span>) {</span><br><span class="line">                progress.value += <span class="number">0.1f</span></span><br><span class="line">            }</span><br><span class="line">        }) {</span><br><span class="line">            Text(text = <span class="string">"添加进度"</span>)</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">30.</span>dp))</span><br><span class="line">        OutlinedButton(onClick = {</span><br><span class="line">            <span class="keyword">if</span> (progress.value &gt; <span class="number">0f</span>) {</span><br><span class="line">                progress.value -= <span class="number">0.1f</span></span><br><span class="line">            }</span><br><span class="line">        }) {</span><br><span class="line">            Text(text = <span class="string">"降低进度"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  ModalBottomSheetLayout</title>
    <url>/2021/05/27/Jetpack%20Compose/Jetpack%20Compose%20ModalBottomSheetLayout/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-modalbottomsheetlayout-底部弹出布局"> Jetpack Compose学习 -------- ModalBottomSheetLayout 底部弹出布局</span></h2>
<h3><span id="modalbottomsheetlayout-底部弹出布局-基本使用"> ModalBottomSheetLayout 底部弹出布局 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ExperimentalMaterialApi</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> state = rememberModalBottomSheetState(initialValue = ModalBottomSheetValue.Hidden)</span><br><span class="line">    <span class="keyword">val</span> scope = rememberCoroutineScope()</span><br><span class="line">    ModalBottomSheetLayout(</span><br><span class="line">        sheetContent = {</span><br><span class="line">            Column {</span><br><span class="line">                ListItem(</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(text = <span class="string">"选择分享到哪里吧~"</span>)</span><br><span class="line">                    }</span><br><span class="line">                )</span><br><span class="line">                ListItem(</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(text = <span class="string">"github"</span>)</span><br><span class="line">                    },</span><br><span class="line">                    icon = {</span><br><span class="line">                        Surface(</span><br><span class="line">                            shape = CircleShape,</span><br><span class="line">                            color = Color(<span class="number">0xFF181717</span>)</span><br><span class="line">                        ) {</span><br><span class="line">                            Icon(</span><br><span class="line">                                painterResource(id = R.drawable.ic_github),</span><br><span class="line">                                <span class="literal">null</span>,</span><br><span class="line">                                Modifier.padding(<span class="number">4.</span>dp),</span><br><span class="line">                                Color.White</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    }, modifier = Modifier.clickable { }</span><br><span class="line">                )</span><br><span class="line">                ListItem(</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(text = <span class="string">"wechat"</span>)</span><br><span class="line">                    },</span><br><span class="line">                    icon = {</span><br><span class="line">                        Surface(</span><br><span class="line">                            shape = CircleShape,</span><br><span class="line">                            color = Color(<span class="number">0xFF181717</span>)</span><br><span class="line">                        ) {</span><br><span class="line">                            Icon(</span><br><span class="line">                                painterResource(id = R.drawable.ic_wechat),</span><br><span class="line">                                <span class="literal">null</span>,</span><br><span class="line">                                Modifier.padding(<span class="number">4.</span>dp),</span><br><span class="line">                                Color.White</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    }, modifier = Modifier.clickable { }</span><br><span class="line">                )</span><br><span class="line">                ListItem(</span><br><span class="line">                    text = {</span><br><span class="line">                        Text(text = <span class="string">"twitter"</span>)</span><br><span class="line">                    },</span><br><span class="line">                    icon = {</span><br><span class="line">                        Surface(</span><br><span class="line">                            shape = CircleShape,</span><br><span class="line">                            color = Color(<span class="number">0xFF181717</span>)</span><br><span class="line">                        ) {</span><br><span class="line">                            Icon(</span><br><span class="line">                                painterResource(id = R.drawable.ic_twitter),</span><br><span class="line">                                <span class="literal">null</span>,</span><br><span class="line">                                Modifier.padding(<span class="number">4.</span>dp),</span><br><span class="line">                                Color.White</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    }, modifier = Modifier.clickable { }</span><br><span class="line">                )</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        sheetState = state</span><br><span class="line">    ) {</span><br><span class="line">        Column(</span><br><span class="line">            Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .padding(<span class="number">16.</span>dp),</span><br><span class="line">            horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">        ) {</span><br><span class="line">            Button(onClick = {</span><br><span class="line">                scope.launch {</span><br><span class="line">                    state.show()</span><br><span class="line">                }</span><br><span class="line">            }) {</span><br><span class="line">                Text(text = <span class="string">"分享"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//返回键 处理  ModalBottomSheet 收回</span></span><br><span class="line">    BackHandler(</span><br><span class="line">        enabled = (state.currentValue == ModalBottomSheetValue.HalfExpanded ||</span><br><span class="line">                state.currentValue == ModalBottomSheetValue.Expanded),</span><br><span class="line">        onBack = {</span><br><span class="line">            scope.launch {</span><br><span class="line">                state.hide()</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="收回-modalbottomsheet"> 收回 ModalBottomSheet</span></h3>
<p>一般情况下，ModalBottomSheet 无法自动处理按下返回键就收起，所以我们可以用 BackHandler 来处理<br>
在 ModalBottomSheet 后添加代码:</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">BackHandler(</span><br><span class="line">    enabled = (state.currentValue == ModalBottomSheetValue.HalfExpanded</span><br><span class="line">            || state.currentValue == ModalBottomSheetValue.Expanded),</span><br><span class="line">    onBack = {</span><br><span class="line">        scope.launch{</span><br><span class="line">            state.hide()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="设置动画时间"> 设置动画时间</span></h3>
<p>ModalSheetLayout 默认用 state.show() 或者 state.hidden() 来弹出和收回<br>
我们可以通过这样的方式来自定义动画时间:</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">state.animateTo(ModalBottomSheetValue.Hidden, tween(<span class="number">1000</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  LazyRow</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20LazyRow/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-lazyrow-延迟-水平-布局"> Jetpack Compose学习 -------- LazyRow 延迟 水平 布局</span></h2>
<h3><span id="lazyrow-延迟-水平-布局-简单使用"> LazyRow 延迟 水平 布局 简单使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">LazyRowDemo</span><span class="params">()</span></span> {</span><br><span class="line">       <span class="keyword">val</span> list = listOf(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>) + ((<span class="number">0.</span><span class="number">.20</span>).map { it.toString() })</span><br><span class="line">       LazyRow(Modifier.fillMaxHeight()) {</span><br><span class="line">           items(</span><br><span class="line">               key = { list.<span class="keyword">get</span>(it) },</span><br><span class="line">               count = list.size,</span><br><span class="line">               itemContent = { item -&gt;</span><br><span class="line">                   <span class="keyword">val</span> content = list.<span class="keyword">get</span>(item)</span><br><span class="line">                   Log.d(<span class="string">"COMPOSE"</span>, <span class="string">"This get rendered <span class="subst">${content}</span>"</span>)</span><br><span class="line">                   <span class="keyword">when</span> (content) {</span><br><span class="line">                       <span class="string">"A"</span> -&gt; {</span><br><span class="line">                           Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                       }</span><br><span class="line">                       <span class="string">"B"</span> -&gt; {</span><br><span class="line">                           Button(onClick = {}) {</span><br><span class="line">                               Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                           }</span><br><span class="line">                       }</span><br><span class="line">                       <span class="string">"C"</span> -&gt; {</span><br><span class="line">                       }</span><br><span class="line">                       <span class="string">"D"</span> -&gt; {</span><br><span class="line">                           Text(text = content)</span><br><span class="line">                       }</span><br><span class="line">                       <span class="keyword">else</span> -&gt; {</span><br><span class="line">                           Text(text = content, style = TextStyle(fontSize = <span class="number">80.</span>sp))</span><br><span class="line">                       }</span><br><span class="line">                   }</span><br><span class="line">               }</span><br><span class="line">           )</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  ModalDrawerLayout</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20ModalDrawerLayout/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-modaldrawerlayout-导航抽屉"> Jetpack Compose学习 -------- ModalDrawerLayout 导航抽屉</span></h2>
<h3><span id="modaldrawerlayout-导航抽屉-基本使用"> ModalDrawerLayout 导航抽屉 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ModalDrawerLayoutSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> drawerState = rememberDrawerState(initialValue = DrawerValue.Closed)</span><br><span class="line">    <span class="keyword">val</span> scope = rememberCoroutineScope()</span><br><span class="line">    ModalDrawer(</span><br><span class="line">        drawerState = drawerState,</span><br><span class="line">        drawerContent = {</span><br><span class="line">            Column {</span><br><span class="line">                Text(text = <span class="string">"Text in Drawer"</span>)</span><br><span class="line">                Button(onClick = {</span><br><span class="line">                    scope.launch {</span><br><span class="line">                        drawerState.close()</span><br><span class="line">                    }</span><br><span class="line">                }) {</span><br><span class="line">                    Text(text = <span class="string">"Close Drawer"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        content = {</span><br><span class="line">            Column {</span><br><span class="line">                Text(text = <span class="string">"Text in Bodycontext"</span>)</span><br><span class="line">                Button(onClick = {</span><br><span class="line">                    scope.launch {</span><br><span class="line">                        drawerState.<span class="keyword">open</span>()</span><br><span class="line">                    }</span><br><span class="line">                }) {</span><br><span class="line">                    Text(text = <span class="string">"Open Drawer"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Scaffold</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20Scaffold/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-scaffold"> Jetpack Compose学习 -------- Scaffold</span></h2>
<h3><span id="scaffold-基本使用"> Scaffold 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScaffoldDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> materialBlue700 = Color(<span class="number">0xFF1976D2</span>)</span><br><span class="line">    <span class="comment">//设置抽屉的打开状态</span></span><br><span class="line">    <span class="keyword">val</span> scaffoldState = rememberScaffoldState(</span><br><span class="line">        rememberDrawerState(initialValue = DrawerValue.Closed)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> scope = rememberCoroutineScope()</span><br><span class="line">    Scaffold(</span><br><span class="line">        scaffoldState = scaffoldState,</span><br><span class="line">        <span class="comment">//顶部导航栏</span></span><br><span class="line">        topBar = {</span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = <span class="string">"标题"</span>)</span><br><span class="line">                },</span><br><span class="line">                backgroundColor = materialBlue700,</span><br><span class="line">            )</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//悬浮按钮</span></span><br><span class="line">        floatingActionButton = {</span><br><span class="line">            FloatingActionButton(onClick = {</span><br><span class="line">                scope.launch {</span><br><span class="line">                    <span class="keyword">if</span> (scaffoldState.drawerState.isClosed) {</span><br><span class="line">                        scaffoldState.drawerState.<span class="keyword">open</span>()</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        scaffoldState.drawerState.close()</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }) {</span><br><span class="line">                Text(<span class="string">"X"</span>)</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//悬浮按钮的位置</span></span><br><span class="line">        floatingActionButtonPosition = FabPosition.End,</span><br><span class="line">        <span class="comment">//抽屉内容</span></span><br><span class="line">        drawerContent = {</span><br><span class="line">            Text(text = <span class="string">"drawerContent"</span>)</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//内容</span></span><br><span class="line">        content = {</span><br><span class="line">            Text(<span class="string">"BodyContent"</span>)</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//底部导航栏</span></span><br><span class="line">        bottomBar = {</span><br><span class="line">            BottomAppBar(</span><br><span class="line">                backgroundColor = materialBlue700</span><br><span class="line">            ) {</span><br><span class="line">                Text(text = <span class="string">"BottomAppBar"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  RadioButton</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20RadioButton/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-radiobutton-单选按钮"> Jetpack Compose学习 -------- RadioButton 单选按钮</span></h2>
<h3><span id="radiobutton-单选按钮-基本使用"> RadioButton 单选按钮 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">RadioButtonSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> radioOptions = listOf&lt;String&gt;(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>)</span><br><span class="line">    <span class="keyword">val</span> (selectedOption, onOptionSelected) = remember {</span><br><span class="line">        mutableStateOf(radioOptions[<span class="number">1</span>])</span><br><span class="line">    }</span><br><span class="line">    Column {</span><br><span class="line">        radioOptions.forEach { text -&gt;</span><br><span class="line">            Row(</span><br><span class="line">                Modifier</span><br><span class="line">                    .fillMaxWidth()</span><br><span class="line">                    .selectable(</span><br><span class="line">                        selected = text == selectedOption,</span><br><span class="line">                        onClick = {</span><br><span class="line">                            onOptionSelected(text)</span><br><span class="line">                        }</span><br><span class="line">                    )</span><br><span class="line">                    .padding(horizontal = <span class="number">16.</span>dp)</span><br><span class="line">            ) {</span><br><span class="line">                RadioButton(</span><br><span class="line">                    selected = (selectedOption == text),</span><br><span class="line">                    onClick = {</span><br><span class="line">                        onOptionSelected(text)</span><br><span class="line">                    }</span><br><span class="line">                )</span><br><span class="line">                Text(</span><br><span class="line">                    text = text,</span><br><span class="line">                    style = MaterialTheme.typography.body1.merge(),</span><br><span class="line">                    modifier = Modifier.padding(<span class="number">16.</span>dp)</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Shape</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Shape/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-shape-形状"> Jetpack Compose学习 -------- Shape 形状</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">ShapeDemo</span><span class="params">()</span></span> {</span><br><span class="line">     Column(</span><br><span class="line">         Modifier</span><br><span class="line">             .fillMaxWidth() </span><br><span class="line">     ) {</span><br><span class="line">         <span class="comment">//RectangleShape 矩形形状</span></span><br><span class="line">         ExampleBox(shape = RectangleShape)</span><br><span class="line">         <span class="comment">//CircleShape 圆圈形状</span></span><br><span class="line">         ExampleBox(shape = CircleShape)</span><br><span class="line">         <span class="comment">//RoundedCornerShape 圆角形状</span></span><br><span class="line">         ExampleBox(shape = RoundedCornerShape(<span class="number">10.</span>dp))</span><br><span class="line">         <span class="comment">//CutCornerShape 切角形状</span></span><br><span class="line">         ExampleBox(shape = CutCornerShape(<span class="number">10.</span>dp))</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Composable</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">ExampleBox</span><span class="params">(shape: <span class="type">Shape</span>)</span></span> {</span><br><span class="line">     Column(</span><br><span class="line">         Modifier</span><br><span class="line">             .fillMaxWidth()</span><br><span class="line">             .padding(<span class="number">10.</span>dp)</span><br><span class="line">             .wrapContentSize(Alignment.Center)</span><br><span class="line">     )</span><br><span class="line">     {</span><br><span class="line">         Box(</span><br><span class="line">             modifier = Modifier</span><br><span class="line">                 .size(<span class="number">100.</span>dp)</span><br><span class="line">                 .clip(shape)</span><br><span class="line">                 .background(Color.Blue)</span><br><span class="line">         )</span><br><span class="line">     }</span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Snackbar</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20Snackbar/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-snackbar"> Jetpack Compose学习 -------- Snackbar</span></h2>
<h3><span id="snackbar-基本使用"> Snackbar 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SnackbarDemo</span><span class="params">()</span></span> {</span><br><span class="line">    Column {</span><br><span class="line">        <span class="keyword">val</span> snackbarVisibilityState = remember {</span><br><span class="line">            mutableStateOf(<span class="literal">false</span>)</span><br><span class="line">        }</span><br><span class="line">        Button(</span><br><span class="line">            onClick = { snackbarVisibilityState.value = !snackbarVisibilityState.value }</span><br><span class="line">        ) {</span><br><span class="line">            <span class="keyword">if</span> (snackbarVisibilityState.value) {</span><br><span class="line">                Text(<span class="string">"隐藏 Snackbar"</span>)</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Text(<span class="string">"显示 Snackbar"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (snackbarVisibilityState.value) {</span><br><span class="line">            Snackbar(</span><br><span class="line">                action = {</span><br><span class="line">                    Button(onClick = {}) {</span><br><span class="line">                        Text(text = <span class="string">"MyAction"</span>)</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                modifier = Modifier.padding(<span class="number">10.</span>dp)</span><br><span class="line">            ) {</span><br><span class="line">                Text(<span class="string">"This is a snackbar!"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Modifier</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Modifier/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-modifier"> Jetpack Compose学习 -------- Modifier</span></h2>
<h3><span id="padding-设置各个ui的padding"> padding 设置各个UI的padding</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 给上下左右全部设置成同一个值</span></span><br><span class="line">Modifier.padding(<span class="number">10.</span>dp)</span><br><span class="line"><span class="comment">// 分别为左（开始）、上（上）、右（结束）、下（下）设值</span></span><br><span class="line">Modifier.padding(<span class="number">10.</span>dp, <span class="number">20.</span>dp, <span class="number">30.</span>dp, <span class="number">40.</span>dp)</span><br><span class="line"><span class="comment">// 分别为左右（水平）和上下（垂直）设值</span></span><br><span class="line">Modifier.padding(<span class="number">10.</span>dp, <span class="number">20.</span>dp)</span><br><span class="line"><span class="comment">//PaddingValues 与 padding 不一样</span></span><br><span class="line"><span class="comment">// 给上下左右全部设置成同一个值</span></span><br><span class="line">Modifier.padding(PaddingValues(<span class="number">10.</span>dp))</span><br><span class="line"><span class="comment">// 分别为左右（水平）和上下（垂直）设值</span></span><br><span class="line">Modifier.padding(PaddingValues(<span class="number">10.</span>dp, <span class="number">20.</span>dp))</span><br><span class="line"><span class="comment">//分别为左（开始）、上（上）、右（结束）、下（下）设值</span></span><br><span class="line">Modifier.padding(PaddingValues(<span class="number">10.</span>dp, <span class="number">20.</span>dp, <span class="number">30.</span>dp, <span class="number">40.</span>dp))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="fillmaxheightfillmaxwidthfillmaxsize-类似于match_parent填充整个父layout"> fillMaxHeight,fillMaxWidth,fillMaxSize 类似于match_parent,填充整个父layout</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//填充整个父Layout</span></span><br><span class="line">Modifier.fillMaxSize()</span><br><span class="line"><span class="comment">//填充整个父Layout的宽度</span></span><br><span class="line">Modifier.fillMaxWidth()</span><br><span class="line"><span class="comment">//填充整个父Layout的高度</span></span><br><span class="line">Modifier.fillMaxHeight()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="widthheighsize-设置content的宽度和高度"> width,heigh,size 设置Content的宽度和高度</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设置宽度</span></span><br><span class="line">Modifier.width(<span class="number">80.</span>dp)</span><br><span class="line"><span class="comment">//设置高度</span></span><br><span class="line">Modifier.height(<span class="number">80.</span>dp)</span><br><span class="line"><span class="comment">//设置 宽度和高度</span></span><br><span class="line">Modifier.size(<span class="number">100.</span>dp)</span><br><span class="line"><span class="comment">//设置 宽度,高度</span></span><br><span class="line">Modifier.size(<span class="number">100.</span>dp, <span class="number">100.</span>dp)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="widthin-heightin-sizein-设置content的宽度和高度的最大值和最小值"> widthIn, heightIn, sizeIn 设置Content的宽度和高度的最大值和最小值</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设置 最小宽度 最大宽度</span></span><br><span class="line">Modifier.widthIn(<span class="number">20.</span>dp, <span class="number">50.</span>dp)</span><br><span class="line"><span class="comment">//设置 最小高度 最大高度</span></span><br><span class="line">Modifier.heightIn(<span class="number">20.</span>dp, <span class="number">50.</span>dp)</span><br><span class="line"><span class="comment">//设置 最小宽度,最小高度,最大宽度,最大高度</span></span><br><span class="line">Modifier.sizeIn(<span class="number">20.</span>dp, <span class="number">20.</span>dp, <span class="number">50.</span>dp, <span class="number">50.</span>dp)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="wrapcontentheightwrapcontentwidthwrapcontentsize"> wrapContentHeight,wrapContentWidth,wrapContentSize,</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 高度 位于 顶部</span></span><br><span class="line">Modifier.wrapContentHeight(Alignment.Top)</span><br><span class="line"><span class="comment">// 高度 位于 底部</span></span><br><span class="line">Modifier.wrapContentHeight(Alignment.Bottom)</span><br><span class="line"><span class="comment">// 高度 位于 垂直居中</span></span><br><span class="line">Modifier.wrapContentHeight(Alignment.CenterVertically)</span><br><span class="line"><span class="comment">// 高度 位于 水平居中</span></span><br><span class="line">Modifier.wrapContentHeight(Alignment.CenterHorizontally)</span><br><span class="line"><span class="comment">// 宽度 位于 开始（左）</span></span><br><span class="line">Modifier.wrapContentWidth(Alignment.Start)</span><br><span class="line"><span class="comment">// 宽度 位于 结束（右）</span></span><br><span class="line">Modifier.wrapContentWidth(Alignment.End)</span><br><span class="line"><span class="comment">// 宽度 位于 水平居中</span></span><br><span class="line">Modifier.wrapContentWidth(Alignment.CenterHorizontally)</span><br><span class="line"><span class="comment">// 宽度 位于 垂直居中</span></span><br><span class="line">Modifier.wrapContentWidth(Alignment.CenterVertically)</span><br><span class="line"><span class="comment">//位置 位于 顶部 开始（左）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.TopStart)</span><br><span class="line"><span class="comment">//位置 位于 顶部 结束（右）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.TopEnd)</span><br><span class="line"><span class="comment">//位置 位于 顶部 水平居中</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.TopCenter)</span><br><span class="line"><span class="comment">//位置 位于 底部 开始（左）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.BottomStart)</span><br><span class="line"><span class="comment">//位置 位于 底部 结束（右）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.BottomEnd)</span><br><span class="line"><span class="comment">//位置 位于 底部 水平居中</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.BottomCenter)</span><br><span class="line"><span class="comment">//位置 位于 垂直居中 开始（左）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.CenterStart)</span><br><span class="line"><span class="comment">//位置 位于 垂直居中 结束（右）</span></span><br><span class="line">Modifier.wrapContentSize(Alignment.CenterEnd)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Slider</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20Slider/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-slider-拖动条"> Jetpack Compose学习 -------- Slider 拖动条</span></h2>
<h3><span id="slider-拖动条-基本使用"> Slider 拖动条 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SliderDemo</span><span class="params">()</span></span> {</span><br><span class="line">    Column(Modifier.padding(<span class="number">10.</span>dp)) {</span><br><span class="line">        <span class="keyword">val</span> sliderPosition = remember {</span><br><span class="line">            mutableStateOf(<span class="number">0f</span>)</span><br><span class="line">        }</span><br><span class="line">        Slider(value = sliderPosition.value, onValueChange = {</span><br><span class="line">            sliderPosition.value = it</span><br><span class="line">        })</span><br><span class="line">        Spacer(modifier = Modifier.height(<span class="number">5.</span>dp))</span><br><span class="line">        Text(<span class="string">"当前进度: <span class="subst">${sliderPosition.value.toString()}</span>"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">       <span class="keyword">val</span> sliderPosition = remember {</span><br><span class="line">           mutableStateOf(<span class="number">0f</span>)</span><br><span class="line">       }</span><br><span class="line">       Slider(</span><br><span class="line">           value = sliderPosition.value,</span><br><span class="line">           colors = SliderDefaults.colors(</span><br><span class="line">               <span class="comment">//圆圈的颜色</span></span><br><span class="line">               thumbColor = Color.White,</span><br><span class="line">               <span class="comment">//滑条颜色 (注 : 滑条默认颜色:inactiveTrackColor  默认是 与 activeTrackColor 一样 设置了 0.24f 透明度)</span></span><br><span class="line">               activeTrackColor = Color(<span class="number">0xFF0079D3</span>)</span><br><span class="line">           ),</span><br><span class="line">           onValueChange = {</span><br><span class="line">               sliderPosition.value = it</span><br><span class="line">           }</span><br><span class="line">       )</span><br><span class="line">   }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Surface</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20Surface/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-surface"> Jetpack Compose学习 -------- Surface</span></h2>
<h3><span id="用-surface-实现-card-的效果"> 用 Surface 实现 Card 的效果</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Surface(</span><br><span class="line">        <span class="comment">//设置形状</span></span><br><span class="line">        shape = RoundedCornerShape(<span class="number">10.</span>dp),</span><br><span class="line">        <span class="comment">// 设置阴影</span></span><br><span class="line">        elevation = <span class="number">10.</span>dp,</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            <span class="comment">// 外边距</span></span><br><span class="line">            .padding(<span class="number">15.</span>dp)</span><br><span class="line">            .clickable { }</span><br><span class="line">    ) {</span><br><span class="line">        Column(</span><br><span class="line">            <span class="comment">// 内边距</span></span><br><span class="line">            Modifier.padding(<span class="number">15.</span>dp)</span><br><span class="line">        ) {</span><br><span class="line">            Text(</span><br><span class="line">                buildAnnotatedString {</span><br><span class="line">                append(<span class="string">"welcome to "</span>)</span><br><span class="line">                withStyle(</span><br><span class="line">                    style = SpanStyle(</span><br><span class="line">                        color = Color(<span class="number">0xFF4552B8</span>),</span><br><span class="line">                        fontWeight = FontWeight.W900,</span><br><span class="line">                    )</span><br><span class="line">                ) {</span><br><span class="line">                    append(<span class="string">"Jetpack Compose Playground"</span>)</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">            Text(</span><br><span class="line">                buildAnnotatedString {</span><br><span class="line">                append(<span class="string">"Now you are in the "</span>)</span><br><span class="line">                withStyle(</span><br><span class="line">                    style = SpanStyle(</span><br><span class="line">                        fontWeight = FontWeight.W900,</span><br><span class="line">                    )</span><br><span class="line">                ) {</span><br><span class="line">                    append(<span class="string">"Card"</span>)</span><br><span class="line">                }</span><br><span class="line">                append(<span class="string">" section"</span>)</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Swipeable</title>
    <url>/2021/05/27/Jetpack%20Compose/Jetpack%20Compose%20Swipeable/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-swipeable-滑动"> Jetpack Compose学习 -------- Swipeable 滑动</span></h2>
<h3><span id="swipeable-滑动-基本使用"> Swipeable 滑动 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> blockSize = <span class="number">48.</span>dp</span><br><span class="line">    <span class="keyword">var</span> blockSizePx = with(LocalDensity.current) { blockSize.toPx() }</span><br><span class="line">    <span class="keyword">var</span> swipeableState = rememberSwipeableState(initialValue = Status.CLOSE)</span><br><span class="line">    <span class="keyword">var</span> anchors = mapOf(</span><br><span class="line">        <span class="number">0f</span> to Status.CLOSE,</span><br><span class="line">        blockSizePx to Status.OPEN</span><br><span class="line">    )</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(</span><br><span class="line">                height = blockSize,</span><br><span class="line">                width = blockSize * <span class="number">2</span></span><br><span class="line">            )</span><br><span class="line">            .background(Color.LightGray)</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                <span class="comment">//滑动</span></span><br><span class="line">                .swipeable(</span><br><span class="line">                    state = swipeableState,</span><br><span class="line">                    <span class="comment">//锚点，可以通过锚点设置在不同状态时所应该对应的偏移量信息</span></span><br><span class="line">                    anchors = anchors,</span><br><span class="line">                    <span class="comment">//常用作定制不同锚点间吸附效果的临界阈值</span></span><br><span class="line">                    <span class="comment">//常用有 FixedThreshold(Dp) 和 FractionalThreshold(Float)等</span></span><br><span class="line">                    thresholds = { from, to -&gt;</span><br><span class="line">                        <span class="keyword">if</span> (from == Status.CLOSE) {</span><br><span class="line">                            FractionalThreshold(<span class="number">0.3f</span>)</span><br><span class="line">                        } <span class="keyword">else</span> {</span><br><span class="line">                            FractionalThreshold(<span class="number">0.5f</span>)</span><br><span class="line">                        }</span><br><span class="line">                    },</span><br><span class="line">                    <span class="comment">//手势方向，被修饰组件的手势方向只能是水平或垂直</span></span><br><span class="line">                    orientation = Orientation.Horizontal,</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">//移动</span></span><br><span class="line">                .offset {</span><br><span class="line">                    <span class="comment">//整体移动</span></span><br><span class="line">                    IntOffset(swipeableState.offset.value.toInt(), <span class="number">0</span>)</span><br><span class="line">                }</span><br><span class="line">                .size(blockSize)</span><br><span class="line">                .background(Color.DarkGray)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Status</span> </span>{</span><br><span class="line">    CLOSE, OPEN</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习 Text</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20Text/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-text-文本"> Jetpack Compose学习 -------- Text 文本</span></h2>
<h3><span id="text-文字-基本属性"> Text 文字 基本属性</span></h3>
<ul>
<li>text: 显示的文本</li>
<li>modifier</li>
<li>color: 字体颜色</li>
<li>fontSize: 字体大小</li>
<li>fontStyle: 字体样式 （比如斜体）</li>
<li>fontWeight: 字体样式 (比如粗体)</li>
<li>fontFamily: 处理字体 (比如设置宋体等)</li>
<li>letterSpacing: 每个字符之间的间距</li>
<li>textDecoration: 文本的装饰，比如TextDecoration.Underline 添加下划线，比如TextDecoration.LineThrough 中线划线</li>
<li>textAlign: 设置文字对齐 对齐方式</li>
<li>lineHeight: 设置行高</li>
<li>maxLines: 最大行数</li>
<li>overflow: 当文字溢出的时候，比如…设置显示在最后</li>
<li>softWrap: 声明是否应在换行符处断开文本,默认是true</li>
<li>onTextLayout: 在计算新的文本布局时执行的回调</li>
<li>style: 文本样式</li>
</ul>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//垂直布局</span></span><br><span class="line">    Column() {</span><br><span class="line">        <span class="comment">//显示资源中的文字</span></span><br><span class="line">        Text(stringResource(id = R.string.app_name))</span><br><span class="line">        <span class="comment">//最多显示行数 , 溢出处理</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"你好呀陌生人，这是一个标题，不是很长，因为我想不出其他什么比较好的标题了"</span>,</span><br><span class="line">            <span class="comment">//宽度</span></span><br><span class="line">            modifier = Modifier.width(<span class="number">200.</span>dp),</span><br><span class="line">            <span class="comment">//设置 最多显示行数</span></span><br><span class="line">            maxLines = <span class="number">1</span>,</span><br><span class="line">            <span class="comment">//溢出处理 省略</span></span><br><span class="line">            overflow = TextOverflow.Ellipsis</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//文字颜色</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, color = Color.Blue)</span><br><span class="line">        <span class="comment">//文字大小</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, fontSize = <span class="number">30.</span>sp)</span><br><span class="line">        <span class="comment">//斜体</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, fontStyle = FontStyle.Italic)</span><br><span class="line">        <span class="comment">//粗体</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, fontWeight = FontWeight.Bold)</span><br><span class="line">        <span class="comment">//文字对齐 (居中)</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World Hello World\nHello World"</span>,</span><br><span class="line">            <span class="comment">//文本的对齐方式</span></span><br><span class="line">            textAlign = TextAlign.Center</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//设置宽度与高度</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            <span class="comment">//居中对齐</span></span><br><span class="line">            textAlign = TextAlign.Center,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                <span class="comment">//宽度</span></span><br><span class="line">                .width(<span class="number">100.</span>dp)</span><br><span class="line">                <span class="comment">//高度</span></span><br><span class="line">                .height(<span class="number">30.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//字体设置</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, fontFamily = FontFamily.Serif)</span><br><span class="line">        <span class="comment">//字体设置</span></span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>, fontFamily = FontFamily.SansSerif)</span><br><span class="line">        <span class="comment">//自定义 fontFamily</span></span><br><span class="line">        <span class="keyword">val</span> firaSansFamily = FontFamily(</span><br><span class="line">            Font(R.font.firasans_light, FontWeight.Light),</span><br><span class="line">            Font(R.font.firasans_regular, FontWeight.Normal)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//字体设置</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            fontFamily = firaSansFamily,</span><br><span class="line">            fontWeight = FontWeight.Light</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//字体设置</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            fontFamily = firaSansFamily,</span><br><span class="line">            fontWeight = FontWeight.Normal</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//文本中间绘制线</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            style = TextStyle(textDecoration = TextDecoration.LineThrough)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//文本下方绘制线  下划线</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            style = TextStyle(textDecoration = TextDecoration.Underline)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//设置多个 textDecoration</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            style = TextStyle(</span><br><span class="line">                textDecoration =</span><br><span class="line">                TextDecoration.combine(</span><br><span class="line">                    listOf(</span><br><span class="line">                        TextDecoration.LineThrough,</span><br><span class="line">                        TextDecoration.Underline</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//设置样式</span></span><br><span class="line">        Text(text = buildAnnotatedString {</span><br><span class="line">            withStyle(</span><br><span class="line">                style = SpanStyle(</span><br><span class="line">                    <span class="comment">//字体颜色</span></span><br><span class="line">                    color = Color.Blue</span><br><span class="line">                )</span><br><span class="line">            ) {</span><br><span class="line">                append(<span class="string">"H"</span>)</span><br><span class="line">            }</span><br><span class="line">            append(<span class="string">"ello "</span>)</span><br><span class="line">            withStyle(</span><br><span class="line">                style = SpanStyle(</span><br><span class="line">                    <span class="comment">//粗体</span></span><br><span class="line">                    fontWeight = FontWeight.Bold,</span><br><span class="line">                    <span class="comment">//字体颜色</span></span><br><span class="line">                    color = Color.Green</span><br><span class="line">                )</span><br><span class="line">            ) {</span><br><span class="line">                append(<span class="string">"W"</span>)</span><br><span class="line">            }</span><br><span class="line">            append(<span class="string">"orld"</span>)</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">//设置段落样式</span></span><br><span class="line">        Text(text = buildAnnotatedString {</span><br><span class="line">            withStyle(</span><br><span class="line">                style = ParagraphStyle(</span><br><span class="line">                    <span class="comment">//行高间距</span></span><br><span class="line">                    lineHeight = <span class="number">40.</span>sp</span><br><span class="line">                )</span><br><span class="line">            ) {</span><br><span class="line">                withStyle(</span><br><span class="line">                    style = SpanStyle(</span><br><span class="line">                        <span class="comment">//字体颜色</span></span><br><span class="line">                        color = Color.Yellow</span><br><span class="line">                    )</span><br><span class="line">                ) {</span><br><span class="line">                    append(<span class="string">"Hello\n"</span>)</span><br><span class="line">                }</span><br><span class="line">                withStyle(</span><br><span class="line">                    style = SpanStyle(</span><br><span class="line">                        <span class="comment">//粗体</span></span><br><span class="line">                        fontWeight = FontWeight.Bold,</span><br><span class="line">                        <span class="comment">//字体颜色</span></span><br><span class="line">                        color = Color.Red</span><br><span class="line">                    )</span><br><span class="line">                ) {</span><br><span class="line">                    append(<span class="string">"World\n"</span>)</span><br><span class="line">                }</span><br><span class="line">                append(<span class="string">"Compose"</span>)</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">//设置最大行数</span></span><br><span class="line">        Text(</span><br><span class="line">            <span class="comment">//重复字符串</span></span><br><span class="line">            text = <span class="string">"Hello World "</span>.repeat(<span class="number">20</span>),</span><br><span class="line">            <span class="comment">//设置行数</span></span><br><span class="line">            maxLines = <span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//文字溢出处理</span></span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>.repeat(<span class="number">20</span>),</span><br><span class="line">            <span class="comment">//设置最大行数</span></span><br><span class="line">            maxLines = <span class="number">3</span>,</span><br><span class="line">            <span class="comment">//溢出处理：省略号</span></span><br><span class="line">            overflow = TextOverflow.Ellipsis</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 将内部 Text 组件的 alpha 强调程度设置为高</span></span><br><span class="line">        <span class="comment">// 注意: MaterialTheme 已经默认将强调程度设置为 high</span></span><br><span class="line">        CompositionLocalProvider(LocalContentAlpha provides ContentAlpha.high) {</span><br><span class="line">            Text(<span class="string">"这里是high强调效果"</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 将内部 Text 组件的 alpha 强调程度设置为中</span></span><br><span class="line">        CompositionLocalProvider(LocalContentAlpha provides ContentAlpha.medium) {</span><br><span class="line">            Text(<span class="string">"这里是medium强调效果"</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 将内部 Text 组件的 alpha 强调程度设置为禁用</span></span><br><span class="line">        CompositionLocalProvider(LocalContentAlpha provides ContentAlpha.disabled) {</span><br><span class="line">            Text(<span class="string">"这里是禁用后的效果"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="selectioncontainer-选择文字"> SelectionContainer 选择文字</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//选择文字</span></span><br><span class="line"><span class="comment">//默认情况下，可组合项不可选择，这意味着在默认情况下用户无法从您的应用中选择和复制文字。</span></span><br><span class="line"><span class="comment">//要启用文字选择，需要使用 SelectionContainer 可组合项封装文字元素</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SelectableText</span><span class="params">()</span></span> {</span><br><span class="line">    Text(text = <span class="string">"Hello World"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//DisableSelection 为可选择区域的特定部分停用选择功能</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PartiallySelectableText</span><span class="params">()</span></span> {</span><br><span class="line">    SelectionContainer {</span><br><span class="line">        Column {</span><br><span class="line">            Text(<span class="string">"This text is selectable"</span>)</span><br><span class="line">            Text(<span class="string">"This one too"</span>)</span><br><span class="line">            Text(<span class="string">"This one as well"</span>)</span><br><span class="line">            <span class="comment">//组合项来封装不可选择的部分</span></span><br><span class="line">            DisableSelection {</span><br><span class="line">                Text(<span class="string">"But not this one"</span>)</span><br><span class="line">                Text(<span class="string">"Neither this one"</span>)</span><br><span class="line">            }</span><br><span class="line">            Text(<span class="string">"But again, you can select this one"</span>)</span><br><span class="line">            Text(<span class="string">"And this one too"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    Text(</span><br><span class="line">        text = <span class="string">"Hello World Hello World Hello World"</span>,</span><br><span class="line">        modifier = Modifier.clickable(</span><br><span class="line">            onClick = {</span><br><span class="line">                Log.d(<span class="string">"onClick"</span>, <span class="string">"你点击了此文本"</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//取消点击波纹</span></span><br><span class="line">            indication = <span class="literal">null</span>,</span><br><span class="line">            <span class="comment">//取消点击波纹</span></span><br><span class="line">            interactionSource = MutableInteractionSource()</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//clickable 获取点击文字的位置</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleClickableText</span><span class="params">()</span></span> {</span><br><span class="line">    ClickableText(</span><br><span class="line">        text = AnnotatedString(<span class="string">"Click Me"</span>),</span><br><span class="line">        onClick = { offset -&gt;</span><br><span class="line">            Log.d(<span class="string">"ClickableText"</span>, <span class="string">"<span class="subst">${offset}</span> -th character is clicked."</span>)</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//点击注解</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AnnotatedClickableText</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> annotatedText = buildAnnotatedString {</span><br><span class="line">        append(<span class="string">"Click "</span>)</span><br><span class="line">        <span class="comment">//我们将此URL注释附加到以下内容，直到调用`pop（）`为止</span></span><br><span class="line">        pushStringAnnotation(</span><br><span class="line">            tag = <span class="string">"URL"</span>,</span><br><span class="line">            <span class="keyword">annotation</span> = <span class="string">"https://developer.android.com"</span></span><br><span class="line">        )</span><br><span class="line">        withStyle(</span><br><span class="line">            style = SpanStyle(</span><br><span class="line">                <span class="comment">//字体颜色</span></span><br><span class="line">                color = Color.Red,</span><br><span class="line">                <span class="comment">//粗体</span></span><br><span class="line">                fontWeight = FontWeight.Bold</span><br><span class="line">            )</span><br><span class="line">        ) {</span><br><span class="line">            append(<span class="string">"here"</span>)</span><br><span class="line">        }</span><br><span class="line">        pop()</span><br><span class="line">    }</span><br><span class="line">    ClickableText(</span><br><span class="line">        text = annotatedText,</span><br><span class="line">        onClick = { offset -&gt;</span><br><span class="line">            <span class="comment">//判断点击的位置是否是 url 注解中</span></span><br><span class="line">            annotatedText.getStringAnnotations(</span><br><span class="line">                tag = <span class="string">"URL"</span>,</span><br><span class="line">                start = offset,</span><br><span class="line">                end = offset</span><br><span class="line">            ).firstOrNull()?.let { <span class="keyword">annotation</span> -&gt;</span><br><span class="line">                Log.d(<span class="string">"Clicked URL"</span>, <span class="keyword">annotation</span>.item)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  Switch</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20Switch/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-switch-开关"> Jetpack Compose学习 -------- Switch 开关</span></h2>
<h3><span id="switch-开关-基本使用"> Switch 开关 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SwitchSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> checkedState = remember {</span><br><span class="line">        mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line">    Switch(checked = checkedState.value,</span><br><span class="line">        onCheckedChange = {</span><br><span class="line">            checkedState.value = it</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习 TextField</title>
    <url>/2021/05/25/Jetpack%20Compose/Jetpack%20Compose%20TextField/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-textfield-输入框"> Jetpack Compose学习 -------- TextField 输入框</span></h2>
<h3><span id="textfield-输入框-基本使用"> TextField 输入框 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BaseTextFieldDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> textState = rememberSaveable {</span><br><span class="line">        mutableStateOf(<span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">    Column {</span><br><span class="line">        TextField(</span><br><span class="line">            <span class="comment">//文本框里的文本内容</span></span><br><span class="line">            value = textState.value,</span><br><span class="line">            <span class="comment">//文本框输入内容时候的回调</span></span><br><span class="line">            onValueChange = {</span><br><span class="line">                textState.value = it</span><br><span class="line">            })</span><br><span class="line">        Text(text = <span class="string">"您输入的内容: <span class="subst">${textState.value}</span>"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> phone = rememberSaveable {</span><br><span class="line">        mutableStateOf(<span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">    Column {</span><br><span class="line">        TextField(</span><br><span class="line">            <span class="comment">//文本框里的文本内容</span></span><br><span class="line">            value = phone.value,</span><br><span class="line">            <span class="comment">//文本框输入内容时候的回调</span></span><br><span class="line">            onValueChange = {</span><br><span class="line">                phone.value = it</span><br><span class="line">            },</span><br><span class="line">            modifier = Modifier.fillMaxWidth(),</span><br><span class="line">            <span class="comment">//启用</span></span><br><span class="line">            enabled = <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//只读</span></span><br><span class="line">            readOnly = <span class="literal">false</span>,</span><br><span class="line">            label = {</span><br><span class="line">                Text(text = <span class="string">"手机号码"</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//在没有输入内容的时候显示，类似于 hint</span></span><br><span class="line">            placeholder = {</span><br><span class="line">                Text(text = <span class="string">"请输入手机号码"</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//显示在文本框左边的控件</span></span><br><span class="line">            leadingIcon = {</span><br><span class="line">                Icon(Icons.Default.Phone, <span class="literal">null</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//显示在文本框末尾的控件</span></span><br><span class="line">            trailingIcon = {</span><br><span class="line">                Icon(Icons.Default.Cancel, <span class="literal">null</span>)</span><br><span class="line">            },</span><br><span class="line">            <span class="comment">//当前文本字段 是否 为 错误的</span></span><br><span class="line">            isError = <span class="literal">false</span>,</span><br><span class="line">            <span class="comment">//形状 圆角</span></span><br><span class="line">            shape = RoundedCornerShape(<span class="number">5.</span>dp)</span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.size(<span class="number">20.</span>dp))</span><br><span class="line">        Text(text = <span class="string">"您输入的内容: <span class="subst">${phone.value}</span>"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextFieldDemo</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text = it</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//单行</span></span><br><span class="line">        singleLine = <span class="literal">true</span></span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text = it</span><br><span class="line">        },</span><br><span class="line">        leadingIcon = {</span><br><span class="line">            Icon(Icons.Filled.Search, <span class="literal">null</span>)</span><br><span class="line">        },</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text = it</span><br><span class="line">        },</span><br><span class="line">        leadingIcon = {</span><br><span class="line">            Text(<span class="string">"联系人"</span>)</span><br><span class="line">        },</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="textfield-输入和修改文字"> TextField 输入和修改文字</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line">   <span class="comment">//TextField 输入和修改文字</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleFilledTextFieldSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text = remember { mutableStateOf(<span class="string">"Hello"</span>) }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text.value,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text.value = it</span><br><span class="line">        },</span><br><span class="line">        label = {</span><br><span class="line">            Text(text = <span class="string">"Label"</span>)</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//轮廓样式 输入框</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SimpleOutlinedTextFieldSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text = remember {</span><br><span class="line">        mutableStateOf(<span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">    OutlinedTextField(</span><br><span class="line">        value = text.value,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text.value = it</span><br><span class="line">        },</span><br><span class="line">        label = {</span><br><span class="line">            Text(text = <span class="string">"Label"</span>)</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 TextField 样式</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">StyledTextField</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text = remember {</span><br><span class="line">        mutableStateOf(<span class="string">"Hello\nWorld\nInvisible"</span>)</span><br><span class="line">    }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text.value,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text.value = it</span><br><span class="line">        },</span><br><span class="line">        label = {</span><br><span class="line">            Text(text = <span class="string">"Enter text"</span>)</span><br><span class="line">        },</span><br><span class="line">        maxLines = <span class="number">2</span>,</span><br><span class="line">        textStyle = TextStyle(color = Color.Blue, fontWeight = FontWeight.Bold),</span><br><span class="line">        modifier = Modifier.padding(<span class="number">20.</span>dp)</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 TextField 格式</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">PasswordTextField</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> password = rememberSaveable {</span><br><span class="line">        mutableStateOf(<span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">    TextField(</span><br><span class="line">        value = password.value,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            password.value = it</span><br><span class="line">        },</span><br><span class="line">        label = { Text(text = <span class="string">"Enter password"</span>) },</span><br><span class="line">        <span class="comment">//密码样式</span></span><br><span class="line">        visualTransformation = PasswordVisualTransformation(),</span><br><span class="line">        <span class="comment">//设置键盘选项 密码</span></span><br><span class="line">        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password)</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ComposableSample</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = {</span><br><span class="line">            text = it</span><br><span class="line">        },</span><br><span class="line">        leadingIcon = {</span><br><span class="line">            Icon(Icons.Filled.Search, <span class="literal">null</span>)</span><br><span class="line">        },</span><br><span class="line">        colors = TextFieldDefaults.textFieldColors(</span><br><span class="line">            textColor = Color(<span class="number">0xFF0079D3</span>),</span><br><span class="line">            backgroundColor = Color.Transparent</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">textFieldColors</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="comment">// 输入的文字颜色</span></span></span></span><br><span class="line"><span class="params"><span class="function">    textColor: <span class="type">Color</span> = LocalContentColor.current.copy(LocalContentAlpha.current)</span></span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时，已有的文字颜色</span></span><br><span class="line">    disabledTextColor: Color = textColor.copy(ContentAlpha.disabled),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入框的背景颜色，当设置为 Color.Transparent 时，将透明</span></span><br><span class="line">    backgroundColor: Color = MaterialTheme.colors.onSurface.copy(alpha = BackgroundOpacity),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入框的光标颜色</span></span><br><span class="line">    cursorColor: Color = MaterialTheme.colors.primary,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 TextField 的 isError 参数为 true 时，光标的颜色</span></span><br><span class="line">    errorCursorColor: Color = MaterialTheme.colors.error,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当输入框处于焦点时，底部指示器的颜色</span></span><br><span class="line">    focusedIndicatorColor: Color = MaterialTheme.colors.primary.copy(alpha = ContentAlpha.high),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当输入框不处于焦点时，底部指示器的颜色</span></span><br><span class="line">    unfocusedIndicatorColor: Color = MaterialTheme.colors.onSurface.copy(alpha = UnfocusedIndicatorLineOpacity),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时，底部指示器的颜色</span></span><br><span class="line">    disabledIndicatorColor: Color = unfocusedIndicatorColor.copy(alpha = ContentAlpha.disabled),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 TextField 的 isError 参数为 true 时，底部指示器的颜色</span></span><br><span class="line">    errorIndicatorColor: Color = MaterialTheme.colors.error,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TextField 输入框前头的颜色</span></span><br><span class="line">    leadingIconColor: Color = MaterialTheme.colors.onSurface.copy(alpha = IconOpacity),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时 TextField 输入框前头的颜色</span></span><br><span class="line">    disabledLeadingIconColor: Color = leadingIconColor.copy(alpha = ContentAlpha.disabled),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 TextField 的 isError 参数为 true 时 TextField 输入框前头的颜色</span></span><br><span class="line">    errorLeadingIconColor: Color = leadingIconColor,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TextField 输入框尾部的颜色</span></span><br><span class="line">    trailingIconColor: Color = MaterialTheme.colors.onSurface.copy(alpha = IconOpacity),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时 TextField 输入框尾部的颜色</span></span><br><span class="line">    disabledTrailingIconColor: Color = trailingIconColor.copy(alpha = ContentAlpha.disabled),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 TextField 的 isError 参数为 true 时 TextField 输入框尾部的颜色</span></span><br><span class="line">    errorTrailingIconColor: Color = MaterialTheme.colors.error,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当输入框处于焦点时，Label 的颜色</span></span><br><span class="line">    focusedLabelColor: Color = MaterialTheme.colors.primary.copy(alpha = ContentAlpha.high),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当输入框不处于焦点时，Label 的颜色</span></span><br><span class="line">    unfocusedLabelColor: Color = MaterialTheme.colors.onSurface.copy(ContentAlpha.medium),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时，Label 的颜色</span></span><br><span class="line">    disabledLabelColor: Color = unfocusedLabelColor.copy(ContentAlpha.disabled),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当 TextField 的 isError 参数为 true 时，Label 的颜色</span></span><br><span class="line">    errorLabelColor: Color = MaterialTheme.colors.error,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Placeholder 的颜色</span></span><br><span class="line">    placeholderColor: Color = MaterialTheme.colors.onSurface.copy(ContentAlpha.medium),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用 TextField 时，placeholder 的颜色</span></span><br><span class="line">    disabledPlaceholderColor: Color = placeholderColor.copy(ContentAlpha.disabled)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Jetpack Compose学习  TopAppBar</title>
    <url>/2021/05/26/Jetpack%20Compose/Jetpack%20Compose%20TopAppBar/</url>
    <content><![CDATA[<h2><span id="jetpack-compose学习-topappbar-标题"> Jetpack Compose学习 -------- TopAppBar 标题</span></h2>
<h3><span id="topappbar-标题-基本使用"> TopAppBar 标题 基本使用</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TopAppBarSample</span><span class="params">()</span></span> {</span><br><span class="line">    Column {</span><br><span class="line">        TopAppBar(</span><br><span class="line">            elevation = <span class="number">4.</span>dp,</span><br><span class="line">            title = {</span><br><span class="line">                Text(<span class="string">"标题内容"</span>)</span><br><span class="line">            },</span><br><span class="line">            backgroundColor = MaterialTheme.colors.primarySurface,</span><br><span class="line">            navigationIcon = {</span><br><span class="line">                IconButton(onClick = { }) {</span><br><span class="line">                    Icon(imageVector = Icons.Filled.ArrowBack, contentDescription = <span class="string">"返回"</span>)</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            actions = {</span><br><span class="line">                IconButton(onClick = {}) {</span><br><span class="line">                    Icon(imageVector = Icons.Filled.Share, contentDescription = <span class="string">"分享"</span>)</span><br><span class="line">                }</span><br><span class="line">                IconButton(onClick = {}) {</span><br><span class="line">                    Icon(imageVector = Icons.Filled.Settings, contentDescription = <span class="string">"设置"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">        Text(text = <span class="string">"Hello World"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
        <category>Jetpack</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>Jetpack Compose</tag>
      </tags>
  </entry>
  <entry>
    <title>FileUtils帮助类</title>
    <url>/2020/07/02/android/FileUtils%E5%B8%AE%E5%8A%A9%E7%B1%BB/</url>
    <content><![CDATA[<h3><span id="fileutils帮助类"> FileUtils帮助类</span></h3>
<p>在<a href="https://github.com/Blankj/AndroidUtilCode">AndroidUtilCode</a>的基础下使用</p>
<ul>
<li>将assets文件夹中的内容写入本地</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 将assets文件夹中的内容写入本地</span><br><span class="line">  * @param dirName String 文件夹名称</span><br><span class="line">  * @param fileName String 文件名称及后缀名</span><br><span class="line">  * @return String?  SDCard/Android/data/应用包名/files/ 目录/文件</span><br><span class="line">  */</span><br><span class="line"> private suspend fun getExternalFilePath(dirName: String, fileName: String): String? =</span><br><span class="line">     withContext(Dispatchers.IO) {</span><br><span class="line">         //创建文件夹</span><br><span class="line">         val mFileDir = Utils.getApp().applicationContext.getExternalFilesDir(dirName)</span><br><span class="line">         if (mFileDir != null) {</span><br><span class="line">             //创建文件</span><br><span class="line">             val mFilePath: String = File(mFileDir, fileName).absolutePath</span><br><span class="line">             if (FileUtils.isFileExists(mFilePath)) {</span><br><span class="line">                 return@withContext mFilePath</span><br><span class="line">                 //将assets文件夹中的内容写入本地</span><br><span class="line">             } else if (ResourceUtils.copyFileFromAssets(fileName, mFilePath)) {</span><br><span class="line">                 return@withContext mFilePath</span><br><span class="line">             } else {</span><br><span class="line">                 return@withContext null</span><br><span class="line">             }</span><br><span class="line">         }</span><br><span class="line">         return@withContext null</span><br><span class="line">     }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>EventBus封装</title>
    <url>/2019/07/05/android/EventBus%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h1><span id="eventbus封装"> EventBus封装</span></h1>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">package com.example.eventbus.utils</span><br><span class="line"></span><br><span class="line">import com.example.gaokao.event.MessageEvent</span><br><span class="line">import org.greenrobot.eventbus.EventBus</span><br><span class="line">import org.greenrobot.eventbus.meta.SubscriberInfoIndex</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @author: xue</span><br><span class="line"> * @description EventBus封装</span><br><span class="line"> * @date: 2019/7/5</span><br><span class="line"> */</span><br><span class="line">class EventBusUtil {</span><br><span class="line">    companion object {</span><br><span class="line">        /**</span><br><span class="line">         * 使用索引加速</span><br><span class="line">         * 建议在Application中使用</span><br><span class="line">         */</span><br><span class="line">        fun installIndex(index: SubscriberInfoIndex) {</span><br><span class="line">            EventBus.builder().addIndex(index).installDefaultEventBus()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 注册</span><br><span class="line">         */</span><br><span class="line">        fun register(subscribe: Any) {</span><br><span class="line">            if (!EventBus.getDefault().isRegistered(subscribe)) {</span><br><span class="line">                EventBus.getDefault().register(subscribe)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 取消注册</span><br><span class="line">         */</span><br><span class="line">        fun unregister(subscribe: Any) {</span><br><span class="line">            EventBus.getDefault().unregister(subscribe)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发布一个订阅事件</span><br><span class="line">         * 必须先注册，才能接收到发布的事件，有点类似于 startActivityForResult（）方法</span><br><span class="line">         */</span><br><span class="line">        fun postEvent(event: MessageEvent) {</span><br><span class="line">            EventBus.getDefault().post(event)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 发布粘性事件（可以先发布事件，在注册后在接收）</span><br><span class="line">         * 粘性事件将最新的信息保存在内存中，取消原始消息，执行最新的消息；</span><br><span class="line">         * 只有注册后，才能接收消息，如果没有注册，消息将保留在内存中。</span><br><span class="line">         */</span><br><span class="line">        fun postStickyEvent(event: MessageEvent) {</span><br><span class="line">            EventBus.getDefault().postSticky(event)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 移除指定的粘性订阅事件</span><br><span class="line">         *  @param eventType 事件类型</span><br><span class="line">         */</span><br><span class="line">        fun &lt;T&gt; removeStickyEvent(eventType: Class&lt;T&gt;) {</span><br><span class="line">            var stickyEvent: T = EventBus.getDefault().getStickyEvent(eventType)</span><br><span class="line">            if (stickyEvent != null) {</span><br><span class="line">                EventBus.getDefault().removeStickyEvent(stickyEvent)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        /**</span><br><span class="line">         * 移除指定的粘性订阅事件</span><br><span class="line">         *  @param eventType 事件类型</span><br><span class="line">         */</span><br><span class="line">        fun removeStickyEvent(eventType:Any) {</span><br><span class="line">            var stickyEvent = EventBus.getDefault().getStickyEvent(eventType as Class&lt;Any&gt;?)</span><br><span class="line">            if (stickyEvent != null) {</span><br><span class="line">                EventBus.getDefault().removeStickyEvent(stickyEvent)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 移除所有的粘性订阅事件</span><br><span class="line">         */</span><br><span class="line">        fun removeAllStickyEvents(){</span><br><span class="line">            EventBus.getDefault().removeAllStickyEvents()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 取消事件</span><br><span class="line">         * 优先级高的订阅者可以终止事件往下传递</span><br><span class="line">         * 只有在事件通过时才能调用（即在事件接收方法中调用）</span><br><span class="line">         *  @param event 事件</span><br><span class="line">         */</span><br><span class="line">        fun cancelEventDelivery(event:Any){</span><br><span class="line">            EventBus.getDefault().cancelEventDelivery(event)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 获取 eventbus 单例</span><br><span class="line">         */</span><br><span class="line">        fun getEventBus():EventBus{</span><br><span class="line">            return EventBus.getDefault()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>EventBus</tag>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Http 学习 v1</title>
    <url>/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/</url>
    <content><![CDATA[<h1><span id="http-学习-v1"> Http 学习 v1</span></h1>
<h2><span id="http-的定义"> HTTP 的定义</span></h2>
<p>⼀种⽹络传输协议，位于 TCP / IP 协议族的最顶层——应⽤层。</p>
<p>Hypertext Transfer Protocol，超⽂本传输协议，和 HTML (Hypertext Markup Language 超⽂本标记语⾔) ⼀起诞⽣，⽤于在⽹络上请求和传输 HTML 内容。</p>
<h2><span id="http-的工作方式"> HTTP 的⼯作⽅式</span></h2>
<h3><span id="浏览器"> 浏览器 :</span></h3>
<ul>
<li>⽤户输⼊地址后回⻋或点击链接</li>
<li>浏览器拼装 HTTP 报⽂并发送请求给服务器</li>
<li>服务器处理请求后发送响应报⽂给浏览器</li>
<li>浏览器解析响应报⽂并使⽤渲染引擎显示到界⾯</li>
</ul>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/1.png" alt=""></p>
<h3><span id="手机-app"> ⼿机 App</span></h3>
<ul>
<li>⽤户点击或界⾯⾃动触发联⽹需求</li>
<li>Android 代码调⽤拼装 HTTP 报⽂并发送请求到服务器</li>
<li>服务器处理请求后发送响应报⽂给⼿机</li>
<li>Android 代码处理响应报⽂并作出相应处理（如储存数据、加⼯数据、显示数据到界⾯）</li>
</ul>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/2.png" alt=""></p>
<h2><span id="url-和-http-报文"> URL 和 HTTP 报⽂</span></h2>
<h3><span id="url-格式"> URL 格式</span></h3>
<p>三部分：协议类型、服务器地址(和端⼝号)、路径(Path)</p>
<p>协议类型://服务器地址[:端⼝号]路径</p>
<p><a href="http://hencoder.com/users?gender=male">http://hencoder.com/users?gender=male</a></p>
<h3><span id="报文格式"> 报⽂格式</span></h3>
<h4><span id="请求报文"> 请求报⽂</span></h4>
<ul>
<li>请求报文格式：请求行、Headers、Body</li>
<li>请求行：Method、Path、HTTP version</li>
<li>Method：GET、POST、PUT、DELETE …</li>
<li>Headers：请求的 meta data</li>
<li>Body：要发送给服务器的内容</li>
</ul>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/3.png" alt=""></p>
<h4><span id="响应报文"> 响应报⽂</span></h4>
<ul>
<li>响应报文格式：状态行、Headers、Body</li>
<li>状态行：HTTP version、Status Code、Status Message</li>
<li>Status Code: 1xx(信息)、2xx(成功)、3(重定向)、4(客户端错误)、5(服务器错误)</li>
</ul>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/4.png" alt=""></p>
<h2><span id="request-method-请求方法"> Request Method 请求⽅法</span></h2>
<h3><span id="get"> GET</span></h3>
<ul>
<li>⽤于获取资源</li>
<li>对服务器数据不进⾏修改</li>
<li>不发送 Body</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">GET /users/1 HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@GET("/users/{id}")</span><br><span class="line">Call&lt;User&gt; getUser(@Path("id") String id, @Query("gender") String gender);</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="post"> POST</span></h3>
<ul>
<li>⽤于增加或修改资源</li>
<li>发送给服务器的内容写在 Body ⾥⾯</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">POST /users HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 13</span><br><span class="line">name=rengwuxian&amp;gender=male</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@FormUrlEncoded</span><br><span class="line">@POST("/users")</span><br><span class="line">Call&lt;User&gt; addUser(@Field("name") String name, @Field("gender") String</span><br><span class="line">gender);</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="put"> PUT</span></h3>
<ul>
<li>⽤于修改资源</li>
<li>发送给服务器的内容写在 Body ⾥⾯</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">PUT /users/1 HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 13</span><br><span class="line">gender=female</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@FormUrlEncoded</span><br><span class="line">@PUT("/users/{id}")</span><br><span class="line">Call&lt;User&gt; updateGender(@Path("id") String id, @Field("gender") String</span><br><span class="line">gender);</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="delete"> DELETE</span></h3>
<ul>
<li>⽤于删除资源</li>
<li>不发送 Body</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">DELETE /users/1 HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@DELETE("/users/{id}")</span><br><span class="line">Call&lt;User&gt; getUser(@Path("id") String id, @Query("gender") String gender);</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="head"> HEAD</span></h3>
<ul>
<li>和 GET 使⽤⽅法完全相同</li>
<li>和 GET 唯⼀区别在于，返回的响应中没有 Body</li>
</ul>
<h2><span id="status-code-状态码"> Status Code 状态码</span></h2>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/5.png" alt=""></p>
<ul>
<li>1xx：临时性消息。如：100 （继续发送）、101（正在切换协议）</li>
<li>2xx：成功。最典型的是 200（OK）、201（创建成功）。</li>
<li>3xx：重定向。如 301（永久移动）、302（暂时移动）、304（内容未改变）。</li>
<li>4xx：客户端错误。如 400（客户端请求错误）、401（认证失败）、403（被禁⽌）、404（找不到内容）。</li>
<li>5xx：服务器错误。如 500（服务器内部错误）。</li>
</ul>
<h2><span id="header"> Header</span></h2>
<p>作⽤：HTTP 消息的元数据（ metadata ）。</p>
<h3><span id="host"> Host</span></h3>
<p>⽬标主机。注意：不是在⽹络上⽤于寻址的，⽽是在⽬标服务器上⽤于定位⼦服务器的。</p>
<h3><span id="content-type"> Content-Type</span></h3>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/6.png" alt=""></p>
<p>指定 Body 的类型。主要有四类：</p>
<h4><span id="1-texthtml"> 1. text/html</span></h4>
<p>请求 Web ⻚⾯是返回响应的类型，Body 中返回 html ⽂本。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Length: 853</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;meta charset="utf-8"&gt;</span><br><span class="line">......</span><br></pre></td></tr></tbody></table></figure>
<h4><span id="2-x-www-form-urlencoded"> 2. x-www-form-urlencoded</span></h4>
<p>Web ⻚⾯纯⽂本表单的提交⽅式</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">POST /users HTTP/1.1</span><br><span class="line">Host: api.github.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 27</span><br><span class="line">name=rengwuxian&amp;gender=male</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@FormUrlEncoded</span><br><span class="line">@POST("/users")</span><br><span class="line">Call&lt;User&gt; addUser(@Field("name") String name, @Field("gender") String</span><br><span class="line">gender);</span><br></pre></td></tr></tbody></table></figure>
<h4><span id="3-multitypeform-data"> 3. multitype/form-data</span></h4>
<p>Web ⻚⾯含有⼆进制⽂件时的提交⽅式。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">POST  /users  HTTP/1.1</span><br><span class="line">Host: hencoder.com</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Length: 2382</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Disposition: form-data; name="name"</span><br><span class="line"></span><br><span class="line">rengwuxian</span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW</span><br><span class="line">Content-Disposition: form-data; name="avatar"; filename="avatar.jpg"</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">JFIFHHvOwX9jximQrWa......</span><br><span class="line">------WebKitFormBoundary7MA4YWxkTrZu0gW--</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@Multipart</span><br><span class="line">@POST("/users")</span><br><span class="line">Call&lt;User&gt; addUser(@Part("name") RequestBody name, @Part("avatar")</span><br><span class="line">RequestBody avatar);</span><br><span class="line">...</span><br><span class="line">RequestBody namePart = RequestBody.create(MediaType.parse("text/plain"),</span><br><span class="line">nameStr);</span><br><span class="line">RequestBody avatarPart = RequestBody.create(MediaType.parse("image/jpeg"),</span><br><span class="line">avatarFile);</span><br><span class="line">api.addUser(namePart, avatarPart);</span><br></pre></td></tr></tbody></table></figure>
<h4><span id="4-applicationjson-imagejpeg-applicationzip"> 4. application/json , image/jpeg , application/zip …</span></h4>
<p>单项内容（⽂本或⾮⽂本都可以），⽤于 Web Api 的响应或者 POST / PUT 的请求</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//请求中提交 JSON</span><br><span class="line"></span><br><span class="line">POST /users HTTP/1.1</span><br><span class="line">Host: hencoder.com</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Content-Length: 38</span><br><span class="line">{"name":"rengwuxian","gender":"male"}</span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@POST("/users")</span><br><span class="line">Call&lt;User&gt; addUser(@Body("user") User user);</span><br><span class="line">...</span><br><span class="line">// 需要使⽤ JSON 相关的 Converter</span><br><span class="line">api.addUser(user);</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//响应中返回 JSON</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 234</span><br><span class="line">[{"login":"mojombo","id":1,"node_id":"MDQ6VXNl</span><br><span class="line">cjE=","avatar_url":"https://avatars0.githubuse</span><br><span class="line">rcontent.com/u/1?v=4","gravat......</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//请求中提交⼆进制内容</span><br><span class="line"></span><br><span class="line">POST /user/1/avatar HTTP/1.1</span><br><span class="line">Host: hencoder.com</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line">Content-Length: 1575</span><br><span class="line">JFIFHH9......</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>对应 Retrofit 的代码：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">@POST("users/{id}/avatar")</span><br><span class="line">Call&lt;User&gt; updateAvatar(@Path("id") String id, @Body RequestBody avatar);</span><br><span class="line">...</span><br><span class="line">RequestBody avatarBody = RequestBody.create(MediaType.parse("image/jpeg"),</span><br><span class="line">avatarFile);</span><br><span class="line">api.updateAvatar(id, avatarBody)</span><br></pre></td></tr></tbody></table></figure>
<p>相应中返回⼆进制内容</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">content-type: image/jpeg</span><br><span class="line">content-length: 1575</span><br><span class="line">JFIFHH9......</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="content-length"> Content-Length</span></h3>
<p>指定 Body 的⻓度（字节）</p>
<h3><span id="transfer-chunked-分块传输编码-chunked-transfer-encoding"> Transfer: chunked (分块传输编码 Chunked Transfer Encoding)</span></h3>
<p><img src="/2021/05/29/android/HTTP%E5%AD%A6%E4%B9%A01/7.png" alt=""></p>
<p>⽤于当响应发起时，内容⻓度还没能确定的情况下。和 Content-Length 不同时使⽤。⽤途是尽早给出响应，减少⽤户等待。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">4</span><br><span class="line">Chun</span><br><span class="line">9</span><br><span class="line">ked Trans</span><br><span class="line">12</span><br><span class="line">fer Encoding</span><br><span class="line">0</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="location"> Location</span></h3>
<p>指定重定向的⽬标 URL</p>
<h3><span id="user-agent"> User-Agent</span></h3>
<p>⽤户代理，即是谁实际发送请求、接受响应的，例如⼿机浏览器、某款⼿机 App。</p>
<h3><span id="range-accept-range"> Range / Accept-Range</span></h3>
<p>按范围取数据</p>
<ul>
<li>Accept-Range: bytes 响应报⽂中出现，表示服务器⽀持按字节来取范围数据</li>
<li>Range: bytes=<start>-<end> 请求报⽂中出现，表示要取哪段数据</end></start></li>
<li>Content-Range:<start>-<end>/total 响应报⽂中出现，表示发送的是哪段数据</end></start></li>
</ul>
<p>作⽤：断点续传、多线程下载。</p>
<h2><span id="其他-headers"> 其他 Headers</span></h2>
<ul>
<li>Accept: 客户端能接受的数据类型。如 text/html</li>
<li>Accept-Charset: 客户端接受的字符集。如 utf-8</li>
<li>Accept-Encoding: 客户端接受的压缩编码类型。如 gzip</li>
<li>Content-Encoding：压缩类型。如 gzip</li>
</ul>
<h2><span id="cache"> Cache</span></h2>
<p>作⽤：在客户端或中间⽹络节点缓存数据，降低从服务器取数据的频率，以提⾼⽹络性能。</p>
<h2><span id="rest"> REST</span></h2>
<p>REST HTTP 即正确使⽤ HTTP。<br>
* 使⽤资源的格式来定义 URL<br>
* 规范地使⽤ method 来定义⽹络请求操作<br>
* 规范地使⽤ status code 来表示响应状态<br>
* 其他符合 HTTP 规范的设计准则</p>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>WebView 图片选择</title>
    <url>/2019/01/20/android/WebView%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1><span id="webview-图片选择"> WebView 图片选择</span></h1>
<p>最近需要做webview选择图片，就找了一些资料，记录一下。<br>
本文参考:<a href="https://blog.csdn.net/djcken/article/details/46379929">Android使用WebView从相册/拍照中添加图片</a></p>
<h2><span id="自定义webchromeclient"> 自定义WebChromeClient</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import android.net.Uri;</span><br><span class="line">import android.webkit.ValueCallback;</span><br><span class="line">import android.webkit.WebChromeClient;</span><br><span class="line">import android.webkit.WebView;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * WebView 上传文件</span><br><span class="line"> */</span><br><span class="line">public class ReWebChomeClient extends WebChromeClient {</span><br><span class="line"></span><br><span class="line">    private OpenFileChooserCallBack mOpenFileChooserCallBack;</span><br><span class="line"></span><br><span class="line">    public ReWebChomeClient(OpenFileChooserCallBack openFileChooserCallBack) {</span><br><span class="line">        mOpenFileChooserCallBack = openFileChooserCallBack;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //For Android 3.0+</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType) {</span><br><span class="line">        mOpenFileChooserCallBack.openFileChooserCallBack(uploadMsg, acceptType);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // For Android &lt; 3.0</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg) {</span><br><span class="line">        openFileChooser(uploadMsg, "");</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // For Android  &gt; 4.1.1</span><br><span class="line">    public void openFileChooser(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType, String capture) {</span><br><span class="line">        openFileChooser(uploadMsg, acceptType);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    // For Android 5.0+</span><br><span class="line">    @Override</span><br><span class="line">    public boolean onShowFileChooser(WebView webView, ValueCallback&lt;Uri[]&gt; filePathCallback, FileChooserParams fileChooserParams) {</span><br><span class="line">        mOpenFileChooserCallBack.showFileChooserCallBack(filePathCallback);</span><br><span class="line">        return true;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public interface OpenFileChooserCallBack {</span><br><span class="line">        void openFileChooserCallBack(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType);</span><br><span class="line"></span><br><span class="line">        void showFileChooserCallBack(ValueCallback&lt;Uri[]&gt; filePathCallback);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2><span id="使用rewebchomeclient"> 使用ReWebChomeClient</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//定义变量</span><br><span class="line">private ValueCallback&lt;Uri&gt; uploadMessage;</span><br><span class="line">private ValueCallback&lt;Uri[]&gt; uploadMessageAboveL;</span><br><span class="line">//用来判断是否需要给WebView返回null</span><br><span class="line">private int web_image = 0;</span><br><span class="line">private String picFilePath;//图片保存路径</span><br><span class="line">private int IDENTITY_IMAGE_REQUEST_CODE_Album = 1;//相册</span><br><span class="line">private int IDENTITY_IMAGE_REQUEST_CODE_Photograph = 2;// 拍照</span><br><span class="line">private int FILE_CHOOSER_RESULT_CODE = 3;//图片选择</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">//设置WebChromeClient</span><br><span class="line">mWebView.setWebChromeClient(mWebChromeClient);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">private ReWebChomeClient mWebChromeClient = new ReWebChomeClient(new ReWebChomeClient.OpenFileChooserCallBack() {</span><br><span class="line">        @Override</span><br><span class="line">        public void openFileChooserCallBack(ValueCallback&lt;Uri&gt; uploadMsg, String acceptType) {//Android &gt;=3.0</span><br><span class="line">            uploadMessage = uploadMsg;</span><br><span class="line">            openImageChooserActivity();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void showFileChooserCallBack(ValueCallback&lt;Uri[]&gt; filePathCallback) {// Android &gt;= 5.0</span><br><span class="line">            uploadMessageAboveL = filePathCallback;</span><br><span class="line">            openImageChooserActivity();</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="选择图片"> 选择图片</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">  private void openImageChooserActivity() {</span><br><span class="line">        web_image = 0;//判断是否已经选择了</span><br><span class="line">        //自定义选择图片提示框</span><br><span class="line">        AlertDialog dialog = new AlertDialog.Builder(mContext).setItems(R.array.head_type_array, (dialog1, which) -&gt; {</span><br><span class="line">        //如果点击了dialog的选项，修改变量，不要在setOnDismissListener()方法中</span><br><span class="line">            web_image = 1;</span><br><span class="line">            selected(which);</span><br><span class="line">        }).create();</span><br><span class="line">        dialog.show();</span><br><span class="line">        dialog.setOnDismissListener(dialog12 -&gt; {</span><br><span class="line">            if (web_image == 0) {</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void selected(int position) {</span><br><span class="line">        switch (position) {</span><br><span class="line">            case 0://相册</span><br><span class="line">                getPermissionsStorage();</span><br><span class="line">                break;</span><br><span class="line">            case 1:// 拍照</span><br><span class="line">                getPermissionsCamera();</span><br><span class="line">                break;</span><br><span class="line">           case 2://选择图片</span><br><span class="line">                Intent i = new Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">                i.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">                i.setType("image/*");</span><br><span class="line">                startActivityForResult(Intent.createChooser(i, "Image Chooser"), FILE_CHOOSER_RESULT_CODE);</span><br><span class="line">                break;</span><br><span class="line">        }</span><br><span class="line">    </span><br><span class="line">     @Override</span><br><span class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) {</span><br><span class="line">        super.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        if (requestCode == IDENTITY_IMAGE_REQUEST_CODE_Photograph) {//拍照</span><br><span class="line">            if (resultCode == Activity.RESULT_OK) {</span><br><span class="line">                // 添加图片</span><br><span class="line">                if (picFilePath == null) {</span><br><span class="line">                    picFilePath = Datas.picPathSD + BitmapUtil.pictime;</span><br><span class="line">                }</span><br><span class="line">                getImageWebView(picFilePath);</span><br><span class="line">            } else {</span><br><span class="line">                // 删除图片</span><br><span class="line">                BitmapUtil.deleteTempFile(picFilePath);</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            }</span><br><span class="line">        } else if (requestCode == IDENTITY_IMAGE_REQUEST_CODE_Album) {//相册</span><br><span class="line">            if (resultCode == 1020) {</span><br><span class="line">                String str_images = StringUtils.null2Length0(data.getStringExtra("images"));</span><br><span class="line">                getImageWebView(str_images);</span><br><span class="line">            } else {</span><br><span class="line">                getImageWebView(null);</span><br><span class="line">            }</span><br><span class="line">        } else if (requestCode == FILE_CHOOSER_RESULT_CODE) {//选择图片</span><br><span class="line">            if (null == uploadMessage &amp;&amp; null == uploadMessageAboveL) {</span><br><span class="line">                return;</span><br><span class="line">            }</span><br><span class="line">            Uri result = data == null || resultCode != RESULT_OK ? null : data.getData();</span><br><span class="line">            if (uploadMessageAboveL != null) {</span><br><span class="line">                onActivityResultAboveL(requestCode, resultCode, data);</span><br><span class="line">            } else if (uploadMessage != null) {</span><br><span class="line">                uploadMessage.onReceiveValue(result);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private void getImageWebView(String str_image) {//将图片路径返回给webview</span><br><span class="line">        if (!StringUtils.isEmpty(str_image)) {</span><br><span class="line">            Uri uri = getImageContentUri(mContext, new File(str_image));</span><br><span class="line">            if (uploadMessageAboveL != null) {</span><br><span class="line">                Uri[] uris = new Uri[]{uri};</span><br><span class="line">                uploadMessageAboveL.onReceiveValue(uris);</span><br><span class="line">                uploadMessageAboveL = null;</span><br><span class="line">            } else if (uploadMessage != null) {</span><br><span class="line">                uploadMessage.onReceiveValue(uri);</span><br><span class="line">                uploadMessage = null;</span><br><span class="line">            }</span><br><span class="line">        } else {</span><br><span class="line">            if (uploadMessageAboveL != null) {</span><br><span class="line">                uploadMessageAboveL.onReceiveValue(null);</span><br><span class="line">                uploadMessageAboveL = null;</span><br><span class="line">            } else if (uploadMessage != null) {</span><br><span class="line">                uploadMessage.onReceiveValue(null);</span><br><span class="line">                uploadMessage = null;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">//选择图片</span><br><span class="line">    @TargetApi(Build.VERSION_CODES.LOLLIPOP)</span><br><span class="line">    private void onActivityResultAboveL(int requestCode, int resultCode, Intent intent) {</span><br><span class="line">        if (uploadMessageAboveL == null) {</span><br><span class="line">            return;</span><br><span class="line">        }</span><br><span class="line">        Uri[] results = null;</span><br><span class="line">        if (resultCode == Activity.RESULT_OK) {</span><br><span class="line">            if (intent != null) {</span><br><span class="line">                String dataString = intent.getDataString();</span><br><span class="line">                LogUtils.e("web", dataString);</span><br><span class="line">                ClipData clipData = intent.getClipData();</span><br><span class="line">                if (clipData != null) {</span><br><span class="line">                    results = new Uri[clipData.getItemCount()];</span><br><span class="line">                    for (int i = 0; i &lt; clipData.getItemCount(); i++) {</span><br><span class="line">                        ClipData.Item item = clipData.getItemAt(i);</span><br><span class="line">                        results[i] = item.getUri();</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                if (dataString != null) {</span><br><span class="line">                    results = new Uri[]{Uri.parse(dataString)};</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        uploadMessageAboveL.onReceiveValue(results);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() {</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        uploadMessage = null;</span><br><span class="line">        uploadMessageAboveL = null;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">//将文件File转成Uri</span><br><span class="line">    public Uri getImageContentUri(Context context, File imageFile) {</span><br><span class="line">        String filePath = imageFile.getAbsolutePath();</span><br><span class="line">        Cursor cursor = context.getContentResolver().query(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,</span><br><span class="line">                new String[]{MediaStore.Images.Media._ID}, MediaStore.Images.Media.DATA + "=? ",</span><br><span class="line">                new String[]{filePath}, null);</span><br><span class="line">        if (cursor != null &amp;&amp; cursor.moveToFirst()) {</span><br><span class="line">            int id = cursor.getInt(cursor.getColumnIndex(MediaStore.MediaColumns._ID));</span><br><span class="line">            Uri baseUri = Uri.parse("content://media/external/images/media");</span><br><span class="line">            return Uri.withAppendedPath(baseUri, "" + id);</span><br><span class="line">        } else {</span><br><span class="line">            if (imageFile.exists()) {</span><br><span class="line">                ContentValues values = new ContentValues();</span><br><span class="line">                values.put(MediaStore.Images.Media.DATA, filePath);</span><br><span class="line">                return context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);</span><br><span class="line">            } else {</span><br><span class="line">                return null;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>视频时长(Long)转字符串(String)_Java</title>
    <url>/2020/07/02/android/%E8%A7%86%E9%A2%91%E6%97%B6%E9%95%BF(Long)%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2(String)_Java/</url>
    <content><![CDATA[<h3><span id="视频时长long转字符串string_java"> 视频时长(Long)转字符串(String)_Java</span></h3>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">   * 时长转字符</span><br><span class="line">   * @param mDuration 时长（毫秒）</span><br><span class="line">   * @param isMillisecond 是否需要毫秒，true:需要，false:不用</span><br><span class="line">   * @return </span><br><span class="line">   */</span><br><span class="line">  public static String getTimeDurationString(@NonNull Long mDuration, @NonNull Boolean isMillisecond) {</span><br><span class="line">      Long hours = 0L, minutes = 0L, seconds = 0L, millisecond = null;</span><br><span class="line">      if (isMillisecond) {</span><br><span class="line">          //毫秒</span><br><span class="line">          millisecond = mDuration % TimeConstants.SEC;</span><br><span class="line">      }</span><br><span class="line">      hours = mDuration / TimeConstants.HOUR;</span><br><span class="line">      minutes = (mDuration / TimeConstants.MIN)-(hours*60);</span><br><span class="line">      seconds = (mDuration / TimeConstants.SEC)-(minutes*60)-(hours*3600);</span><br><span class="line">      String str_duration = getTimeString(hours, minutes, seconds, millisecond);</span><br><span class="line">      return str_duration;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  private static String getTimeString(@NonNull Long hours, @NonNull Long minutes, @NonNull Long seconds, Long millisecond) {</span><br><span class="line">      if (millisecond != null) {</span><br><span class="line">          return String.format("%02d:%02d:%02d.%02d", hours, minutes, seconds, millisecond);</span><br><span class="line">      } else {</span><br><span class="line">          return String.format("%02d:%02d:%02d", hours, minutes, seconds);</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>FFmpeg常用命令</title>
    <url>/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1><span id="ffmpeg常用命令"> FFmpeg常用命令</span></h1>
<h3><span id="改变帧率码率和文件大小"> 改变帧率，码率和文件大小</span></h3>
<ul>
<li>帧率</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//改变视频 input.mp4 的帧率，生成帧率为30的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -r 30 output.mp4</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>码率</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//改变视频 input.mp4 的帧率，生成码率为 1.5 Mb/s(兆比特)的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -b 1.5M output.mp4</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>最大输出文件大小</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//改变视频 input.mp4 的文件大小，生成文件大小为10MB的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -fs 10MB output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="调整视频分辨率"> 调整视频分辨率</span></h3>
<ul>
<li>分辨率：w*h （w:像素宽度，h:像素高度）</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//改变视频 input.mp4 的分辨率，生成分辨率为320*240的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -s 320*240 output.mp4</span><br><span class="line"></span><br><span class="line">//改变视频 input.mp4 的分辨率(使用 scale filter 替代 -s )，生成分辨率为 320*240 的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vf scale=320:240 output.mp4</span><br><span class="line"></span><br><span class="line">//改变视频 input.mp4 的分辨率，生成分辨率为640*480的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -s 640*480 output.mp4</span><br><span class="line"></span><br><span class="line">//改变视频 input.mp4 的分辨率，生成分辨率为 vga (640*480)的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -s vga output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="裁剪-填充视频"> 裁剪、填充视频</span></h3>
<ul>
<li>视频裁剪</li>
</ul>
<p><img src="/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ff_4_2.png" alt=""></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//裁剪矩形框---靠左1/3</span><br><span class="line">ffmpeg -i input.mp4 -vf crop=iw/3:ih:0:0 output.mp4</span><br><span class="line"></span><br><span class="line">//裁剪矩形框---靠中1/3</span><br><span class="line">ffmpeg -i input.mp4 -vf crop=iw/3:ih:iw/3:0 output.mp4</span><br><span class="line"></span><br><span class="line">//裁剪矩形框---靠右1/3</span><br><span class="line">ffmpeg -i input.mp4 -vf crop=iw/3:ih:iw/3*2:0 output.mp4</span><br><span class="line"></span><br><span class="line">//裁剪中间的一半(默认从输入视频的中间区域开始)</span><br><span class="line">ffmpeg -i input.mp4 -vf crop=iw/2:ih/2 output.mp4</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>视频填充</li>
</ul>
<p><img src="/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ff_5_2.png" alt=""></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//改变视频的宽高比(4:3)，生成宽高比为16:9的新视频 </span><br><span class="line">ffmpeg -i input -vf pad=ih*16/9:ih:(ow-iw)/2:0:color output</span><br><span class="line"></span><br><span class="line">//改变视频的宽高比(4:3)，生成宽高比为16:9的新视频(颜色默认:黑色) </span><br><span class="line">ffmpeg -i input -vf pad=ih*16/9:ih:(ow-iw)/2:0 output</span><br><span class="line"></span><br><span class="line">//改变视频的宽高比(16:9)，生成宽高比为4:3的新视频 </span><br><span class="line">ffmpeg -i input -vf pad=iw:iw*3/4:0:(oh-ih)/2:0:color output</span><br><span class="line"></span><br><span class="line">ffmpeg -i input -vf pad=iw:iw*3/4:0:(oh-ih)/2:0 output</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="翻转-旋转视频"> 翻转、旋转视频</span></h3>
<ul>
<li>视频翻转</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//水平翻转</span><br><span class="line">ffplay -f lavfi -i testsrc -vf hflip</span><br><span class="line"></span><br><span class="line">//垂直翻转</span><br><span class="line">ffplay -f lavfi -i testsrc -vf vflip</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>视频旋转<br>
参数：transpose<br>
0 : 逆时针方向旋转90° 并且垂直翻转<br>
1 : 顺时针方向旋转90°<br>
2 : 逆时针方向旋转90°<br>
3 : 顺时针方向旋转90° 并且垂直翻转</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//逆时针方向旋转90° 并且垂直翻转</span><br><span class="line">ffmpeg -i input.mp4 -vf transpose=0 output.mp4</span><br><span class="line"></span><br><span class="line">//顺时针方向旋转90° </span><br><span class="line">ffmpeg -i input.mp4 -vf transpose=1 output.mp4</span><br><span class="line"></span><br><span class="line">//逆时针方向旋转90° </span><br><span class="line">ffmpeg -i input.mp4 -vf transpose=2 output.mp4</span><br><span class="line"></span><br><span class="line">//顺时针方向旋转90° 并且垂直翻转</span><br><span class="line">ffmpeg -i input.mp4 -vf transpose=3 output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="模糊-锐化视频"> 模糊、锐化视频</span></h3>
<ul>
<li>模糊视频</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//模糊视频 input.mp4 ，生成一个luma半径为1.5,luma权值为1的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vf boxblur=1.5:1 output.mp4</span><br><span class="line"></span><br><span class="line">//模糊视频 input.mp4 ，生成一个luma半径为1,luma亮度为0.8,亮度阈值为0的新视频 output.mp4 (不影响图像的轮廓,使用smartblur滤波器处理)</span><br><span class="line">ffmpeg -i input.mp4 -vf smartblur=5:0.8:0 output.mp4</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>锐化视频 (unsharp 滤波器)</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//锐化视频 input.mp4 ，生成一个新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vf unsharp output.mp4</span><br><span class="line"></span><br><span class="line">//锐化视频 input.mp4 ，生成一个 5*5的矩形luma 强度为 1 色度值为-2 的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vf unsharp=6:6:-2 output.mp4</span><br><span class="line"></span><br><span class="line">//增强去噪 (denoise3d视频滤波器)</span><br><span class="line">ffmpeg -i input.mp4 -vf mp=denoise3d output.mp4</span><br><span class="line"></span><br><span class="line">//视频降噪 (hqdn3d过滤器)</span><br><span class="line">ffmpeg -i input.mp4 -vf hqdn3d output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="画中画"> 画中画</span></h3>
<p><img src="/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ff_6_2.png" alt=""></p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//视频叠加 input1:视频背景,input2:前景图</span><br><span class="line">ffmpeg -i input1 -i input2 -filter_complex overlay=x:y output</span><br><span class="line"></span><br><span class="line">ffmpeg -i input1 -vf movie=input2[logo];[in][logo]overlay=x:y output</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加logo到视频左上角，生成新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -i logo.png -filter_complex overlay output.mp4</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加logo到视频右上角，生成新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w output.mp4</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加logo到视频右下角，生成新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w:H-h output.mp4</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加logo到视频左下角，生成新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=0:H-h output.mp4</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加logo(5s后显示)，生成新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -itsoffset 5 -i logo.png -filter_complex overlay output.mp4</span><br><span class="line"></span><br><span class="line">//视频 input.mp4 添加计时器，生成新视频 output.mp4</span><br><span class="line"></span><br><span class="line">//生成计时器</span><br><span class="line">ffmpeg -f lavfi -i testsrc -vf crop=61:52:224:94 -t 142 timer.ogg</span><br><span class="line"></span><br><span class="line">//添加计时器到视频中</span><br><span class="line">ffmpeg -i input.mp4 -i timer.ogg -filter_complex overlay=451 output.mp4</span><br><span class="line"></span><br><span class="line">//添加计时器到视频中(将计时器缩小到原来的1/2,并放到底部)</span><br><span class="line">ffmpeg -i input.mp4 -vf movie=timer.ogg,scale=15:14[tm];[in][tm] overlay=248:371 output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="在视频上添加文字"> 在视频上添加文字</span></h3>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//字体文件(arial.ttf)复制到当前目录下</span><br><span class="line">ffplay -f lavfi -i color=c=white -vf drawtext=fontfile=arial.ttf:text=Welcome</span><br><span class="line"></span><br><span class="line">//文字位置(x:水平方向,y:垂直方向)</span><br><span class="line">//tw:文本宽度,w:帧宽,(w-tw)/2:水平居中,w-tw:文本对齐到右边</span><br><span class="line">//th:文本高度,w:帧高,(h-th)/2:垂直居中,h-th:文本对齐到底部</span><br><span class="line">//drawtext(滤镜):如果其中有空格,将包含在成对单引号或成对双引号中</span><br><span class="line">ffplay -f lavfi -i color=c=white -vf drawtext="fontfile=arial.ttf:text='hello world':x=(w-tw)/2:y=(h-th)/2"</span><br><span class="line"></span><br><span class="line">//fontcolor:文字颜色,fontsize:文字大小,color:背景颜色</span><br><span class="line">//背景色:蓝色,字体颜色:黄色,字体大小:30</span><br><span class="line">ffplay -f lavfi -i color=c=blue -vf drawtext="fontfile=arial.ttf:text='hello world':x=(w-tw)/2:y=(h-th)/2:fontcolor=yellow:fontsize=30"</span><br><span class="line"></span><br><span class="line">//水平方向上的文字运动</span><br><span class="line">//t:时间(单位:s),n:移动像素</span><br><span class="line">//从右往左方向向上移动,每秒移动n个像素: x = w - t*n</span><br><span class="line">//从左往右方向向上移动,每秒移动n个像素: x = w + t*n</span><br><span class="line"></span><br><span class="line">//顶部移动</span><br><span class="line">ffmpeg -f lavfi -i color=c=blue -vf drawtext="fontfile=arial.ttf:text='hello world':x=w-t*50:fontcolor=yellow:fontsize=30" output</span><br><span class="line"></span><br><span class="line">//底部滚动</span><br><span class="line">ffmpeg -f lavfi -i color=c=blue -vf drawtext="fontfile=arial.ttf:textfile=info.txt:x=w-t*50:y=h-th:fontcolor=yellow:fontsize=30" output</span><br><span class="line"></span><br><span class="line">//垂直方向文字滚动</span><br><span class="line">ffmpeg -i input.mp4 -vf drawtext="fontfile=arial.ttf:textfile=Credits:x=(w-tw)/2:y=h-t*100:fontcolor=white:fontsize=30" output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="视频文件格式转化"> 视频文件格式转化</span></h3>
<p><img src="/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ff_7_2.png" alt=""></p>
<p><img src="/2020/06/29/ffmpeg/FFmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/ff_8_2.png" alt=""></p>
<table>
<thead>
<tr>
<th>格式（视频）</th>
<th>编解码器</th>
<th>其他数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>.avi</td>
<td>mpeg4</td>
<td>mpeg4 (Simple profile), yuv420p; audio: mp3</td>
</tr>
<tr>
<td>.flv</td>
<td>flv1</td>
<td>yuv420p; audio: mp3</td>
</tr>
<tr>
<td>.mkv</td>
<td>h264</td>
<td>h264 (High), yuvj420p; audio: vorbis codec, fltp sample format</td>
</tr>
<tr>
<td>.mov</td>
<td>h264</td>
<td>h264 (High), yuvj420p; audio: aac (mp4a)</td>
</tr>
<tr>
<td>.mp4</td>
<td>h264</td>
<td>h264 (High), yuvj420p; audio: aac (mp4a)</td>
</tr>
<tr>
<td>.mpg</td>
<td>mpeg1video</td>
<td>yuv420p; audio: mp2</td>
</tr>
<tr>
<td>.ogg</td>
<td>theora</td>
<td>yuv422p, bitrate very low; audio excluded during conversion</td>
</tr>
<tr>
<td>.ts</td>
<td>mpeg2video</td>
<td>yuv422p; audio: mp2</td>
</tr>
<tr>
<td>.webm</td>
<td>vp8</td>
<td>yuv420p; audio: vorbis codec, fltp sample format</td>
</tr>
<tr>
<td><strong>格式(音频)</strong></td>
<td><strong>编解码器</strong></td>
<td><strong>其他数据</strong></td>
</tr>
<tr>
<td>.aac</td>
<td>aac</td>
<td>libvo_aacenc, bitrate 128 kb/s</td>
</tr>
<tr>
<td>.flac</td>
<td>flac</td>
<td>FLAC (Free Lossless Audio Codec), bitrate 128 kb/s</td>
</tr>
<tr>
<td>.m4a</td>
<td>aac</td>
<td>mp4a, bitrate 128 kb/s</td>
</tr>
<tr>
<td>.mp2</td>
<td>mp2</td>
<td>MPEG Audio Layer 2, bitrate 128 kb/s</td>
</tr>
<tr>
<td>.mp3</td>
<td>mp3</td>
<td>libmp3lame, bitrate 128 kb/s</td>
</tr>
<tr>
<td>.wav</td>
<td>pcm_s16le</td>
<td>PCM (Pulse Code Modulation), uncompressed</td>
</tr>
<tr>
<td>.wma</td>
<td>wmav2</td>
<td>Windows Media Audio</td>
</tr>
</tbody>
</table>
<ul>
<li>重写相同命名的输出文件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">ffmpeg -y -i input.avi output.mp4</span><br></pre></td></tr></tbody></table></figure>
<h3><span id="时间操作"> 时间操作</span></h3>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//通过视频 input.mp4 ，生成一个时长为120s的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -t 120 output.mp4</span><br><span class="line"></span><br><span class="line">//通过视频 input.mp4 ，生成一个时长为30s帧率为25的新视频 output.mp4</span><br><span class="line">ffmpeg -i input.mp4 -t 30 -r 25 output.mp4</span><br><span class="line"></span><br><span class="line">//设置一个10分钟25fps的视频</span><br><span class="line">ffmpeg -i video.avi -vframes 15000 video_10_minute.avi</span><br><span class="line"></span><br><span class="line">//设置延迟转换 (从10s开始进行转换)</span><br><span class="line">ffmpeg -i input.avi -ss 10 output.mp4</span><br><span class="line">//提取媒体文件中部分内容 (提取视频第5分钟的内容)</span><br><span class="line">ffmpeg -i video.avi -ss 240 -t 60  clip_5th_minute.mpg</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>ffmpeg</category>
      </categories>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter练习 - flutter基本控件</title>
    <url>/2018/12/26/flutter/flutter%E7%BB%83%E4%B9%A0%20-%20flutter%E5%9F%BA%E6%9C%AC%E6%8E%A7%E4%BB%B6/</url>
    <content><![CDATA[<h1><span id="flutter-基本控件"> Flutter 基本控件</span></h1>
<h2><span id="widget"> Widget</span></h2>
<ol>
<li>StatelessWidget — 只能用来展示信息，不能有用户交互</li>
<li>StatefulWidget —   可以通过改变状态使得 UI 发生变化</li>
</ol>
<h2><span id="文本-text"> 文本 Text</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return Text("text");</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="图片-image"> 图片 Image</span></h2>
<ol>
<li>资源：Image.asset(name);</li>
<li>文件：Image.file(file);</li>
<li>内存：Image.memory(bytes);</li>
<li>网络：Image.network(src);</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return Image.network(</span><br><span class="line">      "http://www.zhangjiaxue.cn/images/avatar.jpg",</span><br><span class="line">      width: 150.0,</span><br><span class="line">      height: 150.0,</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="按钮-flatbutton-raisedbutton"> 按钮（ FlatButton ，RaisedButton ）</span></h2>
<ol>
<li>FlatButton</li>
<li>RaisedButton</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    var flatBtn = FlatButton(</span><br><span class="line">      //按钮被点击的时候得到回调</span><br><span class="line">      onPressed: () =&gt; print('FlatButton pressed'),</span><br><span class="line">      //设置按钮的内容</span><br><span class="line">      child: Text('FlatButton BUTTON'),</span><br><span class="line">    );</span><br><span class="line">    var raisedButton = RaisedButton(</span><br><span class="line">      onPressed: () =&gt; print('RaisedButton pressed'),</span><br><span class="line">      child: Text('RaisedButton BUTTON'),</span><br><span class="line">    );</span><br><span class="line">    return raisedButton;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="文本输入框-textfield"> 文本输入框 TextField</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">   return Scaffold(</span><br><span class="line">      appBar: AppBar(title: Text("输入")),</span><br><span class="line">      body: TextField(),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="显示弹框-dialog"> 显示弹框 dialog</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">   return RaisedButton(</span><br><span class="line">        child: Text("点击按钮弹出Dialog"),</span><br><span class="line">        onPressed: () {</span><br><span class="line">          showDialog(</span><br><span class="line">              // 第一个 context 是参数名，第二个 context 是 State 的成员变量</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (_) {</span><br><span class="line">                return AlertDialog(</span><br><span class="line">                  // dialog 的内容</span><br><span class="line">                  content: Text("提示框"),</span><br><span class="line">                  // actions 设置 dialog 的按钮</span><br><span class="line">                  actions: &lt;Widget&gt;[</span><br><span class="line">                    FlatButton(</span><br><span class="line">                      child: Text('OK'),</span><br><span class="line">                      // 用户点击按钮后，关闭弹框</span><br><span class="line">                      onPressed: () =&gt; Navigator.pop(context),</span><br><span class="line">                    )</span><br><span class="line">                  ],</span><br><span class="line">                );</span><br><span class="line">              });</span><br><span class="line">        });</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="布局"> 布局</span></h2>
<ol>
<li>Container（容器）</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return Container(</span><br><span class="line">      padding: EdgeInsets.all(8.0),</span><br><span class="line">      margin: EdgeInsets.all(4.0),</span><br><span class="line">      width: 200.0,</span><br><span class="line">      height: 200.0,</span><br><span class="line">      decoration: BoxDecoration(</span><br><span class="line">        // 背景色</span><br><span class="line">        color: Colors.grey,</span><br><span class="line">        // 圆角</span><br><span class="line">        borderRadius: BorderRadius.circular(5.0),</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">      // 把文本放在 Container 的中间</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text('text'),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>Row(水平布局)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    //水平布局</span><br><span class="line">    return Row(</span><br><span class="line">      // 只有一个子元素的 widget，一般使用 child 参数来设置；Row 可以包含多个子控件，</span><br><span class="line">      // 对应的则是 children。</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text('text1'),</span><br><span class="line">        Text('text2'),</span><br><span class="line">        Text('text3'),</span><br><span class="line">        Text('text4'),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>Column(竖直布局)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    //垂直布局</span><br><span class="line">    return Column(</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        Text('text1'),</span><br><span class="line">        Text('text2'),</span><br><span class="line">        Text('text3'),</span><br><span class="line">        Text('text4'),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="4">
<li>Stack(层叠布局)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return Stack(</span><br><span class="line">      // Aligment 的取值范围为 [-1, 1]，Stack 中心为 (0, 0)，</span><br><span class="line">      // 这里设置为 (-0.5, -0.5) 后，可以让文本对齐到 Container 的 1/4 处</span><br><span class="line">      alignment: const Alignment(-0.5, -0.5),</span><br><span class="line">      children: &lt;Widget&gt;[   </span><br><span class="line">      Container(</span><br><span class="line">          width: 200,</span><br><span class="line">          height: 200,</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        Text("text2"),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="布局控件"> 布局控件</span></h2>
<ol>
<li>Flexible</li>
</ol>
<p>Flexible组件可以使Row、Column、Flex等子组件在主轴方向有填充可用空间的能力(例如，Row在水平方向，Column在垂直方向)，但是它与Expanded组件不同，它不强制子组件填充可用空间。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">  return new Scaffold(</span><br><span class="line">      appBar: new AppBar(</span><br><span class="line">        title: new Text('水平方向布局'),</span><br><span class="line">      ),</span><br><span class="line">      body: new Row(children: &lt;Widget&gt;[</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () {</span><br><span class="line">            print('点击红色按钮事件');</span><br><span class="line">          },</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: new Text('红色按钮'),</span><br><span class="line">        ),</span><br><span class="line">        new Flexible(</span><br><span class="line">          flex: 1,</span><br><span class="line">          child: new RaisedButton(</span><br><span class="line">            onPressed: () {</span><br><span class="line">              print('点击黄色按钮事件');</span><br><span class="line">            },</span><br><span class="line">            color: Colors.yellow,</span><br><span class="line">            child: new Text('黄色按钮'),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () {</span><br><span class="line">            print('点击蓝色按钮事件');</span><br><span class="line">          },</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: new Text('蓝色按钮'),</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>Expanded</li>
</ol>
<p>Expanded组件可以使Row、Column、Flex等子组件在其主轴方向上展开并填充可用空间(例如，Row在水平方向，Column在垂直方向)。如果多个子组件展开，可用空间会被其flex factor(表示扩展的速度、比例)分割。</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class TestWidget extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">  return new Scaffold(</span><br><span class="line">      appBar: new AppBar(</span><br><span class="line">        title: new Text('水平方向布局'),</span><br><span class="line">      ),</span><br><span class="line">      body: new Row(children: &lt;Widget&gt;[</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () {</span><br><span class="line">            print('点击红色按钮事件');</span><br><span class="line">          },</span><br><span class="line">          color: Colors.red,</span><br><span class="line">          child: new Text('红色按钮'),</span><br><span class="line">        ),</span><br><span class="line">        new Expanded(</span><br><span class="line">          flex: 1,</span><br><span class="line">          child: new RaisedButton(</span><br><span class="line">            onPressed: () {</span><br><span class="line">              print('点击黄色按钮事件');</span><br><span class="line">            },</span><br><span class="line">            color: Colors.yellow,</span><br><span class="line">            child: new Text('黄色按钮'),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        new RaisedButton(</span><br><span class="line">          onPressed: () {</span><br><span class="line">            print('点击蓝色按钮事件');</span><br><span class="line">          },</span><br><span class="line">          color: Colors.blue,</span><br><span class="line">          child: new Text('蓝色按钮'),</span><br><span class="line">        ),</span><br><span class="line">      ]),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="非常感谢"> 非常感谢</span></h2>
<p><a href="https://mp.weixin.qq.com/s/V0cL9bSTM65HTIJ4CU4Cow">Flutter学习指南：UI布局和控件</a>（微信号：玉刚说 YugangTalk），作者：水晶虾饺</p>
<p><a href="https://blog.csdn.net/chunchun1230/article/details/82460257">flutter控件Flexible和 Expanded的区别</a>  ，作者：chunchun1230</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter练习 - Container控件</title>
    <url>/2018/12/29/flutter/flutter%E7%BB%83%E4%B9%A0%20-Container%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h1><span id="flutter练习-container控件"> flutter练习 - Container控件</span></h1>
<h2><span id="属性"> 属性</span></h2>
<p><strong>key：</strong> Container唯一标识符，用于查找更新。</p>
<p><strong>alignment：</strong> 控制child的对齐方式，如果container或者container父节点尺寸大于child的尺寸，这个属性设置会起作用，有很多种对齐方式。</p>
<p><strong>padding：</strong> decoration内部的空白区域，如果有child的话，child位于padding内部。padding与margin的不同之处在于，padding是包含在content内，而margin则是外部边界，设置点击事件的话，padding区域会响应，而margin区域不会响应。</p>
<p><strong>color：</strong> 用来设置container背景色，如果foregroundDecoration设置的话，可能会遮盖color效果。</p>
<p><strong>decoration：</strong> 绘制在child后面的装饰，设置了decoration的话，就不能设置color属性，否则会报错，此时应该在decoration中进行颜色的设置。</p>
<p><strong>foregroundDecoration：</strong> 绘制在child前面的装饰。</p>
<p><strong>width：</strong> container的宽度，设置为double.infinity可以强制在宽度上撑满，不设置，则根据<br>
child和父节点两者一起布局。</p>
<p><strong>height：</strong> container的高度，设置为double.infinity可以强制在高度上撑满。</p>
<p><strong>constraints：</strong> 添加到child上额外的约束条件。</p>
<p><strong>margin：</strong> 围绕在decoration和child之外的空白区域，不属于内容区域。</p>
<p><strong>transform：</strong> 设置container的变换矩阵，类型为Matrix4。</p>
<p><strong>child：</strong> container中的内容widget。</p>
<h2><span id="实例代码"> 实例代码</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import 'package:flutter/material.dart';</span><br><span class="line"></span><br><span class="line">void main() {</span><br><span class="line">  runApp(new myApp());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class myApp extends StatelessWidget {</span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      title: "text",</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text("Container练习"),</span><br><span class="line">        ),</span><br><span class="line">        body: Container(</span><br><span class="line">          constraints: new BoxConstraints.expand(</span><br><span class="line">            height: Theme.of(context).textTheme.display1.fontSize * 1.1 + 200.0,</span><br><span class="line">          ),</span><br><span class="line">          decoration: new BoxDecoration(</span><br><span class="line">            //边框</span><br><span class="line">            border: new Border.all(width: 2.0, color: Colors.red),</span><br><span class="line">            //背景色</span><br><span class="line">            color: Colors.grey,</span><br><span class="line">            //边框圆角</span><br><span class="line">            borderRadius: new BorderRadius.all(new Radius.circular(20.0)),</span><br><span class="line">            image: new DecorationImage(</span><br><span class="line">              image: new NetworkImage(</span><br><span class="line">              "http://www.zhangjiaxue.cn/images/avatar.jpg"),</span><br><span class="line">              centerSlice: new Rect.fromLTRB(270.0, 180.0, 1360.0, 730.0),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          padding: const EdgeInsets.all(8.0),</span><br><span class="line">          alignment: Alignment.center,</span><br><span class="line">          child: new Text(</span><br><span class="line">            'Hello World',</span><br><span class="line">              style: Theme.of(context)</span><br><span class="line">                  .textTheme</span><br><span class="line">                  .display1</span><br><span class="line">                  .copyWith(color: Colors.blue),</span><br><span class="line">          ),</span><br><span class="line">          //变换矩阵</span><br><span class="line">          transform: new Matrix4.rotationZ(0.3),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter练习 - Dart常见运算符</title>
    <url>/2020/01/18/flutter/flutter%E7%BB%83%E4%B9%A0%20-Dart%E5%B8%B8%E8%A7%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1><span id="flutter练习-dart常见运算符"> flutter练习 - Dart常见运算符</span></h1>
<h2><span id="算数运算符"> 算数运算符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">加</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">减</td>
</tr>
<tr>
<td style="text-align:center">- expr</td>
<td style="text-align:center">一元减号(负号)   expr : 表达式的值</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">乘</td>
</tr>
<tr>
<td style="text-align:center">/</td>
<td style="text-align:center">除</td>
</tr>
<tr>
<td style="text-align:center">~/</td>
<td style="text-align:center">返回一个整数值的除法</td>
</tr>
<tr>
<td style="text-align:center">%</td>
<td style="text-align:center">取余数,除法剩下的余数</td>
</tr>
<tr>
<td style="text-align:center">++var</td>
<td style="text-align:center">var = var + 1 表达式的值为：var + 1</td>
</tr>
<tr>
<td style="text-align:center">var++</td>
<td style="text-align:center">var = var + 1 表达式的值为：var</td>
</tr>
<tr>
<td style="text-align:center">–var</td>
<td style="text-align:center">var = var - 1 表达式的值为：var - 1</td>
</tr>
<tr>
<td style="text-align:center">var–</td>
<td style="text-align:center">var =var - 1 表达式的值为：var</td>
</tr>
</tbody>
</table>
<h2><span id="关系运算符"> 关系运算符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">==</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于或等于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于或等于</td>
</tr>
</tbody>
</table>
<h2><span id="类型测试操作符"> 类型测试操作符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">as</td>
<td style="text-align:center">类型转换</td>
</tr>
<tr>
<td style="text-align:center">is</td>
<td style="text-align:center">当对象是相应类型时返回 true</td>
</tr>
<tr>
<td style="text-align:center">is!</td>
<td style="text-align:center">当对象不是相应类型时返回 true</td>
</tr>
</tbody>
</table>
<h2><span id="赋值操作符"> 赋值操作符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a = value ;</td>
<td style="text-align:center">将 value 赋值给 a</td>
</tr>
<tr>
<td style="text-align:center">b??= value ;</td>
<td style="text-align:center">如果 b为空，则将value的值赋值给b，否则，b保持不变</td>
</tr>
<tr>
<td style="text-align:center">a op b</td>
<td style="text-align:center">a = a op b</td>
</tr>
<tr>
<td style="text-align:center">a += b</td>
<td style="text-align:center">a = a + b</td>
</tr>
<tr>
<td style="text-align:center">a -= b</td>
<td style="text-align:center">a = a - b</td>
</tr>
</tbody>
</table>
<h2><span id="逻辑运算符"> 逻辑运算符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">!expr</td>
<td style="text-align:center">反转以下表达式( 将 false 更改为 true , 反之亦然)</td>
</tr>
<tr>
<td style="text-align:center">||</td>
<td style="text-align:center">逻辑或</td>
</tr>
<tr>
<td style="text-align:center">&amp;&amp;</td>
<td style="text-align:center">逻辑与</td>
</tr>
</tbody>
</table>
<h2><span id="位运算符"> 位运算符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center">操作符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">与</td>
</tr>
<tr>
<td style="text-align:center">|</td>
<td style="text-align:center">或</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">异或</td>
</tr>
<tr>
<td style="text-align:center">-expr</td>
<td style="text-align:center">一元位补码 ( 0s 变为 1s , 1s 变为 0s )</td>
</tr>
<tr>
<td style="text-align:center">&lt;&lt;</td>
<td style="text-align:center">左移</td>
</tr>
<tr>
<td style="text-align:center">&gt;&gt;</td>
<td style="text-align:center">右移</td>
</tr>
</tbody>
</table>
<h2><span id="条件表达式"> 条件表达式</span></h2>
<ol>
<li>如果条件为真，返回 expr1,否则返回 expr2 。<br>
condition ?  expr1 : expr2</li>
<li>如果 expr1 为非空,则返回其值，否则 计算并返回 expr2 的值<br>
expr1 ?? expr2</li>
</ol>
<h2><span id="级联操作"> 级联操作</span></h2>
<p>级联操作符 (…) 可以在同一个对象上连续调用多个函数以及访问成员变量。使用级联操作符可以避免创建临时变量， 并且写出来的代码看起来更加流畅</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">querySelector('#button') // Get an object.</span><br><span class="line">  ..text = 'Confirm'   // Use its members.</span><br><span class="line">  ..classes.add('important')</span><br><span class="line">  ..onClick.listen((e) =&gt; window.alert('Confirmed!'));</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin学习 -  Jave 与 Kotlin 注意事项</title>
    <url>/2021/05/28/kotlin/kotlin%E5%AD%A6%E4%B9%A0-Jave%20%E4%B8%8E%20Kotlin%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1><span id="kotlin学习-jave-与-kotlin-注意事项"> kotlin学习 -  Jave 与 Kotlin 注意事项</span></h1>
<h2><span id="java中使用kotlin的顶层方法"> java中使用kotlin的顶层方法</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Test.kt</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">echo</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">    System.<span class="keyword">out</span>.println(name)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//java 中使用 kotlin文件中的方法，默认写法是 xxKt.echo("hello")</span></span><br><span class="line">        TestKt.echo(<span class="string">"hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="java中使用kotlin的方法-自定义-kt-文件类名"> java中使用kotlin的方法 ( 自定义 kt 文件类名 )</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//Test.kt</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//自定义编译后生成的文件名</span></span><br><span class="line"><span class="meta">@file:JvmName</span>(<span class="string">"TestDemoCode"</span>)</span><br><span class="line"><span class="comment">//编译后会强制性的把多个文件内容合并在一起</span></span><br><span class="line"><span class="meta">@file:JvmMultifileClass</span></span><br><span class="line"><span class="keyword">package</span> com.jetpack.compose.demo.test</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">echo</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">    System.<span class="keyword">out</span>.println(name)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Test.java</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        TestDemoCode.echo(<span class="string">"hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2><span id="java文件-kotlin文件-中的-class-使用"> java文件 kotlin文件 中的 class 使用</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">// TestDemoJave.java</span></span><br><span class="line">    testClass(TestDemoJave::<span class="keyword">class</span>.java)</span><br><span class="line">    testKClass(TestDemoJave::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">    <span class="comment">// TestDemoKotlin.java</span></span><br><span class="line">    testKotlinClass(TestDemoKotlin::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testClass</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">TestDemoJave</span>&gt;)</span></span> {</span><br><span class="line">    println(clazz.simpleName)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testKClass</span><span class="params">(clazz: <span class="type">KClass</span>&lt;<span class="type">TestDemoJave</span>&gt;)</span></span> {</span><br><span class="line">    println(clazz.simpleName)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testKotlinClass</span><span class="params">(clazz: <span class="type">KClass</span>&lt;<span class="type">TestDemoKotlin</span>&gt;)</span></span> {</span><br><span class="line">    println(clazz.simpleName)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="kotlin-没有静态变量与-静态方法"> Kotlin 没有静态变量与 静态方法</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//TestDemoKotlin.kt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> TestDemoKotlin {</span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sayMessageStatic</span><span class="params">(msg: <span class="type">String</span>)</span></span> {</span><br><span class="line">        println(msg)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sayMessage</span><span class="params">(msg: <span class="type">String</span>)</span></span> {</span><br><span class="line">        println(msg)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//TestDemoJave.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemoJave</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        TestDemoKotlin.sayMessageStatic(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">        TestDemoKotlin.INSTANCE.sayMessage(<span class="string">"hello"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2><span id="函数嵌套"> 函数嵌套</span></h2>
<pre><code>用途 :  在某些条件下触发递归的函数，不希望被外部函数访问到的函数
</code></pre>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">function</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="keyword">val</span> str = <span class="string">"hello world"</span></span><br><span class="line">    <span class="comment">//函数嵌套</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">say</span><span class="params">(count: <span class="type">Int</span> = <span class="number">10</span>)</span></span> {</span><br><span class="line">        println(str)</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) {</span><br><span class="line">            say(count - <span class="number">1</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    say()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="在java中使用kotlin中的扩展函数"> 在Java中使用Kotlin中的扩展函数</span></h2>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//TestDemoKotlin.kt</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> String?.<span class="title">isNoEmpty</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span> != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.length &gt; <span class="number">0</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//TestDemoJave.java</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">"hello word"</span>;</span><br><span class="line"><span class="comment">//使用kotlin中的扩展函数 （第一个参数 必须是 扩展类的对象）</span></span><br><span class="line"><span class="comment">// xxKt.isNoEmpty(str)</span></span><br><span class="line">TestDemoKotlinKt.isNoEmpty(str);</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="lambda-在-kotlin-中-最多只支持22个参数function22"> lambda 在 kotlin 中 最多只支持22个参数（Function22）</span></h2>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">* Function23.java</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> kotlin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function23</span>&lt;<span class="title">P1</span>, <span class="title">P2</span>, <span class="title">P3</span>, <span class="title">P4</span>, <span class="title">P5</span>, <span class="title">P6</span>, <span class="title">P7</span>, <span class="title">P8</span>, <span class="title">P9</span>, <span class="title">P10</span>, <span class="title">P11</span>, <span class="title">P12</span>, <span class="title">P13</span>, <span class="title">P14</span>, <span class="title">P15</span>, <span class="title">P16</span>, <span class="title">P17</span>, <span class="title">P18</span>, <span class="title">P19</span>, <span class="title">P20</span>, <span class="title">P21</span>, <span class="title">P22</span>, <span class="title">P23</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Function</span>&lt;<span class="title">R</span>&gt; </span>{</span><br><span class="line">    <span class="function">R <span class="title">invoke</span><span class="params">(P1 p1, P2 p2, P3 p3, P4 p4, P5 p5, P6 p6, P7 p7, P8 p8, P9 p9, P10 p10, P11 p11, P12 p12, P13 p13, P14 p14, P15 p15, P16 p16, P17 p17, P18 p18, P19 p19, P20 p20, P21 p21, P22 p22, P23 p23)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> lambdaA = { a: <span class="built_in">Int</span>, b: <span class="built_in">Int</span>, c: <span class="built_in">Int</span>, d: <span class="built_in">Int</span>, e: <span class="built_in">Int</span>, f: <span class="built_in">Int</span>, g: <span class="built_in">Int</span>, h: <span class="built_in">Int</span>,i: <span class="built_in">Int</span>, j: <span class="built_in">Int</span>, k: <span class="built_in">Int</span>, l: <span class="built_in">Int</span>, m: <span class="built_in">Int</span>, n: <span class="built_in">Int</span>, o: <span class="built_in">Int</span>, p: <span class="built_in">Int</span>, q: <span class="built_in">Int</span>, r: <span class="built_in">Int</span>, s: <span class="built_in">Int</span>, t: <span class="built_in">Int</span>, u: <span class="built_in">Int</span>, v: <span class="built_in">Int</span>, w: <span class="built_in">Int</span> -&gt;</span><br><span class="line">    println(<span class="string">"zhang tao"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line"><span class="comment">//    print("hello")</span></span><br><span class="line">    lambdaA(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="inline-将内联函数的函数体复制到调用处实现内联-内联可能导致生成的代码增加"> inline  将内联函数的函数体复制到调用处实现内联 ( 内联可能导致生成的代码增加 )</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">inline fun &lt;T&gt; lock(lock: Lock, body: () -&gt; T): T { …… }</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="noinline-标记不希望内联的函数参数"> noinline 标记不希望内联的函数参数</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">inline fun foo(inlined: () -&gt; Unit, noinline notInlined: () -&gt; Unit) { …… }</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="kotlin-可见性修饰符"> Kotlin 可见性修饰符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>修饰符</strong></th>
<th style="text-align:center"><strong>同类</strong></th>
<th style="text-align:center">同模块</th>
<th style="text-align:center">子类</th>
<th style="text-align:center"><strong>其他</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public（公开，默认）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">internal（模块）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">protected（受保护）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">private（私有）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<h2><span id="java-访问控制修饰符"> Java 访问控制修饰符</span></h2>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>修饰符</strong></th>
<th style="text-align:center"><strong>同类</strong></th>
<th style="text-align:center">同包</th>
<th style="text-align:center">子类</th>
<th style="text-align:center">不同包</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public（公开）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">protected（受保护）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">没有修饰符（默认）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">private（私有）</td>
<td style="text-align:center">√</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<h2><span id="单例-例子"> 单例 例子</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class Single private constructor() {</span><br><span class="line">    companion object {</span><br><span class="line">        fun get(): Single {</span><br><span class="line">        return Holder.instance</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private object Holder {</span><br><span class="line">        val instance = Single()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="kotlin-封闭类枚举类"> kotlin 封闭类（枚举类）</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">sealed class SuperCommand {</span><br><span class="line">    object A : SuperCommand()</span><br><span class="line">    object B : SuperCommand()</span><br><span class="line">    object C : SuperCommand()</span><br><span class="line">    object D : SuperCommand()</span><br><span class="line">    class E(var name: String) : SuperCommand()</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fun exec(superCommand: SuperCommand) =</span><br><span class="line">    when (superCommand) {</span><br><span class="line">        SuperCommand.A -&gt; {</span><br><span class="line">        }</span><br><span class="line">        SuperCommand.B -&gt; {</span><br><span class="line">        }</span><br><span class="line">        SuperCommand.C -&gt; {</span><br><span class="line">        }</span><br><span class="line">        SuperCommand.D -&gt; {</span><br><span class="line">        }</span><br><span class="line">        is SuperCommand.E -&gt; {</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter练习 - Dart流程控制语句</title>
    <url>/2020/01/19/flutter/flutter%E7%BB%83%E4%B9%A0%20-Dart%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1><span id="flutter练习-dart流程控制语句"> flutter练习 - Dart流程控制语句</span></h1>
<h2><span id="if-和-else"> if 和 else</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  int x =10;</span><br><span class="line">  if(x%2==0){</span><br><span class="line">  print("$x 能被2整除");  </span><br><span class="line">  }else{</span><br><span class="line">    print("$x 不能被2整除");</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="for循环"> for（循环）</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var message = new StringBuffer("Hello Dart");</span><br><span class="line">  for (var i = 0; i &lt; 10; i++) {</span><br><span class="line">    message.write("!");</span><br><span class="line">  }</span><br><span class="line">  print(message);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">  for (var i = 0; i &lt; arr.length; i++) {</span><br><span class="line">    print(i);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line"> var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">  numbers.forEach((number) =&gt; print(number));</span><br><span class="line">  numbers.forEach((number) {</span><br><span class="line">    print(number);</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="while-和-do-while-循环"> while 和 do - while (循环)</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var _temp = 0;</span><br><span class="line">  while (_temp &lt; 5) {</span><br><span class="line">    print("这是一个while循环: ${_temp.toString()}");</span><br><span class="line">    _temp++;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var _temp = 0;</span><br><span class="line">  do {</span><br><span class="line">    print("这是一个while循环: ${_temp.toString()}");</span><br><span class="line">    _temp++;</span><br><span class="line">  } while (_temp &lt; 5);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="break-和-continue"> break 和 continue</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">    var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">  for (var v in arr) {</span><br><span class="line">    if (v == 4) {</span><br><span class="line">      break;//跳出循环</span><br><span class="line">    }</span><br><span class="line">    print(v);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];</span><br><span class="line">  for (var v in arr) {</span><br><span class="line">    if (v == 4) {</span><br><span class="line">      continue;//跳出本次循环</span><br><span class="line">    }</span><br><span class="line">    print(v);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="switch-和-case"> switch 和 case</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">void main() {</span><br><span class="line">  var x = 10;</span><br><span class="line">  switch (x % 3) {</span><br><span class="line">    case 0:</span><br><span class="line">      print("余数: 0");</span><br><span class="line">      break;</span><br><span class="line">    case 1:</span><br><span class="line">      print("余数: 1");</span><br><span class="line">      break;</span><br><span class="line">    case 2:</span><br><span class="line">      print("余数: 2");</span><br><span class="line">      break;</span><br><span class="line">    default:</span><br><span class="line">      print("其他");</span><br><span class="line">      break;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="assert-断言"> assert (断言)</span></h2>
<ul>
<li>assert 语句不会影响生产环境中代码的执行，它仅仅在测试环境中起作用。在 Flutter 的调试模式下可以使用 assert。</li>
<li>如果assert条件为 false，则使用 assert 语句中断执行，并抛出一个断言错误异常AssertionError。</li>
<li>如果assert条件为 true，则继续执行下面的语句。</li>
</ul>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>dart</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin学习 -  Kotlin 解构</title>
    <url>/2021/06/03/kotlin/kotlin%E5%AD%A6%E4%B9%A0-Kotlin%20%E8%A7%A3%E6%9E%84/</url>
    <content><![CDATA[<h1><span id="kotlin学习-kotlin-解构"> kotlin学习 -  Kotlin 解构</span></h1>
<h2><span id="解构"> 解构</span></h2>
<h3><span id="解构声明-将一个对象-拆解成-若干个变量-分别赋值"> 解构声明 将一个对象 拆解成 若干个变量 分别赋值</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> user = User(<span class="number">12</span>,<span class="string">"zs"</span>)</span><br><span class="line">    <span class="keyword">val</span> (age,name,user_data) = user</span><br><span class="line">    println(<span class="string">"age = <span class="subst">${age}</span>"</span>)</span><br><span class="line">    println(<span class="string">"name = <span class="subst">${name}</span>"</span>)</span><br><span class="line">    println(<span class="string">"user_data = <span class="subst">${user_data}</span>"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">var</span> age: <span class="built_in">Int</span>, <span class="keyword">var</span> name: String) {</span><br><span class="line">    <span class="comment">//operator 将 一个函数 标记为 重载一个操作符 或实现 一个约定</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component1</span><span class="params">()</span></span> = age</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component2</span><span class="params">()</span></span> = name</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component3</span><span class="params">()</span></span> = <span class="string">"<span class="subst">${age}</span> <span class="subst">${name}</span>"</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="自定义解构声明"> 自定义解构声明</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> price: <span class="built_in">Float</span>) {</span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component1</span><span class="params">()</span></span>: String {</span><br><span class="line">        <span class="keyword">return</span> name</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">component2</span><span class="params">()</span></span>: <span class="built_in">Float</span> {</span><br><span class="line">        <span class="keyword">return</span> price</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> (name, price) = Book(<span class="string">"Kotlin入门"</span>, <span class="number">66.6f</span>)</span><br><span class="line">    println(name)</span><br><span class="line">    println(price)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> (name,price) = getBookInfo()</span><br><span class="line">    println(<span class="string">"name = <span class="subst">${name}</span>"</span>)</span><br><span class="line">    println(<span class="string">"price = <span class="subst">${price}</span>"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getBookInfo</span><span class="params">()</span></span>: Book {</span><br><span class="line">    <span class="keyword">return</span> Book(<span class="string">"Kotlin入门"</span>, <span class="number">66.6f</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>(<span class="keyword">var</span> name: String, <span class="keyword">var</span> price: <span class="built_in">Float</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="kotlin-中数组list-map系列集合默认也支持解构声明的功能"> Kotlin 中数组，list、map系列集合默认也支持解构声明的功能</span></h3>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> (a1, a2, a3) = array</span><br><span class="line">    println(<span class="string">"<span class="variable">$a1</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$a2</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$a3</span>"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> list = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> (b1, b2, b3) = list</span><br><span class="line">    println(<span class="string">"<span class="variable">$b1</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$b2</span>"</span>)</span><br><span class="line">    println(<span class="string">"<span class="variable">$b3</span>"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">val</span> map = mapOf(<span class="string">"key1"</span> to <span class="number">1</span>, <span class="string">"key2"</span> to <span class="number">2</span>, <span class="string">"key3"</span> to <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) {</span><br><span class="line">        println(<span class="string">"<span class="variable">$key</span>-<span class="variable">$value</span>"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h3><span id="忽略不需要的解构"> 忽略不需要的解构</span></h3>
<p>如果在解构声明中不需要某个变量，那么可以用下划线_取代其名称，这样也就不会调用相应的componentN()操作符函数：</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> (_, price2) = Book(<span class="string">"Kotlin入门"</span>, <span class="number">66.6f</span>)    </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter练习 - Future与FutureBuilder实例</title>
    <url>/2020/02/12/flutter/flutter%E7%BB%83%E4%B9%A0%20-Future%E4%B8%8EFutureBuilder%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1><span id="flutter练习-future与futurebuilder实例"> flutter练习 - Future与FutureBuilder实例</span></h1>
<h2><span id="future-异步操作"> Future 异步操作</span></h2>
<ul>
<li>then ：异步操作逻辑</li>
<li>whenComplete ：异步完成时回调</li>
<li>catchError ：捕获异常或异步出错时的回调</li>
<li>timeout ：设置超时时间</li>
</ul>
<h5><span id="future的then的原型"> Future的then的原型</span></h5>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Future&lt;R&gt; then&lt;R&gt;(FutureOr&lt;R&gt; onValue(T value),{Function onError});</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>onValue ：成功的结果回调</li>
<li>onError ：可选 ，执行出现异常</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import 'dart:async';</span><br><span class="line">Future&lt;String&gt; testFuture() {</span><br><span class="line">//  throw Error();</span><br><span class="line">  return Future.value("success");</span><br><span class="line">//  return Future.error("error");</span><br><span class="line">}</span><br><span class="line">//注意： 如果 catchError 与 onError 同时存在时，则只会调用 onError</span><br><span class="line">void main() {</span><br><span class="line">  testFuture().then((s) {</span><br><span class="line">    print("then : " + s);</span><br><span class="line">  }, onError: (e) {</span><br><span class="line">    print("onError : " + e);</span><br><span class="line">  }).whenComplete(() {</span><br><span class="line">    print("whenComplete");</span><br><span class="line">  }).catchError((e) {</span><br><span class="line">    print("catchError : " + e);</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5><span id="结合-async-await"> 结合 async， await</span></h5>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import 'dart:async';</span><br><span class="line"></span><br><span class="line">test() async {</span><br><span class="line">  String result = await Future.delayed(Duration(milliseconds: 2000), () {</span><br><span class="line">    return Future.value("success");</span><br><span class="line">  });</span><br><span class="line">  print("t3 : " + DateTime.now().toString());</span><br><span class="line">  print("result : " + result);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">main() {</span><br><span class="line">  test();</span><br><span class="line">  print("t1 : " + DateTime.now().toString());</span><br><span class="line">  print("t2 : " + DateTime.now().toString());</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h5><span id="futuretimeout-设置超时时间"> future.timeout  设置超时时间</span></h5>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import 'dart:async';</span><br><span class="line"></span><br><span class="line">void main() {</span><br><span class="line">  Future.delayed(Duration(seconds: 2), () {</span><br><span class="line">    return "success";</span><br><span class="line">  }).timeout(Duration(seconds: 1)).then((s) {</span><br><span class="line">    print("then : $s");</span><br><span class="line">  }).whenComplete(() {</span><br><span class="line">    print("whenComplete");</span><br><span class="line">  }).catchError((e) {</span><br><span class="line">    print("catchError : $e");</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>代码运行会出现如下结果：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">whenComplete</span><br><span class="line">catchError : TimeoutException after 0:00:01.000000: Future not completed</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="futurebuilder-网络请求数据库读取-更新-界面"> FutureBuilder ---- 网络请求，数据库读取 更新 界面</span></h2>
<ul>
<li>FutureBuildere是一个将异步操作和异步UI更新结合在一起的类，通过它我们可以将网络请求，数据库读取等的结果更新到页面上</li>
<li>FutureBuilder的构造方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FutureBuilder({Key key,Future&lt;T&gt; future,T initialData,@required AsyncWidgetBuilder&lt;T&gt;builder});</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>future ：Future对象表示此构造器当前连接的异步计算</li>
<li>initialData ：表示一个非空的Future完成前的初始化数据</li>
<li>builder ：AsyncWidgetBuilder类型返回的函数，是一个基于异步交互构建widget的函数<br>
builder:<br>
BuildContext context<br>
AsyncSnapshot<t> snapshot<br>
connectionState 表示与异步计算的连接状态<br>
data - 异步计算接收的最新数据<br>
error - 异步计算接收的最新错误对象；</t></li>
</ul>
<h5><span id="connectionstate-与异步计算的连接状态"> ConnectionState ：与异步计算的连接状态</span></h5>
<ul>
<li>none ：future还未执行的快照状态</li>
<li>waiting ：连接到一个异步操作，并且等待交互，一般在这种状态的时候，我们可以显示加载框</li>
<li>active ：连接到一个活跃的操作，比如stream流，会不断地返回值，并还没有结束，一般也是可以显示加载框</li>
<li>done：异步操作执行结束，一般在这里可以去拿取异步操作执行的结果，并显示相应的布局</li>
</ul>
<table>
<thead>
<tr>
<th>ConnectionState</th>
<th>当前没有连接到任何的异步任务</th>
</tr>
</thead>
<tbody>
<tr>
<td>ConnectionState.none</td>
<td>当前没有连接到任何的异步任务</td>
</tr>
<tr>
<td>ConnectionState.waiting</td>
<td>连接到异步任务并等待进行交互</td>
</tr>
<tr>
<td>ConnectionState.active</td>
<td>连接到异步任务并开始交互</td>
</tr>
<tr>
<td>ConnectionState.done</td>
<td>异步任务中止</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import 'dart:convert';</span><br><span class="line"></span><br><span class="line">import 'package:flutter/material.dart';</span><br><span class="line">import 'package:http/http.dart' as http;</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(MyApp1());</span><br><span class="line"></span><br><span class="line">class MyApp1 extends StatefulWidget {</span><br><span class="line">  @override</span><br><span class="line">  _MyApp1State createState() =&gt; _MyApp1State();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class _MyApp1State extends State&lt;MyApp1&gt; {</span><br><span class="line">  String showResult = '';</span><br><span class="line"></span><br><span class="line">  Future&lt;CommonModel&gt; fetchPost() async {</span><br><span class="line">    final response = await http</span><br><span class="line">        .get('http://www.devio.org/io/flutter_app/json/test_common_model.json');</span><br><span class="line">    Utf8Decoder utf8decoder = Utf8Decoder(); //中文乱码</span><br><span class="line">//    final result=json.decode(response.body);</span><br><span class="line">    final result = json.decode(utf8decoder.convert(response.bodyBytes));</span><br><span class="line">    return CommonModel.fromJson(result);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  @override</span><br><span class="line">  Widget build(BuildContext context) {</span><br><span class="line">    return MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(title: Text('FutureBuilder')),</span><br><span class="line">        body: FutureBuilder&lt;CommonModel&gt;(</span><br><span class="line">          future: fetchPost(),</span><br><span class="line">          builder: (BuildContext context, AsyncSnapshot&lt;CommonModel&gt; snapshot) {</span><br><span class="line">            switch (snapshot.connectionState) {</span><br><span class="line">              case ConnectionState.none:</span><br><span class="line">                return new Text('Input a URL to start');</span><br><span class="line">              case ConnectionState.waiting:</span><br><span class="line">                return new Center(child: new CircularProgressIndicator());</span><br><span class="line">              case ConnectionState.active:</span><br><span class="line">                return new Text('');</span><br><span class="line">              case ConnectionState.done:</span><br><span class="line">                if (snapshot.hasError) {</span><br><span class="line">                  return new Text(</span><br><span class="line">                    '${snapshot.error}',</span><br><span class="line">                    style: TextStyle(color: Colors.red),</span><br><span class="line">                  );</span><br><span class="line">                } else {</span><br><span class="line">                  return new Column(children: &lt;Widget&gt;[</span><br><span class="line">                    Text('icon:${snapshot.data.icon}'),</span><br><span class="line">                    Text('statusBarColor:${snapshot.data.statusBarColor}'),</span><br><span class="line">                    Text('title:${snapshot.data.title}'),</span><br><span class="line">                    Text('url:${snapshot.data.url}')</span><br><span class="line">                  ]);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">          },</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">class CommonModel {</span><br><span class="line">  final String icon;</span><br><span class="line">  final String title;</span><br><span class="line">  final String url;</span><br><span class="line">  final String statusBarColor;</span><br><span class="line">  final bool hideAppBar;</span><br><span class="line"></span><br><span class="line">  CommonModel(</span><br><span class="line">      {this.icon, this.title, this.url, this.statusBarColor, this.hideAppBar});</span><br><span class="line"></span><br><span class="line">  factory CommonModel.fromJson(Map&lt;String, dynamic&gt; json) {</span><br><span class="line">    return CommonModel(</span><br><span class="line">      icon: json['icon'],</span><br><span class="line">      title: json['title'],</span><br><span class="line">      url: json['url'],</span><br><span class="line">      statusBarColor: json['statusBarColor'],</span><br><span class="line">      hideAppBar: json['hideAppBar'],</span><br><span class="line">    );</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>Future</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin学习 -  Kotlin 循环</title>
    <url>/2021/06/03/kotlin/kotlin%E5%AD%A6%E4%B9%A0-Kotlin%20%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h1><span id="kotlin学习-kotlin-循环"> kotlin学习 -  Kotlin 循环</span></h1>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从 1 到 10</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span>) {</span><br><span class="line">    <span class="comment">//1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line">    println(i)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从 1 到 9</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) {</span><br><span class="line">    <span class="comment">//1,2,3,4,5,6,7,8,9</span></span><br><span class="line">    println(i)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//从 10 到 1</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">1</span>) {</span><br><span class="line">    <span class="comment">//10,9,8,7,6,5,4,3,2,1</span></span><br><span class="line">    println(i)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//从 1 到 10 步长为 2</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> step <span class="number">2</span>) {</span><br><span class="line">    <span class="comment">//1,3,5,7,9</span></span><br><span class="line">    println(i)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<p>repeat(count:Int) 一个高阶的循环函数，count代表循环的次数，在函数内，it代表到第几次<br>
注意：it是从0开始计数的</p>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//从 0 到 9</span></span><br><span class="line">repeat(<span class="number">10</span>) {</span><br><span class="line">    <span class="comment">//0,1,2,3,4,5,6,7,8,9</span></span><br><span class="line">    println(it)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = arrayListOf&lt;String&gt;(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>)</span><br><span class="line"><span class="keyword">for</span> (str <span class="keyword">in</span> list) {</span><br><span class="line">    <span class="comment">//A,B,C,D</span></span><br><span class="line">    println(str)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight kotlin"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> list = arrayListOf&lt;String&gt;(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>)</span><br><span class="line"><span class="keyword">for</span> ((index,str) <span class="keyword">in</span> list.withIndex()){</span><br><span class="line">    <span class="comment">//index 从 0 开始</span></span><br><span class="line">    println(<span class="string">"第<span class="subst">${index}</span>个的元素是<span class="variable">$str</span>"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - Kotlin中的【  ?，?.，?:，!! ，filterNotNull 】含义</title>
    <url>/2020/01/05/kotlin/kotlin%E7%BB%83%E4%B9%A0-KotlinfilterNotNull%20%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<h1><span id="kotlin练习-kotlin中的-filternotnull-含义"> kotlin练习 - Kotlin中的【  ?，?.，?:，!! ，filterNotNull 】含义</span></h1>
<h2><span id="可空类型表示当前是否对象可以为空"> ?  可空类型，表示当前是否对象可以为空</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var a:String ="123"</span><br><span class="line">a = null //编译报错</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var a:String? ="123"</span><br><span class="line">a = null //编译通过</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="安全调用操作符"> ?.  安全调用操作符</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var a:String? ="123"</span><br><span class="line">a = null //编译通过</span><br><span class="line">val length = a.length //编译报错 --- 变量"a"可能会为空</span><br><span class="line">val length = a?.length //编译通过 --- 如果 a 非空，就返回 a.length，否则返回 null</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="elvis-操作符"> ?:  Elvis 操作符</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var a:String? ="123"</span><br><span class="line">a = null //编译通过</span><br><span class="line">val lenght = a?.length?:-1 // 当a不为空时，返回a.length，当a为空时，返回-1</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="操作符表示当前对象不为空的情况下执行为空就抛出异常"> !!  操作符，表示当前对象不为空的情况下执行，为空就抛出异常</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var a:String? ="123"</span><br><span class="line">a = null //编译通过</span><br><span class="line">val lenght = a!!.length //如果a不为空，则返回a.length，如果b为空，则抛出异常 NullPointerException</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="filternotnull-过滤非空元素"> filterNotNull  过滤非空元素</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">val nullableList: List&lt;Int?&gt; = listOf(1, 2, null, 4)</span><br><span class="line">val intList: List&lt;Int&gt; = nullableList.filterNotNull() </span><br><span class="line">println(intList.toString())//[1, 2, 4]</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - if分支结构练习</title>
    <url>/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-if%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="kotlin练习-if分支结构练习"> kotlin练习 - if分支结构练习</span></h1>
<h2><span id="if-分支"> if 分支</span></h2>
<ul>
<li>常见形式：</li>
</ul>
<ol>
<li>第一种形式</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if(expression){</span><br><span class="line">	statements...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>第二种形式</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if(expression){</span><br><span class="line">	statements...</span><br><span class="line">}else{</span><br><span class="line">    statements...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>第三种形式</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">if(expression){</span><br><span class="line">	statements...</span><br><span class="line">}else if(expression){</span><br><span class="line">    statements...</span><br><span class="line">}</span><br><span class="line">...  //可以有零个或多个else判断</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>
<p>注意事项<br>
通常建议不要省略if、else、else if后执行体的花括号{}，即使条件执行体只有一行代码，也要保留花括号，这样有更好的可读性，也可以避免发生错误的可能。</p>
</li>
<li>
<p>表达式</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var str = if (age&gt;20) "age大于20" else if (age&lt;20) "age小于20"  else "age等于20"</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var age = 20</span><br><span class="line">var str = if (age &gt; 20) {</span><br><span class="line">    println("age大于20的分支")</span><br><span class="line">    "age大于20"</span><br><span class="line">} else if (age &lt; 20) {</span><br><span class="line">    println("age小于20的分支")</span><br><span class="line">    "age小于20"</span><br><span class="line">} else {</span><br><span class="line">    println("age等于20的分支")</span><br><span class="line">    "age等于20"</span><br><span class="line">}</span><br><span class="line">println(str)</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - 作用域函数学习</title>
    <url>/2019/07/21/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ul>
<li><a href="#kotlin%E7%BB%83%E4%B9%A0---%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0">kotlin练习 - 作用域函数学习</a>
<ul>
<li><a href="#let">let</a></li>
<li><a href="#with">with</a></li>
<li><a href="#apply">apply</a></li>
<li><a href="#run">run</a></li>
<li><a href="#repeat">repeat</a></li>
<li><a href="#also">also</a></li>
<li><a href="#takeif">takeIf</a></li>
<li><a href="#takeunless">takeUnless</a></li>
</ul>
</li>
</ul>
<h1><span id="kotlin练习-作用域函数学习"> kotlin练习 - 作用域函数学习</span></h1>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.kymjs.kotlinprimer.unit3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data class User(var name: String)</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line"></span><br><span class="line">    val user = User("ZhangTao")</span><br><span class="line"></span><br><span class="line">    //let与run都会返回闭包的执行结果，区别在于let有闭包参数，而run没有闭包参数</span><br><span class="line">    val letResult = user.let { "let::${it.javaClass}" }</span><br><span class="line">    println(letResult)</span><br><span class="line">    val runResult = user.run { "run::${this.javaClass}" }</span><br><span class="line">    println(runResult)</span><br><span class="line"></span><br><span class="line">    //also与apply都不返回闭包的执行结果，区别在于also有闭包参数，而apply没有闭包参数</span><br><span class="line">    user.also {</span><br><span class="line">        println("also::${it.javaClass}")</span><br><span class="line">    }.apply {</span><br><span class="line">        println("apply::${this.javaClass}")</span><br><span class="line">    }.name = "hello"</span><br><span class="line"></span><br><span class="line">    //takeIf 的闭包返回一个判断结果，为false时，takeIf函数会返回空</span><br><span class="line">    //takeUnless 与 takeIf 刚好相反， 闭包的判断结果，为true时函数会返回空</span><br><span class="line">    user.takeIf { it.name.length &gt; 0 }?.also { println("姓名为${it.name}") } ?: println("姓名为空")</span><br><span class="line">    user.takeUnless { it.name.length &gt; 0 }?.also { println("姓名为空") } ?: println("姓名为${user.name}")</span><br><span class="line"></span><br><span class="line">    //重复执行当前闭包</span><br><span class="line">    repeat(5) {</span><br><span class="line">        println(user.name)</span><br><span class="line">        print(it)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    //with比较特殊，不是以扩展方法的形式存在的，而是一个顶级函数</span><br><span class="line">    with(user) {</span><br><span class="line">        this.name = "with"</span><br><span class="line">    }</span><br><span class="line">//	类似于    user.apply{ this.name = "with"}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2><span id="let"> let</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun &lt;T, R&gt; T.let(block: (T) -&gt; R): R</p>
</li>
<li>
<p>功能：</p>
<p>调用对象（T）的let函数，则该对象为函数的参数。在函数内可以通过 it指代该对象。返回值为函数的最后一行或指定return表达式。</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    val data = "孙悟空"</span><br><span class="line">    data.let {</span><br><span class="line">        //在函数体内使用it替代object对象去访问其公有的属性和方法</span><br><span class="line">        println(it.toString())</span><br><span class="line">    }</span><br><span class="line">    data?.let {</span><br><span class="line">        // 假如data不为null，代码会执行到此处</span><br><span class="line">        println(it.toString())</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="with"> with</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun &lt;T, R&gt; with(receiver: T, block: T.() -&gt; R): R</p>
</li>
<li>
<p>功能：</p>
<p>将对象作为函数的参数，在函数内可以通过this指代该对象。返回值为函数的最后一行或return表达式。</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var list = with(mutableListOf&lt;String&gt;()) {</span><br><span class="line">        add("1")</span><br><span class="line">        add("2")</span><br><span class="line">        add("3")</span><br><span class="line">        //返回值为函数的最后一行或return表达式</span><br><span class="line">        this</span><br><span class="line">    }</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var paint = Paint()</span><br><span class="line">    with(paint) {</span><br><span class="line">        color = Color.BLACK</span><br><span class="line">        strokeWidth = 1.0f</span><br><span class="line">        textSize = 18.0f</span><br><span class="line">        isAntiAlias = true</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="apply"> apply</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun T.apply(block: T.() -&gt; Unit): T</p>
</li>
<li>
<p>功能：</p>
<p>调用对象的apply函数，在函数范围内，可以任意调用该对象的任意方法，并返回该对象。</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    // apply适用于那些对象初始化需要给其属性赋值的情况。</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().apply {</span><br><span class="line">        add("1")</span><br><span class="line">        add("2")</span><br><span class="line">        add("3")</span><br><span class="line">        //apply返回的是对象本身</span><br><span class="line">    }</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">//apply需要先初始化</span><br><span class="line">    var paint = Paint().apply {</span><br><span class="line">        color = Color.BLACK</span><br><span class="line">        strokeWidth = 1.0f</span><br><span class="line">        textSize = 18.0f</span><br><span class="line">        isAntiAlias = true</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="run"> run</span></h2>
<ul>
<li>
<p>定义：</p>
<ol>
<li>fun run(block: () -&gt; R): R</li>
<li>fun &lt;T, R&gt; T.run(block: T.() -&gt; R): R</li>
</ol>
</li>
<li>
<p>功能：</p>
<p>调用run函数返回值为函数体最后一行，或return表达式。</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().run {</span><br><span class="line">        add("1")</span><br><span class="line">        add("2")</span><br><span class="line">        add("3")</span><br><span class="line">        //run返回的是函数体最后一行，或return表达式</span><br><span class="line">        this</span><br><span class="line">    }</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var name = run {</span><br><span class="line">        "孙悟空"</span><br><span class="line">    }</span><br><span class="line">    println(name)//孙悟空</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="repeat"> repeat</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun repeat(times: Int, action: (Int) -&gt; Unit)</p>
</li>
<li>
<p>功能：</p>
<p>重复执行action函数times次，times从0开始</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">   repeat(3){</span><br><span class="line">       //从0开始循环3次</span><br><span class="line">       println("repeat:第${it}次")</span><br><span class="line">   }</span><br><span class="line">    for(i in 0..2){</span><br><span class="line">       println("for:第${i}次")</span><br><span class="line">    }</span><br><span class="line">    (0..2).forEach{</span><br><span class="line">       println("forEach:第${it}次")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="also"> also</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun T.also(block: (T) -&gt; Unit): T</p>
</li>
<li>
<p>功能：</p>
<p>调用对象的also函数，在函数块内可以通过 it指代该对象,返回值为该对象本身。（注意其和let函数的区别，let返回的是最后一行，also返回的是对象本身）</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var list = mutableListOf&lt;String&gt;().also {</span><br><span class="line">        it.add("1")</span><br><span class="line">        it.add("2")</span><br><span class="line">        it.add("3")</span><br><span class="line">    }</span><br><span class="line">    println(list.toString())//[1, 2, 3]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="takeif"> takeIf</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun T.takeIf(predicate: (T) -&gt; Boolean): T?</p>
</li>
<li>
<p>功能：</p>
<p>传递一个函数参数，如果函数结果为true，返回T对象，否则返回null。</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var list = mutableListOf&lt;String&gt;("1", "2", "3").takeIf {</span><br><span class="line">        it.size &gt; 3//满足条件则返回it,否则返回null</span><br><span class="line">    }</span><br><span class="line">    if (list != null) {</span><br><span class="line">        println(list.toString())</span><br><span class="line">    } else {</span><br><span class="line">        println("list为空")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="takeunless"> takeUnless</span></h2>
<ul>
<li>
<p>定义：</p>
<p>fun T.takeUnless(predicate: (T) -&gt; Boolean): T?</p>
</li>
<li>
<p>功能：</p>
<p>与takeIf相反，参数函数返回false时返回T对象，否则返回null</p>
</li>
<li>
<p>实例：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var list = mutableListOf&lt;String&gt;("1", "2", "3").takeUnless {</span><br><span class="line">        it.size &gt; 3//不满足条件则返回it,否则返回null</span><br><span class="line">    }</span><br><span class="line">    if (list != null) {</span><br><span class="line">        println(list.toString())</span><br><span class="line">    } else {</span><br><span class="line">        println("list为空")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - when分支结构练习</title>
    <url>/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-when%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="kotlin练习-when分支练习"> kotlin练习 - when分支练习</span></h1>
<h2><span id="when表达式"> when表达式</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">when(expression){</span><br><span class="line">expression1 -&gt;	statements...</span><br><span class="line">expression2 -&gt; statements...</span><br><span class="line">else -&gt; statements...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子1</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var score = 'B'</span><br><span class="line">    when (score) {</span><br><span class="line">        'A' -&gt; println("优秀")</span><br><span class="line">        'B' -&gt; println("良好")</span><br><span class="line">        'C' -&gt; println("中")</span><br><span class="line">        'D' -&gt; println("及格")</span><br><span class="line">        else -&gt; println("不及格")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子2</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var score = 'c'</span><br><span class="line">    when (score) {</span><br><span class="line">        'A', 'a' -&gt; println("优秀")</span><br><span class="line">        'B', 'b' -&gt; println("良好")</span><br><span class="line">        'C', 'c' -&gt; println("中")</span><br><span class="line">        'D', 'd' -&gt; println("及格")</span><br><span class="line">        else -&gt; {</span><br><span class="line">            println("不及格")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子3</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var score = 'A'</span><br><span class="line">    var str = "EFGH"</span><br><span class="line">    when (score) {</span><br><span class="line">        str[0]-4,str[1]-4 -&gt; println("优秀")</span><br><span class="line">        str[2]-4,str[3]-4  -&gt; println("中")</span><br><span class="line">        else -&gt; {</span><br><span class="line">            println("不及格")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子4</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var date = Date()</span><br><span class="line">    when (date) {</span><br><span class="line">        Date() -&gt; println("优秀") </span><br><span class="line">        else -&gt; {</span><br><span class="line">            println("不及格")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子5</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var score = 'B'</span><br><span class="line">    var  str = when (score) {</span><br><span class="line">        'A' -&gt; "优秀"</span><br><span class="line">        'B' -&gt; "良好"</span><br><span class="line">        'C' -&gt; "中"</span><br><span class="line">        'D' -&gt; "及格"</span><br><span class="line">        else -&gt; "不格"</span><br><span class="line">    }</span><br><span class="line">    println(str)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子6</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var score = Random().nextInt(100)</span><br><span class="line">    var str = when (score) {</span><br><span class="line">        in 90..100 -&gt; "优秀"</span><br><span class="line">        in 80..90 -&gt; "良好"</span><br><span class="line">        in 70..80 -&gt; "中"</span><br><span class="line">        in 60..70 -&gt; "及格"</span><br><span class="line">        else -&gt; "不及格"</span><br><span class="line">    }</span><br><span class="line">    println("${score} = ${str}")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子7</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var inputPrice = "09"</span><br><span class="line">    println(realPrice(inputPrice))</span><br><span class="line">}</span><br><span class="line">fun realPrice(inputPrice:Any)=when(inputPrice){</span><br><span class="line">    is String -&gt; inputPrice.toDouble()//如果inputPrice类型为String,返回该字符的Double值</span><br><span class="line">    is Int -&gt; inputPrice.toDouble()//如果inputPrice类型为Int,返回该字符的Double值</span><br><span class="line">    is  Double -&gt; inputPrice</span><br><span class="line">    else -&gt; 0.0</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>例子8</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    println("请输入内容")</span><br><span class="line">    val string = readLine()//读取控制台的一行输入 类型: String?</span><br><span class="line">    if(string!=null){</span><br><span class="line">        when{</span><br><span class="line">            //每个分支条件都需要是布尔表达式</span><br><span class="line">            string.matches(Regex("\\d+")) -&gt; println("您输入的全是数字")</span><br><span class="line">            string.matches(Regex("[a-zA-Z]+")) -&gt; println("您输入的全是字母")</span><br><span class="line">            string.matches(Regex("[a-zA-Z0-9]+")) -&gt; println("您输入的既有数字也有字母")</span><br><span class="line">            else -&gt; println("您输入的内容中包含了特殊字符")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - 协程</title>
    <url>/2019/06/30/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1><span id="kotlin练习-协程"> kotlin练习 - 协程</span></h1>
<h2><span id="globalscope构造函数"> GlobalScope构造函数</span></h2>
<ul>
<li>launch : 创建协程</li>
<li>async : 创建带返回值的协程，返回 Deferred</li>
<li>withContext : 不会创建新的协程，在指定协程上运行代码块</li>
<li>runBlocking : 不是GlobalScope的API，可以单独使用， runBlocking里面的delay()会堵塞当前线程，launch等不会堵塞</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(arg: Array&lt;String&gt;) {</span><br><span class="line">    GlobalScope.launch(Dispatchers.Main) {</span><br><span class="line">        LogUtils.d("当前线程main: ${Thread.currentThread().name} ")</span><br><span class="line">        withContextTest()</span><br><span class="line">    }</span><br><span class="line">    //newSingleThreadContext 单线程</span><br><span class="line">    //newFixedThreadPoolContext 线程池</span><br><span class="line">    val singleThreadContext = newSingleThreadContext("single")</span><br><span class="line">    GlobalScope.launch(singleThreadContext) {</span><br><span class="line">        LogUtils.d("当前线程_单线程: ${Thread.currentThread().name} ")//single</span><br><span class="line">    }</span><br><span class="line">    val fixedThreadPoolContext = newFixedThreadPoolContext(1, "fixed")</span><br><span class="line">    GlobalScope.launch(fixedThreadPoolContext) {</span><br><span class="line">        LogUtils.d("当前线程_线程池: ${Thread.currentThread().name} ")//fixed</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">    suspend fun withContextTest() {</span><br><span class="line">        withContext(Dispatchers.IO) {</span><br><span class="line">            LogUtils.d("当前线程io: ${Thread.currentThread().name} ")</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="coroutinecontext协程运行的线程调度器"> CoroutineContext协程运行的线程调度器</span></h2>
<ul>
<li>Dispatchers.Default : 默认（如果不写，默认就是Dispatchers.Default模式）</li>
<li><a href="http://Dispatchers.IO">Dispatchers.IO</a> : IO线程</li>
<li>Dispatchers.Main :  主线程</li>
<li>Dispatchers.Unconfined : 没指定，就是在当前线程</li>
</ul>
<h2><span id="coroutinestart-启动模式"> CoroutineStart 启动模式</span></h2>
<ul>
<li>CoroutineStart.DEFAULT：默认（如果不写，默认就是CoroutineStart.DEFAULT模式）</li>
<li>CoroutineStart.ATOMIC：自动（协程在开始执行之前不能被取消）</li>
<li>CoroutineStart.UNDISPATCHED：立即执行协程</li>
<li>CoroutineStart.LAZY：懒加载</li>
</ul>
<h2><span id="job方法"> Job方法</span></h2>
<ul>
<li>
<p>job.start() : 启动协程，除了 lazy 模式，协程都不需要手动启动</p>
</li>
<li>
<p>job.join()  : 等待协程执行完毕后再执行后面的代码块</p>
</li>
<li>
<p>job.cancel() : 取消一个协程<br>
协程的取消有些特质，因为协程内部可以在创建协程的，这样的协程组织关系可以称为父协程,子协程：</p>
<ol>
<li>父协程手动调用 cancel() 或者异常结束，会立即取消它的所有子协程</li>
<li>父协程必须等待所有子协程完成（处于完成或者取消状态）才能完成</li>
<li>子协程抛出未捕获的异常时，默认情况下会取消其父协程</li>
</ol>
</li>
<li>
<p>job.cancelAndJoin() : 等待协程取消完毕后再执行后面的代码块</p>
</li>
<li>
<p>job.isActive : true - 处于活动状态</p>
</li>
<li>
<p>job.isCancelled : true - 已完成</p>
</li>
<li>
<p>job.isCompleted :  true - 已取消</p>
</li>
</ul>
<h2><span id="第一个协程程序"> 第一个协程程序</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import kotlinx.coroutines.GlobalScope</span><br><span class="line">import kotlinx.coroutines.delay</span><br><span class="line">import kotlinx.coroutines.launch</span><br><span class="line"></span><br><span class="line">fun main(arg: Array&lt;String&gt;) {</span><br><span class="line">                GlobalScope.launch {//在后台启动一个新的协程并继续</span><br><span class="line">                    delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println("我是kotlin")</span><br><span class="line">    }</span><br><span class="line">    println("你好,")//协程已在等待时主线程还在继续</span><br><span class="line">    Thread.sleep(3000L)// 阻塞主线程 3 秒钟来保证 JVM 存活</span><br><span class="line">}</span><br><span class="line">    println("运行了吗？")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="桥接阻塞与非阻塞的世界"> 桥接阻塞与非阻塞的世界</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main(arg: Array&lt;String&gt;) {</span><br><span class="line">    GlobalScope.launch {</span><br><span class="line">        //在后台启动新的协程并继续</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,我是kotlin")</span><br><span class="line">    }</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")//协程已在等待时主线程还在继续</span><br><span class="line">    runBlocking {</span><br><span class="line">        //主线程</span><br><span class="line">        delay(3000L)//延迟 3 秒来保证 JVM 的存活</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,运行了吗？")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking&lt;Unit&gt; {</span><br><span class="line">    //启动主协程</span><br><span class="line">    GlobalScope.launch {</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,我是kotlin")</span><br><span class="line">    }</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")//主协同程序在此处继续</span><br><span class="line">    delay(3000L)//   //延迟 3 秒以保持JVM活动</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,运行了吗？")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="等待工作"> 等待工作</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line"></span><br><span class="line">    var job = GlobalScope.launch {</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,我是kotlin")</span><br><span class="line">    }</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")//主协同程序在此处继续</span><br><span class="line">    job.join()//等到子协程完成后进行</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,运行了吗？")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="结构化的并发"> 结构化的并发</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line">launch {</span><br><span class="line">        delay(2000L)//非阻塞的等待 2 秒钟（默认时间单位是毫秒）</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,我是kotlin")</span><br><span class="line">}</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")//主协同程序在此处继续</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="范围构建器"> 范围构建器</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line">    launch {</span><br><span class="line">        delay(200L)</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,我是Kotlin")</span><br><span class="line">    }</span><br><span class="line">    coroutineScope {</span><br><span class="line">        launch {</span><br><span class="line">            delay(500L)</span><br><span class="line">            println("当前线程: ${Thread.currentThread().name} ,你知道吗")</span><br><span class="line">        }</span><br><span class="line">        delay(100L)</span><br><span class="line">        println("当前线程: ${Thread.currentThread().name} ,运行了吗")</span><br><span class="line">    }</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="提取函数重构"> 提取函数重构</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line">    launch {</span><br><span class="line">        doWorld()</span><br><span class="line">    }</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,你好,")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">suspend fun doWorld() {</span><br><span class="line">    delay(2000L)</span><br><span class="line">    println("当前线程: ${Thread.currentThread().name} ,我是Kotlin")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="协同程序重量轻"> 协同程序重量轻</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line">    repeat(100_000){</span><br><span class="line">        launch {</span><br><span class="line">            delay(1000L)</span><br><span class="line">            println(".")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="全局协程像守护线程"> 全局协程像守护线程</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line">import kotlinx.coroutines.*</span><br><span class="line"></span><br><span class="line">fun main() = runBlocking {</span><br><span class="line">    GlobalScope.launch {</span><br><span class="line">        repeat(1000) {</span><br><span class="line">            println("当前是第${(it + 1)}个线程")</span><br><span class="line">            delay(500L)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    delay(1300L)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="协程请求网络数据"> 协程请求网络数据</span></h2>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() {</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) {</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        coroutine.setOnClickListener { click() }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    private fun click() = runBlocking {</span><br><span class="line">        GlobalScope.launch(Dispatchers.Main) {</span><br><span class="line">            coroutine.text = GlobalScope.async(Dispatchers.IO) {</span><br><span class="line">                // 比如进行了网络请求</span><br><span class="line">                // 放回了请求后的结构</span><br><span class="line">                return@async "main"</span><br><span class="line">            }.await()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - 循环练习</title>
    <url>/2018/12/16/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E5%BE%AA%E7%8E%AF%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="kotlin练习-循环练习"> kotlin练习 - 循环练习</span></h1>
<h2><span id="for-in-循环"> for-in 循环</span></h2>
<ul>
<li>for-in 循环语法格式<br>
for（常量名 in 字符串|范围|集合）{}</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//循环打印1-10</span><br><span class="line">fun main (args : Array&lt;String&gt;){</span><br><span class="line">for(num in 1..10){</span><br><span class="line">    println("num = $num")</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="while-循环"> while 循环</span></h2>
<ul>
<li>while循环语法格式<br>
[init_statements]<br>
while (test_expression){<br>
body_statements<br>
[iteration_statements]<br>
}<br>
while每次在执行循环体之前，都要先对test_expression 循环条件求值，如果循环条件为真，则运行循环体。从上面的语法格式来看，迭代语句 iteration_statements 总是位于循环体的最后，因此只有当循环体能成功执行完成时，while循环才会执行迭代语句iteration_statements；如果test_expression 循环条件为假，则循环体部分将不会执行。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//循环 0-10</span><br><span class="line">fun main (args : Array&lt;String&gt;){</span><br><span class="line">    var num =0</span><br><span class="line">    println("循环开始")</span><br><span class="line">    while (num&lt;10){</span><br><span class="line">        println("num = $num")</span><br><span class="line">        //迭代语句</span><br><span class="line">        num++</span><br><span class="line">    }</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="do-while-循环"> do while 循环</span></h2>
<ul>
<li>do while循环语法格式<br>
[init_statements]<br>
do{<br>
body_statements<br>
[iteration_statements]<br>
} while (test_expression){<br>
}<br>
do while 循环 先执行循环体，再判断循环条件，如果条件为真，则执行下一次循环，否则中止循环</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main (args : Array&lt;String&gt;){</span><br><span class="line">    var num =0</span><br><span class="line">    println("循环开始")</span><br><span class="line">    do{</span><br><span class="line">        println("num = $num")</span><br><span class="line">        num++</span><br><span class="line">    }while (num&lt;10)</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="嵌套循环"> 嵌套循环</span></h2>
<ul>
<li>使用 for-in 和 while 嵌套循环</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main (args : Array&lt;String&gt;){</span><br><span class="line">    println("循环开始")</span><br><span class="line">    for(i in 0 until 10){//0-9</span><br><span class="line">        var j = 0</span><br><span class="line">        while (j&lt;3){</span><br><span class="line">            println("i = $i +，j = ${j++}")</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="控制循环"> 控制循环</span></h2>
<ul>
<li>使用break结束循环</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    println("循环开始")</span><br><span class="line">    for (i in 0..10) {//0-10</span><br><span class="line">        println("i = $i")</span><br><span class="line">        if (i==3){</span><br><span class="line">            break//结束循环</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>使用标识符@</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    println("循环开始")</span><br><span class="line">    outer@ for (i in 0..10) {//0-10</span><br><span class="line">        for (j in 0 until 3){//0-2</span><br><span class="line">            println("i = $i ,j = $j")</span><br><span class="line">            if(j==1){</span><br><span class="line">                //跳出outer标签所标识的循环</span><br><span class="line">                break@outer</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">    循环开始</span><br><span class="line">    i = 0 ,j = 0</span><br><span class="line">    i = 0 ,j = 1</span><br><span class="line">    循环结束</span><br></pre></td></tr></tbody></table></figure>
<p>** 代码解释：<br>
​    程序从外层循环进入内层循环后，当j等于1时，程序执行break@outer语句，这条语句将会结束outer@标签指定的循环。（并不是结束break所在的内层循环，而是结束 outer@标签所标识的外层循环）<br>
** 注意：<br>
​	通常警跟break之后的标签，必须在break所在的循环的外层循环之前定义才有意义</p>
<h2><span id="使用continue忽略本次循环剩下的语句"> 使用continue忽略本次循环剩下的语句</span></h2>
<ul>
<li>使用continue结束本次循环</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    println("循环开始")</span><br><span class="line">    for (i in 0..10) {//0-10</span><br><span class="line">        if (i == 2) {</span><br><span class="line">            continue//结束本次循环</span><br><span class="line">        }</span><br><span class="line">        println("i = $i")</span><br><span class="line">    }</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>使用标识符@</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //外层循环</span><br><span class="line">    outer@ for (i in 0..3) {//0-3</span><br><span class="line">        // 内层循环</span><br><span class="line">        for (j in 0 until 3){//0-2</span><br><span class="line">            println("i = $i ,j = $j")</span><br><span class="line">            if(j==1){</span><br><span class="line">                //忽略outer标签所标识的循环中当次循环剩下的语句</span><br><span class="line">               continue@outer</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line">循环结果：</span><br><span class="line">    i = 0 ,j = 0</span><br><span class="line">    i = 0 ,j = 1</span><br><span class="line">    i = 1 ,j = 0</span><br><span class="line">    i = 1 ,j = 1</span><br><span class="line">    i = 2 ,j = 0</span><br><span class="line">    i = 2 ,j = 1</span><br><span class="line">    i = 3 ,j = 0</span><br><span class="line">    i = 3 ,j = 1</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>代码解释<br>
程序从外层循环进入内层循环后，当j等于1时，程序执行continue@outer语句，这条语句将会结束outer@标签指定的循环的当次循环，直接开始下一次循环，内层循环没有机会执行完成。</li>
</ul>
<h2><span id="使用return结束方法"> 使用return结束方法</span></h2>
<ul>
<li>使用return语句结束函数或方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    println("循环开始")</span><br><span class="line">    text()</span><br><span class="line">    println("循环结束")</span><br><span class="line">}</span><br><span class="line">fun text(){//循环到3后，结束循环</span><br><span class="line">for(i in 0 until 10){//0-9</span><br><span class="line">println("i = $i")</span><br><span class="line">    if(i==3){</span><br><span class="line">        return</span><br><span class="line">    }</span><br><span class="line">    //当i等于3时，无法执行</span><br><span class="line">    println("循环中...")</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - 数组练习</title>
    <url>/2018/12/17/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E6%95%B0%E7%BB%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="kotlin练习-数组练习"> kotlin练习 - 数组练习</span></h1>
<h2><span id="数组创建"> 数组创建</span></h2>
<ol>
<li>使用arrayOf()函数：这种方式无需显示指定数组的长度，但需要依次列出每个数组元素。</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //创建包含指定元素的数组</span><br><span class="line">    var arg1 = arrayOf("Java","Kotlin","PHP","Swift")</span><br><span class="line">    var arg2 = arrayOf(0,1,2,3,4,5)</span><br><span class="line">    println("arg1 = ${Arrays.toString(arg1)}")</span><br><span class="line">    println("arg2 = ${Arrays.toString(arg2)}")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>使用arrayOfNulls()函数：这种方法需要显示指定数组的长度，数组元素全部被初始化为null。</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //创建指定长度，元素为null的数组</span><br><span class="line">    var arg3 = arrayOfNulls&lt;Int&gt;(5)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>使用emptyArray()函数：这种方法会创建一个长度为0的空数组。</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //创建长度为0的空数组</span><br><span class="line">    var arg4 = emptyArray&lt;String&gt;()</span><br><span class="line">    var arg5 = emptyArray&lt;Int&gt;()</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ol start="4">
<li>使用Array(size : Int,init ：(Int) -&gt; T )构造器：这种方法需要显示指定数组的长度，并可通过Lambda表达式来动态计算各数组元素的值，</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //创建指定长度，使用Lambda表达式初始化数组元素的数组</span><br><span class="line">    var arg6 = Array(5,{(it * 2+97).toChar()})</span><br><span class="line">    var arg7 = Array(6,{"fkit"})</span><br><span class="line">    println("arg6 = ${Arrays.toString(arg6)}")</span><br><span class="line">    println("arg7 = ${Arrays.toString(arg7)}")</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ol start="5">
<li>其他 Array<t>：Kotlin专门提供了 ByteArray、ShortArray、IntArra、LongArray、CharArray、FloatArray、DoubleArray、BooleanArray 分别对应java中的 byte[]、short[]、int[]、long[]、char[]、floar[]、double[]、boolean[] 这8种基本数据类型的数组。</t></li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var intArr = intArrayOf(2,3,4,5,6)</span><br><span class="line">    var doubleArr = doubleArrayOf(2.1,2.2,2.3,2.4)</span><br><span class="line">    var intArr2 = IntArray(5,{it*it})</span><br><span class="line">    var charArr = CharArray(5,{(it*2+97).toChar()})</span><br><span class="line"></span><br><span class="line">    println("intArr = ${Arrays.toString(intArr)}")</span><br><span class="line">    println("doubleArr = ${Arrays.toString(doubleArr)}")</span><br><span class="line">    println("intArr2 = ${Arrays.toString(intArr2)}")</span><br><span class="line">    println("charArr = ${Arrays.toString(charArr)}")</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="数组使用"> 数组使用</span></h2>
<ul>
<li>get(index) 方法 ，set(index，value)方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var strArray = arrayListOf&lt;String&gt;("Java","Kotlin","Go","Swift")</span><br><span class="line">    println(strArray[1])//Kotlin</span><br><span class="line">    println(strArray.get(1))//Kotlin</span><br><span class="line">    strArray.set(0,"Python")</span><br><span class="line">    strArray[2] = "Groovy"</span><br><span class="line">    println(strArray.toString())//[Python, Kotlin, Groovy, Swift]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>数组遍历</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    var books = arrayListOf&lt;String&gt;("疯狂java讲义", "疯狂android讲义", "疯狂kotlin讲义")</span><br><span class="line">    for (book in books) {</span><br><span class="line">        println(book)</span><br><span class="line">    }</span><br><span class="line">    for (i in 0 until books.size) {</span><br><span class="line">        println(books[i])</span><br><span class="line">    }</span><br><span class="line">    //根据数组的索引来遍历数组</span><br><span class="line">    for (i in books.indices){//索引 = size -1</span><br><span class="line">        println(books[i])</span><br><span class="line">    }</span><br><span class="line">    for ((index,value) in books.withIndex()){//索引 = size -1</span><br><span class="line">        println("索引为${index}的元素为：${value}")</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>数组常用方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var indexs = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> //所有元素都要满足条件则返回 true</span><br><span class="line"> var isAll = indexs.all { x -&gt; x &gt; 0 &amp;&amp; x &lt; 10 }</span><br><span class="line"> print(isAll)//true</span><br><span class="line"> //任一数组元素满足条件则返回 true</span><br><span class="line"> var isAny = indexs.any { x -&gt; x == 9 }</span><br><span class="line"> println(isAny)//true</span><br><span class="line"> //将数组转为List集合</span><br><span class="line"> var indexList = indexs.asList()</span><br><span class="line"> println(indexList.toString())</span><br><span class="line"> //返回Map集合</span><br><span class="line"> var indexMap1 = indexs.associate { x -&gt; x to x * x }</span><br><span class="line"> println(indexMap1.toString())//{1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81}</span><br><span class="line"> var indexMap2 = indexs.associate { it to it * it }</span><br><span class="line"> println(indexMap2.toString())//{1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81}</span><br><span class="line"> //返回Map集合</span><br><span class="line"> var indexMap3 = indexs.associateBy { it * it }//Map&lt;K,T&gt;中的K</span><br><span class="line"> println(indexMap3.toString())//{1=1, 4=2, 9=3, 16=4, 25=5, 36=6, 49=7, 64=8, 81=9}</span><br><span class="line"> var indexMap4 = indexs.associateBy({ it }, { it * it })</span><br><span class="line"> println(indexMap4.toString())//{1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81}</span><br><span class="line"> var indexMap5 = indexs.associateBy({ it * it })//Map&lt;K,T&gt;中的K</span><br><span class="line"> println(indexMap5.toString())//{1=1, 4=2, 9=3, 16=4, 25=5, 36=6, 49=7, 64=8, 81=9}</span><br><span class="line"> //在将数组转成的Map集合插入map，最后返回修改后的map</span><br><span class="line"> var map6 = mutableMapOf(10 to 100, 11 to 121, 12 to 144)</span><br><span class="line"> var indexMap6 = indexs.associateByTo(map6, { it }, { it * it })</span><br><span class="line"> println(map6.toString())//{10=100, 11=121, 12=144, 1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81}</span><br><span class="line"> //在将数组转成的Map集合插入map，最后返回修改后的map</span><br><span class="line"> var map7 = mutableMapOf(10 to 100, 11 to 121, 12 to 144)</span><br><span class="line"> var indexMap7 = indexs.associateTo(map7, { it to it * it })</span><br><span class="line"> println(map7.toString())//{10=100, 11=121, 12=144, 1=1, 2=4, 3=9, 4=16, 5=25, 6=36, 7=49, 8=64, 9=81}</span><br><span class="line"> //数组平均值</span><br><span class="line"> var average = indexs.average();</span><br><span class="line"> println("平均值为$average")//5.0</span><br><span class="line"> //通过二分法查询element出现的索引，如果找不到则返回负数-------要求数组中的元素已经按升序排序</span><br><span class="line"> var binarySearch1 = indexs.binarySearch(4, 0, 3)</span><br><span class="line"> println("4在数组(数组从第一个元素,到第三个元素)中的位置：$binarySearch1")//-4</span><br><span class="line"> var binarySearch2 = indexs.binarySearch(4)</span><br><span class="line"> println("4在数组中的位置：$binarySearch2")//3</span><br><span class="line"> //判断数组中是否包含元素</span><br><span class="line"> var contains = indexs.contains(10);</span><br><span class="line"> println("数组中是否有元素10：${contains}")//false</span><br><span class="line"></span><br><span class="line"> var indexs1 = arrayOf(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> //判断两个数组是否相等</span><br><span class="line"> var contentDeepEquals = indexs.contentDeepEquals(indexs1)</span><br><span class="line"> println("两个数组是否相等：${contentDeepEquals}")//true</span><br><span class="line"> //将数组转成String</span><br><span class="line"> var str_index = indexs.contentToString();</span><br><span class="line"> println(str_index)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> //复制数组成为一个新数组</span><br><span class="line"> var copyof1 = indexs.copyOf()</span><br><span class="line"> println("copyof1 = ${copyof1.contentToString()}")//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> indexs[0] = 0;</span><br><span class="line"> println("copyof1 = ${copyof1.contentToString()}")//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> indexs[0] = 1;</span><br><span class="line"> var copyof2 = indexs.copyOf(5)</span><br><span class="line"> println("copyof2 = ${copyof2.contentToString()}")//[1, 2, 3, 4, 5]</span><br><span class="line"> var copyof3 = indexs.copyOf(10)</span><br><span class="line"> println("copyof3 = ${copyof3.contentToString()}")//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> //复制数组（通过索引指定）</span><br><span class="line"> var copyOfRange1 = indexs.copyOfRange(0, 10)</span><br><span class="line"> println("copyOfRange1 = ${copyOfRange1.contentToString()}")//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> indexs[0] = 10</span><br><span class="line"> println("copyOfRange1 = ${copyOfRange1.contentToString()}")//[1, 2, 3, 4, 5, 6, 7, 8, 9, null]</span><br><span class="line"> indexs[0] = 1</span><br><span class="line"> var copyOfRange2 = indexs.copyOfRange(0, 5)</span><br><span class="line"> println("copyOfRange2 = ${copyOfRange2.contentToString()}")//[1, 2, 3, 4, 5]</span><br><span class="line"> //数组满足条件的数量</span><br><span class="line"> var count1 = indexs.count({ it &gt; 5 })</span><br><span class="line"> println("数组中大于5的元素有：${count1}个")//4</span><br><span class="line"></span><br><span class="line"> var indexs2 = arrayOf(1, 2, 3, 1, 4, 2, 3, 4, 1)</span><br><span class="line"> //去掉数组中重复的元素</span><br><span class="line"> var indexs2_distinct1 = indexs2.distinct()</span><br><span class="line"> println(indexs2_distinct1.toString())//[1, 2, 3, 4]</span><br><span class="line"> var indexs2_distinct2 = indexs2.distinctBy { it % 2 == 0 }</span><br><span class="line"> println(indexs2_distinct2.toString())//[1, 2]</span><br><span class="line"></span><br><span class="line"> //去掉数组中前3个元素</span><br><span class="line"> var drop = indexs.drop(3);</span><br><span class="line"> println(drop.toString())</span><br><span class="line"></span><br><span class="line"> //去掉前面满足条件的元素，当出现第一个条件不满足时，返回后面的所有元素</span><br><span class="line"> var dropWhile = indexs.dropWhile { it &lt;= 3 }</span><br><span class="line"> println(dropWhile.toString())//[4, 5, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line"> //去掉数组中后3个元素</span><br><span class="line"> var dropLast = indexs.dropLast(3);</span><br><span class="line"> println(dropLast.toString())//[1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line"> //去掉前面满足条件的元素，当出现第一个条件不满足时，返回前面的所有元素</span><br><span class="line"> var dropLastWhile = indexs.dropLastWhile { it &gt; 6 }</span><br><span class="line"> println(dropLastWhile.toString())//[1, 2, 3, 4, 5, 6]</span><br><span class="line"></span><br><span class="line"> //将数组中的元素赋值为element</span><br><span class="line"> var indexs4 = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> indexs4.fill(3)</span><br><span class="line"> println(indexs4.contentToString())//[3, 3, 3, 3, 3, 3, 3, 3, 3]</span><br><span class="line"></span><br><span class="line"> var indexs5 = arrayOf&lt;Int&gt;(1, 2, 3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> indexs5.fill(3, 0, 5);</span><br><span class="line"> println(indexs5.contentToString())//[3, 3, 3, 3, 3, 6, 7, 8, 9]</span><br><span class="line"></span><br><span class="line"> var first1 = indexs.first()</span><br><span class="line"> println("数组的第一个元素：${first1}")//1</span><br><span class="line"> var first2 = indexs.first { it &gt; 5 }</span><br><span class="line"> println("数组的第一个满足条件的元素：${first2}")//6</span><br><span class="line"></span><br><span class="line"> var last1 = indexs.last()</span><br><span class="line"> println("数组的最后一个元素：${last1}")//9</span><br><span class="line"> var last2 = indexs.last { it &gt; 5 }</span><br><span class="line"> println("数组的最后一个满足条件的元素：${last2}")//9</span><br><span class="line"></span><br><span class="line"> //求和</span><br><span class="line"> var fold = indexs.fold(0, { acc, i -&gt; acc + i })</span><br><span class="line"> println("数组元素和为：${fold}")</span><br><span class="line"> //搜索元素查询的位置</span><br><span class="line"> var index1 = indexs.indexOf(5)//从前往后</span><br><span class="line"> var index2 = indexs.lastIndexOf(5)//从后往前</span><br><span class="line"> println("元素5在数组中的位置是：${index1}和${index2}")</span><br><span class="line"></span><br><span class="line"> var indexs6 = arrayOf(1, 2, 3, 1, 4, 2, 3, 4, 1)</span><br><span class="line"> var index3 = indexs6.indexOfFirst { it == 3 }//第一次出现的位置</span><br><span class="line"> var index4 = indexs6.indexOfLast { it == 3 }//最后一次查询的位置</span><br><span class="line"> println("元素3在数组中第一次出现在${index3},最后一次出现在${index4}")//2,6</span><br><span class="line"></span><br><span class="line"> var indexs7 = arrayListOf&lt;Int&gt;(3, 4, 5, 6, 7, 8, 9)</span><br><span class="line"> var indexs8 = arrayListOf&lt;Int&gt;(1, 2, 5, 6)</span><br><span class="line"> //intersect(交集)，subtract(差集)，union(并集)，minus(补集)</span><br><span class="line"> var intersect = indexs7.intersect(indexs8)</span><br><span class="line"> var subtract = indexs7.subtract(indexs8)</span><br><span class="line"> var union = indexs7.union(indexs8)</span><br><span class="line"> var minus = indexs7.minus(indexs8)</span><br><span class="line"> println("交集：${intersect}")//[5, 6]</span><br><span class="line"> println("差集：${subtract}")//[3, 4, 7, 8, 9]</span><br><span class="line"> println("并集：${union}")//[3, 4, 5, 6, 7, 8, 9, 1, 2]</span><br><span class="line"> println("补集：${minus}")//[3, 4, 7, 8, 9]</span><br><span class="line"> //数组最大值</span><br><span class="line"> var max = indexs.max();//9</span><br><span class="line"> //数组最小值</span><br><span class="line"> var min = indexs.min();//1</span><br><span class="line"> println("数组中的最大值：${max} 最小值：${min}")</span><br><span class="line"></span><br><span class="line"> var indexs9 = arrayListOf&lt;Int&gt;(1, 9, 3, 7, 2, 5, 4, 6, 8)</span><br><span class="line"> //排序</span><br><span class="line"> indexs9.sort();</span><br><span class="line"> println(indexs9)//[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> //排序</span><br><span class="line"> val mapList = mutableListOf(1 to "A" , 2 to "B", 5 to "C", 3 to "D")</span><br><span class="line"> mapList.sortBy { it.first }</span><br><span class="line"> println(mapList) // [(1, A), (2, B), (3, D), (5, C)]</span><br><span class="line"> mapList.sortBy { it.second }</span><br><span class="line"> println(mapList) // [(1, A), (2, B), (5, C), (3, D)]</span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Play应用上架流程</title>
    <url>/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/</url>
    <content><![CDATA[<h1><span id="google-play应用上架流程"> Google Play应用上架流程</span></h1>
<h2><span id="注册开发者账号"> 注册开发者账号</span></h2>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/1.jpg" alt=""></p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/2.webp" alt=""></p>
<h2><span id="创建应用"> 创建应用</span></h2>
<p>选择默认语言 （最好选择英语），填写应用名称</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/3.webp" alt=""></p>
<h2><span id="商品详情默认选中"> 商品详情（默认选中）</span></h2>
<h2><span id="需要填写-app简介和详细描述内容需要和默认语言一致"> 需要填写 App简介和详细描述内容（需要和默认语言一致）</span></h2>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/4.webp" alt=""></p>
<h2><span id="上传app图片屏幕截图-高分辨率图标-置顶大图"> 上传APP图片（屏幕截图、高分辨率图标、置顶大图）</span></h2>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/5.webp" alt=""><br>
<img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/6.png" alt=""></p>
<h2><span id="选择应用类型和类别"> 选择应用类型和类别</span></h2>
<p>填写公司官网，联系邮箱（邮箱地址会展示给用户，不要乱填），内容分级（可以先不管，在上传App后才能进行分级判断），电话（填写公司电话，会展示给用户），隐私权政策。</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/7.webp" alt=""></p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/8.webp" alt=""></p>
<h2><span id="上传正式版应用商品版本-正式版-beta版-alpha版本"> 上传正式版应用（商品版本: 正式版、Beta版、Alpha版本）</span></h2>
<h3><span id="创建版本"> 创建版本</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/9.webp" alt=""></p>
<h3><span id="加入-google-play-app-signing"> 加入 Google Play App Signing</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/10.webp" alt=""></p>
<h3><span id="上传apk安装包"> 上传APK安装包</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/11.webp" alt=""></p>
<h3><span id="填写版本说明"> 填写版本说明</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/12.webp" alt=""></p>
<h3><span id="内容分级"> 内容分级</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/13.webp" alt=""></p>
<h3><span id="填写电子邮件地址用来接收google-play发送的消息选择应用类别"> 填写电子邮件地址（用来接收Google Play发送的消息），选择应用类别</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/14.webp" alt=""></p>
<h3><span id="调查问卷页-基本上都选择否点击-判断分级"> 调查问卷页 （基本上都选择否）点击 判断分级</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/15.webp" alt=""></p>
<h3><span id="确认分级"> 确认分级</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/16.webp" alt=""></p>
<h2><span id="定价和分发范围"> 定价和分发范围</span></h2>
<h3><span id="注意-国家地区-默认是-0需要自己选择国家"> 注意 “ 国家/地区 ” 默认是 0，需要自己选择国家</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/17.webp" alt=""></p>
<h3><span id="内容准则-和-美国出口法律-是必须要选中的最后点击-保存草稿"> 内容准则  和 美国出口法律 是必须要选中的，最后点击 “ 保存草稿 ”</span></h3>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/18.webp" alt=""></p>
<h2><span id="应用发布"> 应用发布</span></h2>
<p>如果所有内容都填写正确，我们会看到左边导航栏4个绿色对勾，并且出现“可以发布”按钮</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/19.webp" alt=""></p>
<p>点击左边导航栏中的 " 应用版本 "</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/20.webp" alt=""></p>
<p>点击 “ 修改版本 ”</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/21.webp" alt=""></p>
<p>点击 “ 查看 ” , 确认没有问题后，点击 “ 开始发布正式版 ”，就可以发布了，然后就需要审核了</p>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/22.webp" alt=""></p>
<h2><span id="查看审核进度"> 查看审核进度</span></h2>
<p><img src="/2020/11/18/other/%E4%B8%8A%E4%BC%A0%E5%BA%94%E7%94%A8%E8%87%B3Google%20Play/23.png" alt=""></p>
]]></content>
      <categories>
        <category>应用上架</category>
      </categories>
      <tags>
        <tag>Google Play</tag>
        <tag>应用上架</tag>
      </tags>
  </entry>
  <entry>
    <title>kotlin练习 - 集合练习</title>
    <url>/2019/03/14/kotlin/kotlin%E7%BB%83%E4%B9%A0-%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1><span id="kotlin练习-集合练习"> kotlin练习 - 集合练习</span></h1>
<h2><span id="set集合"> Set集合</span></h2>
<ul>
<li>Set集合创建</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">fun main(args: Array&lt;String&gt;) {</span><br><span class="line">    //创建不可变集合，返回Set</span><br><span class="line">    var set = setOf("java", "kotlin", "go")</span><br><span class="line">    println(set)//[java, kotlin, go]</span><br><span class="line">    println("setOf 返回类型 ${set.javaClass}")</span><br><span class="line"></span><br><span class="line">    //创建可变集合，返回值MutableSet</span><br><span class="line">    var mutablemap = mutableListOf("java", "kotlin", "go")</span><br><span class="line">    mutablemap[0] = "JavaScript"</span><br><span class="line">    println(mutablemap)//[JavaScript, kotlin, go]</span><br><span class="line">    println("mutableListOf 返回类型 ${mutablemap.javaClass}")</span><br><span class="line"></span><br><span class="line">    //创建LinkedHashSet集合</span><br><span class="line">    var linkedHashSet = linkedSetOf("java", "kotlin", "go")</span><br><span class="line">    println(linkedHashSet)</span><br><span class="line">    println("linkedHashSet 返回类型 ${linkedHashSet.javaClass}")</span><br><span class="line"></span><br><span class="line">    //创建HashSet集合</span><br><span class="line">    var hashSet = hashSetOf("java", "kotlin", "go")</span><br><span class="line">    println(hashSet)//不保证元素的顺序--[kotlin, go, java]</span><br><span class="line"></span><br><span class="line">    //创建TreeSet集合</span><br><span class="line">    var treeSet = sortedSetOf("java", "kotlin", "go")</span><br><span class="line">    println(treeSet)//集合按从小到大排列--[go, java, kotlin]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Set集合的使用</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//创建不可变集合，返回Set</span><br><span class="line"> var set = setOf("java", "kotlin", "go")</span><br><span class="line"></span><br><span class="line"> //判断是否所有的元素长度都大于5  ------所有元素都满足条件</span><br><span class="line"> println(set.all { it.length &gt; 5 })// false</span><br><span class="line"></span><br><span class="line"> //判断是否任意一元素的长度大于5  ------任意元素都满足条件</span><br><span class="line"> println(set.any { it.length &gt; 5 })//true</span><br><span class="line"></span><br><span class="line"> //以Lambda 表达式的值为key , 集合元素为value ,组成的Map集合</span><br><span class="line"> var map = set.associateBy({ "我正在学习${it}" })</span><br><span class="line"> println(map)//{我正在学习java=java, 我正在学习kotlin=kotlin, 我正在学习go=go}</span><br><span class="line"></span><br><span class="line"> //使用in、!in运算符</span><br><span class="line"> println("java" in set)// true</span><br><span class="line"> println("java" !in set)// false</span><br><span class="line"></span><br><span class="line"> //删除Set集合前面两个元素</span><br><span class="line"> var dropedList = set.drop(2)</span><br><span class="line"> println(dropedList)// [go]</span><br><span class="line"></span><br><span class="line"> //对Set集合进行过滤: 需要得到所有包含 va 的集合,</span><br><span class="line"> var filteredList1 = set.filter({ "va" in it })//如果没有返回空元素的集合</span><br><span class="line"> println(filteredList1)//[java]</span><br><span class="line"></span><br><span class="line"> //查找Set集合中包含 va 的元素，如果找到就返回该元素，否则返回 null</span><br><span class="line"> var filteredList2 = set.find({ "o" in it })</span><br><span class="line"> println(filteredList2)//kotlin</span><br><span class="line"> var filteredList3 = set.find({ "va1" in it })</span><br><span class="line"> println(filteredList3)//null</span><br><span class="line"></span><br><span class="line"> //将Set集合中所有字符串拼接在一起</span><br><span class="line"> var foldedList1 = set.fold("", { acc, s -&gt; acc + s })</span><br><span class="line"> println(foldedList1)//javakotlingo</span><br><span class="line"> var foldedList2 = set.fold("456", { acc, s -&gt; acc +" 123 ${s}"  })</span><br><span class="line"> println(foldedList2)//456 123 java 123 kotlin 123 go</span><br><span class="line"> //查找某个元素的出现位置------没有就会返回-1</span><br><span class="line"> println(set.indexOf("kotlin"))// 1</span><br><span class="line"> println(set.indexOf("kotlin1"))// -1</span><br><span class="line"> </span><br><span class="line">   //循环遍历</span><br><span class="line"> var books = setOf("疯狂java讲义", "疯狂kotlin讲义", "疯狂IOS讲义", "疯狂android讲义")</span><br><span class="line"> for (book in books){</span><br><span class="line">     println(book)</span><br><span class="line"> }</span><br><span class="line"> books.forEach({</span><br><span class="line">     println(it)</span><br><span class="line"> })</span><br><span class="line"> for (i in books.indices){</span><br><span class="line">     println(books.elementAt(i))</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line"> var books = mutableSetOf("疯狂java讲义")</span><br><span class="line">   //新增</span><br><span class="line"> books.addAll(setOf("疯狂kotlin讲义", "疯狂IOS讲义"))</span><br><span class="line"> books.add("疯狂android讲义")</span><br><span class="line"> println(books.toString())//[疯狂java讲义, 疯狂kotlin讲义, 疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> //删除</span><br><span class="line"> books.remove("疯狂kotlin讲义")</span><br><span class="line"> println(books.toString())//[疯狂java讲义,疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> books.removeAll(setOf("疯狂java讲义"))</span><br><span class="line"> println(books.toString())//[疯狂IOS讲义, 疯狂android讲义]</span><br><span class="line"> //清空所有</span><br><span class="line"> books.clear()</span><br><span class="line"> println(books.toString())//[]</span><br><span class="line"> //只保留公共的元素</span><br><span class="line"> books = mutableSetOf("疯狂java讲义", "疯狂kotlin讲义", "疯狂IOS讲义", "疯狂android讲义")</span><br><span class="line"> books.retainAll(setOf("疯狂kotlin讲义", "疯狂PHP讲义", "疯狂android讲义"))</span><br><span class="line"> println(books.toString())//[疯狂kotlin讲义, 疯狂android讲义]</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="list集合"> List集合</span></h2>
<ul>
<li>List集合创建</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var list1 = listOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list1.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  var list2 = listOfNotNull(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list2.toString())//[1, 2, 3, 4, 5, 7, 8, 9]</span><br><span class="line">  var list3 = mutableListOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list3.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  list3.add(10)</span><br><span class="line">  list3.set(5, 6)</span><br><span class="line">  println(list3.toString())//[1, 2, 3, 4, 5, 6, 7, 8, 9,10]</span><br><span class="line">  var list4 = arrayListOf(1, 2, 3, 4, 5, null, 7, 8, 9)</span><br><span class="line">  println(list4.toString())//[1, 2, 3, 4, 5, null, 7, 8, 9]</span><br><span class="line">  list4.set(5, 6)</span><br><span class="line">  list4.add(10)</span><br><span class="line">  println(list4.toString())//[1, 2, 3, 4, 5, 6, 7, 8, 9,10]</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>List集合的使用</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line"> //遍历List</span><br><span class="line">    var list1 = listOf("Java", null, "Kotlin", "Go")</span><br><span class="line">    list1.forEach {</span><br><span class="line">        println(it)</span><br><span class="line">    }</span><br><span class="line">    for (str in list1) {</span><br><span class="line">        println(str)</span><br><span class="line">    }</span><br><span class="line">    for (i in list1.indices) {</span><br><span class="line">        println(list1[i])</span><br><span class="line">        println("get = ${list1.get(i)}")</span><br><span class="line">        println("elementAt = ${list1.elementAt(i)}")</span><br><span class="line">    }</span><br><span class="line">    var index = list1.indexOf("Go")</span><br><span class="line">    println("Go 在数组中的位置：${index}")//3</span><br><span class="line"></span><br><span class="line">    var list2 = mutableListOf(1, 2, 3, 1, 8, 3, 4, 6, 1, 4, 2, 3)</span><br><span class="line">    //最后一次出现的的位置</span><br><span class="line">    var last1 = list2.lastIndexOf(2)//10</span><br><span class="line">    //最后一次出现的的位置</span><br><span class="line">    var last2 = list2.indexOfLast { it == 2 }//10</span><br><span class="line">    //第一次出现的位置</span><br><span class="line">    var first = list2.indexOfFirst { it == 2 }//1</span><br><span class="line">    println("2在数组中第一次出现在${first},最后一次出现在${last1},${last2}")</span><br><span class="line">    //返回集合</span><br><span class="line">    var list3 = listOf("Java", null, "Kotlin", "PHP", null, "Go")</span><br><span class="line">    var sublist = list3.subList(2, 5)//从第2个到第5个之间的元素</span><br><span class="line">    println(sublist.toString())//[Kotlin, PHP, null]</span><br><span class="line">//    var list4 = mutableListOf("Java", "JavaScript", null, "HTML", "Kotlin", null, "Python", "PHP", "Go")</span><br><span class="line">    var list4 = mutableListOf("Java", null, "HTML", "Go")</span><br><span class="line">    println(list4)//[Java, null, HTML, Go]</span><br><span class="line">    //新增</span><br><span class="line">    list4.add("Python")</span><br><span class="line">    list4.add(2, "C++")</span><br><span class="line">    list4.addAll(listOf("Kotlin", null))</span><br><span class="line">    println(list4)//[Java, null, C++, HTML, Go, Python, Kotlin, null]</span><br><span class="line">    //删除</span><br><span class="line">    list4.removeAt(1)</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Kotlin, null]</span><br><span class="line">    //list4[6] ="CSS";</span><br><span class="line">    list4.set(6, "CSS")</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Kotlin, CSS]</span><br><span class="line">    list4.remove("Go")</span><br><span class="line">    println(list4)//[Java, C++, HTML, Python, Kotlin, CSS]</span><br><span class="line">    list4.add(3, "Go")</span><br><span class="line">    list4.add(5, "Go")</span><br><span class="line">    println(list4)//[Java, C++, HTML, Go, Python, Go, Kotlin, CSS]</span><br><span class="line">    //替换元素</span><br><span class="line">    list4.replaceAll {</span><br><span class="line">        if (it.equals("Go")) {</span><br><span class="line">            "go"</span><br><span class="line">        } else {</span><br><span class="line">            it</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    println(list4)//[Java, C++, HTML, go, Python, go, Kotlin, CSS] </span><br><span class="line">    //删除</span><br><span class="line">    list4.removeAll(listOf("go"))</span><br><span class="line">    println(list4)//[Java, C++, HTML, Python, Kotlin, CSS]</span><br><span class="line"></span><br><span class="line">    //清空</span><br><span class="line">    list4.clear()</span><br><span class="line">    println(list4)//[]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<h2><span id="map集合"> Map集合</span></h2>
<ul>
<li>Map集合创建</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//不可变map集合</span><br><span class="line">var map1 = mapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">println(map1)//{Java=1, JavaScript=2, HTML=3, Kotlin=4}</span><br><span class="line">//可变集合MutableMap</span><br><span class="line">var map2 = mutableMapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">println(map2)//{Java=1, JavaScript=2, HTML=3, Kotlin=4}</span><br><span class="line">map2.put("Python", 5)</span><br><span class="line">println(map2)//{Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=5}</span><br><span class="line">map2.remove("JavaScript")</span><br><span class="line">println(map2)//{Java=1, HTML=3, Kotlin=4, Python=5}</span><br><span class="line">//HashMap集合----不保证key-value的顺序</span><br><span class="line">var map3 = hashMapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">println(map3)//{Java=1, HTML=3, JavaScript=2, Kotlin=4}</span><br><span class="line">//LinkedHashMap集合---key-value按添加顺序排列</span><br><span class="line">var map4 = linkedMapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">println(map4)//{Java=1, JavaScript=2, HTML=3, Kotlin=4}</span><br><span class="line">//SortedMap集合------ key-value按key由小到大排列</span><br><span class="line">var map5 = sortedMapOf("Java" to 1, "Python" to 5, "HTML" to 3, "Kotlin" to 4, "JavaScript" to 2, "Go" to 6)</span><br><span class="line">println(map5)//{Go=6, HTML=3, Java=1, JavaScript=2, Kotlin=4, Python=5}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>Map集合的使用</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">var map1 = mapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">//当map集合中所有key-value对都满足条件返回true</span><br><span class="line">var all = map1.all {</span><br><span class="line">    it.key.length &gt;= 4 &amp;&amp; it.value &gt; 0</span><br><span class="line">}</span><br><span class="line">println(all)//true</span><br><span class="line">//当map集合中任意一个key-value对满足条件就会返回true</span><br><span class="line">var any = map1.any {</span><br><span class="line">    it.key.length &gt;= 10 &amp;&amp; it.value &gt; 1</span><br><span class="line">}</span><br><span class="line">println(any)//true</span><br><span class="line">//判断map集合中是否有对于key的key-value</span><br><span class="line">println("Java" in map1);//true</span><br><span class="line">println("Java" !in map1);//false</span><br><span class="line">println("Go" in map1);//false</span><br><span class="line">println("Go" !in map1);//true</span><br><span class="line"></span><br><span class="line">//对map进行过滤，要求key中包含：Java</span><br><span class="line">var filterMap1 = map1.filter { "Java" in it.key }</span><br><span class="line">println(filterMap1)//{Java=1, JavaScript=2}</span><br><span class="line">var filterMap2 = map1.filter { it.key in "Java" }</span><br><span class="line">println(filterMap2)//{Java=1}</span><br><span class="line">//通过map集合，返回一个新的List</span><br><span class="line">var mappedList1 = map1.map { "《疯狂${it.key}》讲义,第${it.value}个" }</span><br><span class="line">var mappedList2 = map1.map { "《疯狂${it.key}》讲义" to "第${it.value}个" }</span><br><span class="line">println(mappedList1)//[《疯狂Java》讲义,第1个, 《疯狂JavaScript》讲义,第2个, 《疯狂HTML》讲义,第3个, 《疯狂Kotlin》讲义,第4个]</span><br><span class="line">println(mappedList2)//[(《疯狂Java》讲义, 第1个), (《疯狂JavaScript》讲义, 第2个), (《疯狂HTML》讲义, 第3个), (《疯狂Kotlin》讲义, 第4个)]</span><br><span class="line">//Map集合中key-value对中 value最大的值</span><br><span class="line">var maxby1 = map1.maxBy { it.value }</span><br><span class="line">println(maxby1)//Kotlin=4</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 value最小的值</span><br><span class="line">var minby1 = map1.minBy { it.value }</span><br><span class="line">println(minby1)//Java=1</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 key的长度最大的值</span><br><span class="line">var maxby2 = map1.maxBy { it.key.length }</span><br><span class="line">println(maxby2)//JavaScript=2</span><br><span class="line"></span><br><span class="line">//Map集合中key-value对中 key的长度最小的值</span><br><span class="line">var minby2 = map1.minBy { it.key.length }</span><br><span class="line">println(minby2)//Java=1</span><br><span class="line"></span><br><span class="line">var map2 = mapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">var map3 = mapOf("Python" to 1, "Go" to 2, "HTML" to 3, "Kotlin" to 4)</span><br><span class="line">//集合相加---相当于并集</span><br><span class="line">println(map2 + map3)//{Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=1, Go=2}</span><br><span class="line">//集合相减---减去公共的元素</span><br><span class="line">println(map2 - map3)//{Java=1, JavaScript=2, HTML=3, Kotlin=4}</span><br><span class="line"></span><br><span class="line">var plus = map2.plus(map3)</span><br><span class="line">println(plus)//{Java=1, JavaScript=2, HTML=3, Kotlin=4, Python=1, Go=2}</span><br><span class="line"></span><br><span class="line">var minus = map2.minus(map3)</span><br><span class="line">println(minus)//{Java=1, JavaScript=2, HTML=3, Kotlin=4}</span><br><span class="line">//遍历Map集合</span><br><span class="line">var map4 = mapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4, "Go" to 5)</span><br><span class="line">for (en in map4.entries) {</span><br><span class="line">    println("${en.key} -&gt; ${en.value}")</span><br><span class="line">}</span><br><span class="line">for (key in map4.keys) {</span><br><span class="line">    println("${key} -&gt; ${map4[key]}")</span><br><span class="line">}</span><br><span class="line">for ((key, value) in map4) {</span><br><span class="line">    println("${key} -&gt; ${value}")</span><br><span class="line">}</span><br><span class="line">map4.forEach({</span><br><span class="line">    println("${it.key} -&gt; ${it.value}")</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line">var map5 = mutableMapOf("Java" to 1, "JavaScript" to 2, "HTML" to 3, "Kotlin" to 4, "Go" to 5)</span><br><span class="line">map5["Go"] = 0</span><br><span class="line">println(map5)//{Java=1, JavaScript=2, HTML=3, Kotlin=4, Go=0}</span><br><span class="line">map5.put("HTML", 10)</span><br><span class="line">println(map5)//{Java=1, JavaScript=2, HTML=10, Kotlin=4, Go=0}</span><br><span class="line">map5.remove("Go")</span><br><span class="line">println(map5)//{Java=1, JavaScript=2, HTML=10, Kotlin=4}</span><br><span class="line">map5.remove("Java", 2)</span><br><span class="line">println(map5)//{Java=1, JavaScript=2, HTML=10, Kotlin=4}</span><br><span class="line">map5.remove("Java", 1)</span><br><span class="line">println(map5)//{JavaScript=2, HTML=10, Kotlin=4}</span><br><span class="line">map5.putAll(hashMapOf("PHP" to 6, "C++" to 7,"JavaScript" to 8 ))</span><br><span class="line">println(map5)//{JavaScript=8, HTML=10, Kotlin=4, PHP=6, C++=7}</span><br><span class="line">//清空Map集合</span><br><span class="line">map5.clear()</span><br><span class="line">println(map5)//{}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android基础-RxJava2学习</title>
    <url>/2019/03/19/android/RxJava2%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>本文参考<a href="https://juejin.im/post/5b17560e6fb9a01e2862246f">RxJava2 只看这一篇文章就够了</a>，强烈推荐大家去看一下。</p>
<h1><span id="rxjava的组成"> RxJava的组成</span></h1>
<ul>
<li>被观察者-------Observable</li>
<li>观察者-----------Observer</li>
<li>订阅---------------subscribe</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//被观察者</span><br><span class="line">      Observable observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {</span><br><span class="line">              emitter.onNext("a");</span><br><span class="line">              emitter.onNext("b");</span><br><span class="line">              emitter.onNext("c");</span><br><span class="line">              emitter.onComplete();</span><br><span class="line">          }</span><br><span class="line">      });</span><br><span class="line">      //观察者</span><br><span class="line">      Observer observer = new Observer&lt;String&gt;() {</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onSubscribe(Disposable d) {</span><br><span class="line"></span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onNext(String s) {</span><br><span class="line">              LogUtils.e(s);</span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onError(Throwable e) {</span><br><span class="line"></span><br><span class="line">          }</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onComplete() {</span><br><span class="line"></span><br><span class="line">          }</span><br><span class="line">      };</span><br><span class="line">      //订阅</span><br><span class="line">      observable.subscribe(observer);</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="创建操作符"> 创建操作符</span></h2>
<ul>
<li>create()</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//创建一个被观察者</span><br><span class="line">    Observable&lt;String&gt;observable = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(ObservableEmitter&lt;String&gt; emitter) throws Exception {</span><br><span class="line">            emitter.onNext("Hello Java");</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>just() --------发送事件不可以超过10个</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8,9,0).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Integer integer) throws Exception {</span><br><span class="line">              LogUtils.e(integer);</span><br><span class="line">          }</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>From 操作符</li>
</ul>
<ol>
<li>fromArray() ----- 可以发送数组(数量可以大于10个)</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Integer integers[] = {0,1,2,3,4,5};</span><br><span class="line">        Observable.fromArray(integers).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Integer integer) throws Exception {</span><br><span class="line">              LogUtils.e(integer);</span><br><span class="line">          }</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>fromCallable() -----被观察者返回一个结果值给观察者</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.fromCallable(new Callable&lt;String&gt;() {</span><br><span class="line">         @Override</span><br><span class="line">         public String call() throws Exception {</span><br><span class="line">             return "hello";</span><br><span class="line">         }</span><br><span class="line">     }).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(String s) throws Exception {</span><br><span class="line">             LogUtils.e(s);</span><br><span class="line">         }</span><br><span class="line">     });</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>fromIterable() ---------可以发送一个List集合给观察者</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;String&gt;list = new ArrayList&lt;&gt;();</span><br><span class="line">   list.add("1");</span><br><span class="line">   list.add("2");</span><br><span class="line">   list.add("3");</span><br><span class="line">   list.add("4");</span><br><span class="line">   list.add("5");</span><br><span class="line">   Observable.fromIterable(list).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">       @Override</span><br><span class="line">       public void accept(String s) throws Exception {</span><br><span class="line">           LogUtils.e(s);</span><br><span class="line">       }</span><br><span class="line">   });</span><br></pre></td></tr></tbody></table></figure>
<ol start="4">
<li>fromFuture() ------- 可以发送一个Future</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">FutureTask&lt;String&gt;futureTask = new FutureTask&lt;&gt;(new Callable&lt;String&gt;() {</span><br><span class="line">     @Override</span><br><span class="line">     public String call() throws Exception {</span><br><span class="line">         return "Hello";</span><br><span class="line">     }</span><br><span class="line"> });</span><br><span class="line"> //doOnSubscribe()----- 开始订阅时才会执行</span><br><span class="line"> Observable.fromFuture(futureTask).doOnSubscribe(new Consumer&lt;Disposable&gt;() {</span><br><span class="line">     @Override</span><br><span class="line">     public void accept(Disposable disposable) throws Exception {</span><br><span class="line">         futureTask.run();//开始执行</span><br><span class="line">     }</span><br><span class="line"> }).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">     @Override</span><br><span class="line">     public void accept(String s) throws Exception {</span><br><span class="line">         LogUtils.e(s);</span><br><span class="line">     }</span><br><span class="line"> });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>defer() -------------- 只有观察者订阅时，才会创建新的被观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">String str_name = "张三";</span><br><span class="line">    public void rxjava() {</span><br><span class="line">        Observable&lt;String&gt; observable = Observable.defer(new Callable&lt;ObservableSource&lt;? extends String&gt;&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;? extends String&gt; call() throws Exception {</span><br><span class="line">                return Observable.just(str_name);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        str_name = "李四";</span><br><span class="line">        Observer observer = new Observer&lt;String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) {</span><br><span class="line">                LogUtils.e("str_name = " + s);//王五，赵六</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        str_name = "王五";</span><br><span class="line">        observable.subscribe(observer);</span><br><span class="line">        str_name = "赵六";</span><br><span class="line">        observable.subscribe(observer);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>timer() -------------当到了指定时间就发送一个0L的值给观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.timer(2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Long aLong) throws Exception {</span><br><span class="line">                LogUtils.e("along : "+aLong);//along : 0</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>interval() ------------ 每隔一段时间就会发送一个事件（从0开始不断增加1的数字）</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.interval(2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Long aLong) throws Exception {</span><br><span class="line">              //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">              LogUtils.e("along : "+aLong);//along : 0， along : 1</span><br><span class="line">          }</span><br><span class="line">      });</span><br><span class="line">      </span><br><span class="line">      //延迟5s后开始执行</span><br><span class="line">      Observable.interval(5,2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void accept(Long aLong) throws Exception {</span><br><span class="line">              //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">              LogUtils.e("along : "+aLong);//along : 0， along : 1</span><br><span class="line">          }</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>intervalRange() ------------ 可以指定发送事件的开始值，数量，其他的和interval()一样</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//start：起始数值 -------- 10</span><br><span class="line">//count：发射数量 -------- 3</span><br><span class="line">//initialDelay：延迟执行时间-------- 5s</span><br><span class="line">//period：发射周期时间------2s</span><br><span class="line">//unit：时间单位</span><br><span class="line">//数字从10开始，传递3次，第一次执行延迟5s，每隔2s执行一次</span><br><span class="line">Observable.intervalRange(10,3,5,2, TimeUnit.SECONDS).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Long aLong) throws Exception {</span><br><span class="line">        //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">        LogUtils.e("along : "+aLong);//along : 10， along : 11， along : 12</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">//start：起始数值 -------- 10</span><br><span class="line">//count：发射数量 -------- 3</span><br><span class="line">//initialDelay：延迟执行时间-------- 5s</span><br><span class="line">//period：发射周期时间------2s</span><br><span class="line">//unit：时间单位</span><br><span class="line">//Scheduler：线程调度</span><br><span class="line">//数字从10开始，传递3次，第一次执行延迟5s，每隔2s执行一次，在新线程中执行</span><br><span class="line">Observable.intervalRange(10,3,5,2, TimeUnit.SECONDS, Schedulers.newThread()).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Long aLong) throws Exception {</span><br><span class="line">        LogUtils.e("当前线程 ："+Thread.currentThread().getName());//RxNewThreadScheduler</span><br><span class="line">        //每隔2s 执行一次 along : 从0开始每次回增加1</span><br><span class="line">        LogUtils.e("along : "+aLong);//along : 10， along : 11， along : 12</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>range() ----------- 发送一定范围内的事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//从10开始，执行3次</span><br><span class="line">    Observable.range(10,3).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception {</span><br><span class="line">            LogUtils.e("integer : "+integer);//10,11,12</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>rangeLong() ----和range()方法类似，只是数据类型为Long</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//从10开始，执行3次</span><br><span class="line">     Observable.rangeLong(10,3).subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(Long aLong) throws Exception {</span><br><span class="line">             LogUtils.e("along : "+aLong);//10,11,12</span><br><span class="line">         }</span><br><span class="line">     });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>empty() &amp; never() &amp; error()</li>
</ul>
<ol>
<li>empty()  ---------------  直接发送 onComplete() 事件</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//只会进入 onSubscribe(),onComplete()方法</span><br><span class="line">    Observable.empty().subscribe(new Observer&lt;Object&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public void onSubscribe(Disposable d) {</span><br><span class="line">            LogUtils.e("==================onSubscribe");</span><br><span class="line">        }</span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(Object o) {</span><br><span class="line">            LogUtils.e("==================onNext");</span><br><span class="line">        }</span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) {</span><br><span class="line">            LogUtils.e("==================onError " + e);</span><br><span class="line">        }</span><br><span class="line">        @Override</span><br><span class="line">        public void onComplete() {</span><br><span class="line">            LogUtils.e("==================onComplete");</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<ol start="2">
<li>never()  ---------------- 不发生任何时间</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//只会进入 onSubscribe()方法</span><br><span class="line">      Observable.never().subscribe(new Observer&lt;Object&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void onSubscribe(Disposable d) {</span><br><span class="line">              LogUtils.e("==================onSubscribe");</span><br><span class="line">          }</span><br><span class="line">          @Override</span><br><span class="line">          public void onNext(Object o) {</span><br><span class="line">              LogUtils.e("==================onNext");</span><br><span class="line">          }</span><br><span class="line">          @Override</span><br><span class="line">          public void onError(Throwable e) {</span><br><span class="line">              LogUtils.e("==================onError " + e);</span><br><span class="line">          }</span><br><span class="line">          @Override</span><br><span class="line">          public void onComplete() {</span><br><span class="line">              LogUtils.e("==================onComplete");</span><br><span class="line">          }</span><br><span class="line">      });</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>error() -------------------发送onError()事件</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//只会进入 onSubscribe(),onError()方法</span><br><span class="line">       Observable.error(new NullPointerException()).subscribe(new Observer&lt;Object&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void onSubscribe(Disposable d) {</span><br><span class="line">               LogUtils.e("==================onSubscribe");</span><br><span class="line">           }</span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(Object o) {</span><br><span class="line">               LogUtils.e("==================onNext");</span><br><span class="line">           }</span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) {</span><br><span class="line">               LogUtils.e("==================onError " + e);</span><br><span class="line">           }</span><br><span class="line">           @Override</span><br><span class="line">           public void onComplete() {</span><br><span class="line">               LogUtils.e("==================onComplete");</span><br><span class="line">           }</span><br><span class="line">       });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="转换操作符"> 转换操作符</span></h2>
<ul>
<li>map() -------------- 将被观察者发送的数据类型转换成其他的类型</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5).map(new Function&lt;Integer, String&gt;() {</span><br><span class="line">         @Override</span><br><span class="line">         public String apply(Integer integer) throws Exception {</span><br><span class="line">             return "当前值为："+integer;</span><br><span class="line">         }</span><br><span class="line">     }).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">         @Override</span><br><span class="line">         public void accept(String s) throws Exception {</span><br><span class="line">             LogUtils.e(s);</span><br><span class="line">         }</span><br><span class="line">     });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>flatMap() ----------------- 作用于map() 方法类似，返回一个 新的Observerable (无序： flatMap()可能交错的发送事件,最终结果的顺序可能并是不原始Observable发送时的顺序 )</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5).flatMap(new Function&lt;Integer, ObservableSource&lt;?&gt;&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public ObservableSource&lt;?&gt; apply(Integer integer) throws Exception {</span><br><span class="line">            List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                list.add("当前值为："+integer);</span><br><span class="line">            if (integer == 3) {</span><br><span class="line">                return Observable.fromIterable(list).delay(10, TimeUnit.MILLISECONDS);//延迟10毫秒</span><br><span class="line">            } else {</span><br><span class="line">                return Observable.fromIterable(list);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }).subscribe(new Consumer&lt;Object&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Object o) throws Exception {</span><br><span class="line">            LogUtils.e(o.toString());//当前值为：1,2,4,5,3 ------无序的</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>concatMap() ------------ 作用和flatMap() 方法一样（有序：concatMap()转发事件的顺序是有序的）</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5).concatMap(new Function&lt;Integer, ObservableSource&lt;?&gt;&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public ObservableSource&lt;?&gt; apply(Integer integer) throws Exception {</span><br><span class="line">                List&lt;String&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">                    list.add("当前值为："+integer);</span><br><span class="line">                if (integer == 3) {</span><br><span class="line">                    return Observable.fromIterable(list).delay(10, TimeUnit.MILLISECONDS);//延迟10毫秒</span><br><span class="line">                } else {</span><br><span class="line">                    return Observable.fromIterable(list);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer&lt;Object&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Object o) throws Exception {</span><br><span class="line">                LogUtils.e(o.toString());//当前值为：1,2,3,4,5, ------有序的</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>buffer() ------------- 从需要发送的事件中获取一定数量的事件，将这些事件存放到缓冲区中一并发出</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">//count: 缓冲区元素的数量</span><br><span class="line">//skip: 就代表缓冲区满了之后，发送下一次事件的时候要跳过的元素数量</span><br><span class="line">Observable.just(1, 2, 3, 4, 5)</span><br><span class="line">        .buffer(3, 2)</span><br><span class="line">        .subscribe(new Consumer&lt;List&lt;Integer&gt;&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(List&lt;Integer&gt; integers) throws Exception {</span><br><span class="line">                LogUtils.e("缓冲区大小: " + integers.size());</span><br><span class="line">                String str = "";</span><br><span class="line">                for (int i = 0; i &lt; integers.size(); i++) {</span><br><span class="line">                    str = str + "," + integers.get(i);</span><br><span class="line">                }</span><br><span class="line">                LogUtils.e("当前元素: " + str);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>groupBy() ---------------- 将发送的数据进行分组，每个分组都会返回一个被观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">                .groupBy(new Function&lt;Integer, Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer) throws Exception {</span><br><span class="line">                        return integer % 2;//分为2组</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Consumer&lt;GroupedObservable&lt;Integer, Integer&gt;&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(GroupedObservable&lt;Integer, Integer&gt; integerIntegerGroupedObservable) throws Exception {</span><br><span class="line">                        LogUtils.e(" 第" + integerIntegerGroupedObservable.getKey()+"组");</span><br><span class="line">                        integerIntegerGroupedObservable.subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">                            @Override</span><br><span class="line">                            public void accept(Integer integer) throws Exception {</span><br><span class="line">                                LogUtils.e("第" + integerIntegerGroupedObservable.getKey() + "组，当前元素: " + integer);</span><br><span class="line">                            }</span><br><span class="line">                        });</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>scan() ---------------- 将数据按照一定的逻辑合并数据</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">                .scan(new BiFunction&lt;Integer, Integer, Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer1, Integer integer2) throws Exception {</span><br><span class="line">                        LogUtils.e("integer1 = "+integer1);//上一次的结果</span><br><span class="line">                        LogUtils.e("integer2 = "+integer2);</span><br><span class="line">                        return integer1 +integer2;</span><br><span class="line">                    }</span><br><span class="line">                }).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception {</span><br><span class="line">                LogUtils.e("integer1 + integer2 ="+integer);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>window() --------------将发送数据 按指定数量进行分组</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7)</span><br><span class="line">             .window(3)</span><br><span class="line">               .subscribe(new Consumer&lt;Observable&lt;Integer&gt;&gt;() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public void accept(Observable&lt;Integer&gt; integerObservable) throws Exception {</span><br><span class="line">                       integerObservable.subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">                           @Override</span><br><span class="line">                           public void accept(Integer integer) throws Exception {</span><br><span class="line">                               LogUtils.e("当前元素: " + integer);</span><br><span class="line">                           }</span><br><span class="line">                       });</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="组合操作符"> 组合操作符</span></h2>
<ul>
<li>zip()  -------------- 将多个被观察者合并，根据各个被观察者发送事件的顺序一个个结合起来，最终发送的事件数量会与源 Observable 中最少事件的数量一样。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.zip(</span><br><span class="line">        Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s1 = "A" + aLong;</span><br><span class="line">                LogUtils.d("A 发送的事件: " + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            }</span><br><span class="line">        }), Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s2 = "B" + aLong;</span><br><span class="line">                LogUtils.d("B 发送的事件: " + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            }</span><br><span class="line">        }), new BiFunction&lt;String, String, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(String s, String s2) throws Exception {</span><br><span class="line">                String res = s + s2;</span><br><span class="line">                LogUtils.d("A &amp; B 发送的事件: " + res);</span><br><span class="line">                return res;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(String s) throws Exception {</span><br><span class="line">        LogUtils.d( "onNext: " + s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>concat() -------------- 将多个观察者组合在一起，然后按照之前的发送顺序发送事件，最多只能合并4个被观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.concat(</span><br><span class="line">               Observable.just(1,2),</span><br><span class="line">               Observable.just(3,4),</span><br><span class="line">               Observable.just(5,6),</span><br><span class="line">               Observable.just(7,8)</span><br><span class="line">       ).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void accept(Integer integer) throws Exception {</span><br><span class="line">               LogUtils.e("当前数字："+integer);//1,2,3,4,5,6,7,8</span><br><span class="line">           }</span><br><span class="line">       });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>concatArray() ------------ 作用和concat()方法一样，可以发送多于4个的被观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.concatArray(</span><br><span class="line">                Observable.just(1,2),</span><br><span class="line">                Observable.just(3,4),</span><br><span class="line">                Observable.just(5,6),</span><br><span class="line">                Observable.just(7,8),</span><br><span class="line">                Observable.just(9,10),</span><br><span class="line">                Observable.just(11,12)</span><br><span class="line">        ).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception {</span><br><span class="line">                LogUtils.e("当前数字："+integer);//1,2,3,4,5,6,7,8,9,10,11,12</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>merge() -------------- 作用和concat() 方法一样，只不过concat()是串行发送，而merge() 是并行发送事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.merge(</span><br><span class="line">               Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                       .map(new Function&lt;Long,String&gt;() {</span><br><span class="line">                           @Override</span><br><span class="line">                           public String apply(Long aLong) throws Exception {</span><br><span class="line">                               return "A"+aLong;</span><br><span class="line">                           }</span><br><span class="line">                       }),</span><br><span class="line">               Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                       .map(new Function&lt;Long,String&gt;() {</span><br><span class="line">                           @Override</span><br><span class="line">                           public String apply(Long aLong) throws Exception {</span><br><span class="line">                               return "B"+aLong;</span><br><span class="line">                           }</span><br><span class="line">                       })</span><br><span class="line">       ).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void accept(String s) throws Exception {</span><br><span class="line">               LogUtils.e(s);//A，B 交替出现---------- A0,B0,A1,B1,A2,B2</span><br><span class="line">           }</span><br><span class="line">       });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>combineLatest() ------------ 作用和zip()类似，但是 combineLatest() 发送事件的序列是与发送的时间线有关的，当 combineLatest() 中所有的 Observable 都发送了事件，只要其中有一个 Observable 发送事件，这个事件就会和其他 Observable 最近发送的事件结合起来发送。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.combineLatest(</span><br><span class="line">        Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s1 = "A" + aLong;</span><br><span class="line">                LogUtils.d("A 发送的事件: " + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            }</span><br><span class="line">        }), Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s2 = "B" + aLong;</span><br><span class="line">                LogUtils.d("B 发送的事件: " + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            }</span><br><span class="line">        }), new BiFunction&lt;String, String, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(String s, String s2) throws Exception {</span><br><span class="line">                String res = s + s2;</span><br><span class="line">                LogUtils.d("A &amp; B 发送的事件: " + res);</span><br><span class="line">                return res;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer&lt;String&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(String s) throws Exception {</span><br><span class="line">        LogUtils.d( "onNext: " + s);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>concatArrayDelayError() &amp; mergeArrayDelayError()&amp; combineLatestDelayError() -------------- 如果有一个被观察者发送了一个Error事件，那么就结束发送，如果你想将Error() 事件延迟到所有被观察者都发送完事件后再执行。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.concatArrayDelayError(</span><br><span class="line">         Observable.just(1,2),</span><br><span class="line">         Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">             @Override</span><br><span class="line">             public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                 e.onNext(3);</span><br><span class="line">                 e.onError(new NullPointerException());</span><br><span class="line">                 e.onNext(4);</span><br><span class="line">             }</span><br><span class="line">         }),</span><br><span class="line">         Observable.just(5,6)</span><br><span class="line"> ).subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">     @Override</span><br><span class="line">     public void onSubscribe(Disposable d) {</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onNext(Integer integer) {</span><br><span class="line">         LogUtils.e("onNext : 当前数字："+integer);//1,2,3,5,6</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onError(Throwable e) {</span><br><span class="line">         LogUtils.e("onError : "+e.toString());//java.lang.NullPointerException</span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     public void onComplete() {</span><br><span class="line"></span><br><span class="line">     }</span><br><span class="line"> });</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.mergeArrayDelayError(</span><br><span class="line">                Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                        .map(new Function&lt;Long, String&gt;() {</span><br><span class="line">                            @Override</span><br><span class="line">                            public String apply(Long aLong) throws Exception {</span><br><span class="line">                                return "A" + aLong;</span><br><span class="line">                            }</span><br><span class="line">                        }),</span><br><span class="line">                Observable.create(new ObservableOnSubscribe&lt;String&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception {</span><br><span class="line">                        e.onNext("C1");</span><br><span class="line">                        e.onNext("C2");</span><br><span class="line">                        e.onNext("C3");</span><br><span class="line">                        e.onError(new NullPointerException());</span><br><span class="line">                        e.onNext("C4");</span><br><span class="line">                        e.onNext("C5");</span><br><span class="line">                    }</span><br><span class="line">                }),</span><br><span class="line">                Observable.interval(1, TimeUnit.SECONDS)</span><br><span class="line">                        .map(new Function&lt;Long, String&gt;() {</span><br><span class="line">                            @Override</span><br><span class="line">                            public String apply(Long aLong) throws Exception {</span><br><span class="line">                                return "B" + aLong;</span><br><span class="line">                            }</span><br><span class="line">                        })</span><br><span class="line">        ).subscribe(new Observer&lt;String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) { }</span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) {</span><br><span class="line">                LogUtils.e(s);</span><br><span class="line">            }</span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">            }</span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() { }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; observable1 = Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s1 = "A" + aLong;</span><br><span class="line">                LogUtils.d("A 发送的事件: " + s1);</span><br><span class="line">                return s1;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        Observable&lt;String&gt; observable2 = Observable.intervalRange(1, 4, 1, 1, TimeUnit.SECONDS).map(new Function&lt;Long, String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public String apply(Long aLong) throws Exception {</span><br><span class="line">                String s2 = "B" + aLong;</span><br><span class="line">                LogUtils.d("B 发送的事件: " + s2);</span><br><span class="line">                return s2;</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        Observable&lt;String&gt; observable3 = Observable.create(new ObservableOnSubscribe&lt;String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;String&gt; e) throws Exception {</span><br><span class="line">                e.onNext("C1");</span><br><span class="line">                e.onNext("C2");</span><br><span class="line">                e.onNext("C3");</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">                e.onNext("C4");</span><br><span class="line">                e.onNext("C5");</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line">        Observable.combineLatestDelayError(new ObservableSource[]{observable1, observable2, observable3}, new Function() {</span><br><span class="line">            @Override</span><br><span class="line">            public Object apply(Object o) throws Exception {</span><br><span class="line">                Object[] objects = (Object[]) o;</span><br><span class="line">                String res = "";</span><br><span class="line">                for (int i = 0; i &lt; objects.length; i++) {</span><br><span class="line">                    res = res + String.valueOf(objects[i]);</span><br><span class="line">                }</span><br><span class="line">                LogUtils.d("A &amp; B &amp; C 发送的事件: " + res);</span><br><span class="line">                return res;</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Observer&lt;String&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) {</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(String s) {</span><br><span class="line">                LogUtils.d(s);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line">                LogUtils.e(e.toString());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>reduce()  ------------ 将所有数据聚合在一起才会发送事件给观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8)</span><br><span class="line">                .reduce(new BiFunction&lt;Integer, Integer, Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Integer integer, Integer integer2) throws Exception {</span><br><span class="line">                        int res = integer + integer2;</span><br><span class="line">                        LogUtils.d("integer : " + integer);</span><br><span class="line">                        LogUtils.d("integer2 : " + integer2);</span><br><span class="line">                        LogUtils.d("res : " + res);</span><br><span class="line">                        return res;</span><br><span class="line">                    }</span><br><span class="line">                }).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception {</span><br><span class="line">                LogUtils.d("accept : "+ integer);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>collect()  ------------ 将数据收集到数据结构当中。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8)</span><br><span class="line">                .collect(new Callable&lt;ArrayList&lt;Integer&gt;&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public ArrayList&lt;Integer&gt; call() throws Exception {</span><br><span class="line">                        return new ArrayList&lt;&gt;();</span><br><span class="line">                    }</span><br><span class="line">                }, new BiConsumer&lt;ArrayList&lt;Integer&gt;, Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(ArrayList&lt;Integer&gt; integers, Integer integer) throws Exception {</span><br><span class="line">                        integers.add(integer);</span><br><span class="line">                    }</span><br><span class="line">                }).subscribe(new Consumer&lt;ArrayList&lt;Integer&gt;&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(ArrayList&lt;Integer&gt; integers) throws Exception {</span><br><span class="line">                LogUtils.d(integers);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>startWith() &amp; startWithArray()  ------------ 在发送事件之前追加事件，startWith() 追加一个事件，startWithArray() 可以追加多个事件。追加的事件会先发出</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(6, 7, 8)</span><br><span class="line">                .startWithArray(3, 4, 5)</span><br><span class="line">                .startWith(2)</span><br><span class="line">                .startWithArray(0, 1)</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d(String.valueOf(integer));</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>count()  ------------ 返回被观察者发送事件的数量</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6, 7, 8)</span><br><span class="line">                .count()</span><br><span class="line">                .subscribe(new Consumer&lt;Long&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Long aLong) throws Exception {</span><br><span class="line">                        LogUtils.d("发送数量：" + aLong);//8</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="功能操作符"> 功能操作符</span></h2>
<ul>
<li>delay() -------------- 延迟一段事件发送事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .delay(2, TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnEach() ---------------- Observable 每发送一个之前都会先回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">              e.onNext(1);</span><br><span class="line">              e.onNext(2);</span><br><span class="line">              e.onNext(3);</span><br><span class="line">              e.onNext(4);</span><br><span class="line">              e.onComplete();</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">              .doOnEach(new Consumer&lt;Notification&lt;Integer&gt;&gt;() {</span><br><span class="line">                  @Override</span><br><span class="line">                  public void accept(Notification&lt;Integer&gt; integerNotification) throws Exception {</span><br><span class="line">                      LogUtils.d("doOnEach 方法 "+ integerNotification.getValue());</span><br><span class="line">                  }</span><br><span class="line">              })</span><br><span class="line">              .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                  @Override</span><br><span class="line">                  public void onSubscribe(Disposable d) {</span><br><span class="line">                      LogUtils.d("onSubscribe()方法");</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onNext(Integer integer) {</span><br><span class="line">                      LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onError(Throwable e) {</span><br><span class="line">                  }</span><br><span class="line"></span><br><span class="line">                  @Override</span><br><span class="line">                  public void onComplete() {</span><br><span class="line">                      LogUtils.d("onComplete()方法");</span><br><span class="line">                  }</span><br><span class="line">              });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnNext() ----------------- Observable 每发送 onNext() 之前都会先回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           }</span><br><span class="line">       })</span><br><span class="line">               .doOnNext(new Consumer&lt;Integer&gt;(){</span><br><span class="line">                   @Override</span><br><span class="line">                   public void accept(Integer integer) throws Exception {</span><br><span class="line">                       LogUtils.d("doOnNext 方法 "+ integer);</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doAfterNext() -------------- Observable 每发送 onNext() 之后都会回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .doAfterNext(new Consumer&lt;Integer&gt;(){</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("doAfterNext 方法 "+ integer);</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnComplete ------------------ Observable 每发送 onComplete() 之前都会回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           }</span><br><span class="line">       })</span><br><span class="line">             .doOnComplete(new Action() {</span><br><span class="line">                 @Override</span><br><span class="line">                 public void run() throws Exception {</span><br><span class="line">                     LogUtils.d("doOnComplete 方法");</span><br><span class="line">                 }</span><br><span class="line">             })</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnError() ---------------- Observable 每发送 onError() 之前都会回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .doOnError(new Consumer&lt;Throwable&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Throwable throwable) throws Exception {</span><br><span class="line">                        LogUtils.e("doOnError() :"+throwable.toString());</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnSubscribe() ----------------- Observable 每发送 onSubscribe() 之前都会回调这个方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onNext(4);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">        .doOnSubscribe(new Consumer&lt;Disposable&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Disposable disposable) throws Exception {</span><br><span class="line">               LogUtils.d("doOnSubscribe()方法");</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) {</span><br><span class="line">                LogUtils.d("onSubscribe()方法");</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer integer) {</span><br><span class="line">                LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line">                LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line">                LogUtils.d("onComplete()方法");</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnDispose() -------------- 当调用 Disposable 的取消订阅dispose()方法之后回调该方法</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onComplete();</span><br><span class="line">           }</span><br><span class="line">       })</span><br><span class="line">               .doOnDispose(new Action() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public void run() throws Exception {</span><br><span class="line">                       LogUtils.d("doOnDispose（）方法");</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                   private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                       this.disposable = d;</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   if(integer==2){</span><br><span class="line">                       disposable.dispose();//取消订阅</span><br><span class="line">                   }</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                       LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnLifecycle() ------------- 在回调 onSubscribe 之前回调该方法的第一个参数的回调方法，可以使用该回调方法决定是否取消订阅</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .doOnLifecycle(new Consumer&lt;Disposable&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Disposable disposable) throws Exception {</span><br><span class="line">                        LogUtils.d("doOnLifecycle accept");</span><br><span class="line">                        //disposable.dispose();//取消订阅</span><br><span class="line">                    }</span><br><span class="line">                }, new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doOnLifecycle Action ");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .doOnDispose(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doOnDispose（）方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                        this.disposable = d;</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                        if (integer == 2) {</span><br><span class="line">                            disposable.dispose();//取消订阅</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doOnTerminate() &amp; doAfterTerminate() --------------- doOnTerminate 是在 onError 或者 onComplete 发送之前回调，而 doAfterTerminate 则是 onError 或者 onComplete 发送之后回调。如果取消订阅之后 doAfterTerminate() 就不会被回调</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .doOnTerminate(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doOnTerminate() 方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .doAfterTerminate(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doAfterTerminate() 方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>doFinally() ------------- 在所有事件发送完毕之后回调该方法，doFinally() 在取消订阅后也都会被回调，且都会在事件序列的最后。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .doFinally(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doFinally() 方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .doAfterTerminate(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doAfterTerminate() 方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .doOnDispose(new Action() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() throws Exception {</span><br><span class="line">                        LogUtils.d("doOnDispose（）方法");</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line">                    private Disposable disposable;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                        this.disposable = d;</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                        if (integer == 2) {</span><br><span class="line">                            disposable.dispose();//取消订阅</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>onErrorReturn() ------------------- 当接受到一个 onError() 事件之后回调，返回的值会回调 onNext() 方法，并正常结束该事件序列</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .onErrorReturn(new Function&lt;Throwable, Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public Integer apply(Throwable throwable) throws Exception {</span><br><span class="line">                        LogUtils.e("onErrorReturn() 方法"+throwable.toString());</span><br><span class="line">                        return 404;</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>onErrorResumeNext() ----------- 当接收到 onError() 事件时，返回一个新的 Observable，并正常结束事件序列</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onError(new NullPointerException());</span><br><span class="line">           }</span><br><span class="line">       })</span><br><span class="line">               .onErrorResumeNext(new Function&lt;Throwable, ObservableSource&lt;? extends Integer&gt;&gt;() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public ObservableSource&lt;? extends Integer&gt; apply(Throwable throwable) throws Exception {</span><br><span class="line">                       LogUtils.e("onErrorResumeNext()方法"+throwable.toString());</span><br><span class="line">                       return Observable.just(5,6,7,8,9);</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                       LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>onExceptionResumeNext() -------------- 与 onErrorResumeNext() 作用基本一致，但是这个方法只能捕捉 Exception</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onError(new Exception("111"));</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">               .onExceptionResumeNext(new Observable&lt;Integer&gt;() {</span><br><span class="line">                   @Override</span><br><span class="line">                   protected void subscribeActual(Observer&lt;? super Integer&gt; observer) {</span><br><span class="line">                       observer.onNext(404);</span><br><span class="line">                       observer.onNext(405);</span><br><span class="line">                       observer.onComplete();</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>retry() ----------------- 如果出现错误事件，则会重新发送所有事件序列。times 是代表重新发的次数</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">        e.onNext(1);</span><br><span class="line">        e.onNext(2);</span><br><span class="line">        e.onNext(3);</span><br><span class="line">        e.onNext(4);</span><br><span class="line">        e.onError(new NullPointerException());</span><br><span class="line">    }</span><br><span class="line">})</span><br><span class="line">   .retry(2)</span><br><span class="line">        .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) {</span><br><span class="line">                LogUtils.d("onSubscribe()方法");</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Integer integer) {</span><br><span class="line">                LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line">                LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line">                LogUtils.d("onComplete()方法");</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>retryUntil() --------------- 出现错误事件之后，可以通过此方法判断是否继续发送事件。</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">final int[] i = {0};</span><br><span class="line">       Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">           @Override</span><br><span class="line">           public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">               e.onNext(1);</span><br><span class="line">               e.onNext(2);</span><br><span class="line">               e.onNext(3);</span><br><span class="line">               e.onNext(4);</span><br><span class="line">               e.onNext(5);</span><br><span class="line">               e.onError(new NullPointerException());</span><br><span class="line">           }</span><br><span class="line">       })</span><br><span class="line">               .retryUntil(new BooleanSupplier() {</span><br><span class="line">                   @Override</span><br><span class="line">                   public boolean getAsBoolean() throws Exception {</span><br><span class="line">                       if (i[0] &gt;= 6) {//停止继续发送</span><br><span class="line">                           return true;</span><br><span class="line">                       } else {</span><br><span class="line">                           return false;</span><br><span class="line">                       }</span><br><span class="line">                   }</span><br><span class="line">               })</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       i[0] += integer;</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                       LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>retryWhen() ---------------- 当被观察者接收到异常或者错误事件时会回调该方法，这个方法会返回一个新的被观察者。如果返回的被观察者发送 Error 事件则之前的被观察者不会继续发送事件，如果发送正常事件则之前的被观察者会继续不断重试发送事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">                e.onNext(5);</span><br><span class="line">                e.onError(new NullPointerException());</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .retryWhen(new Function&lt;Observable&lt;Throwable&gt;, ObservableSource&lt;?&gt;&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public ObservableSource&lt;?&gt; apply(Observable&lt;Throwable&gt; throwableObservable) throws Exception {</span><br><span class="line">                        return throwableObservable.flatMap(new Function&lt;Throwable, ObservableSource&lt;?&gt;&gt;() {</span><br><span class="line">                            @Override</span><br><span class="line">                            public ObservableSource&lt;?&gt; apply(Throwable throwable) throws Exception {</span><br><span class="line">                                if (throwable instanceof NullPointerException){</span><br><span class="line">                                    return Observable.error(new Throwable("终止啦"));</span><br><span class="line">                                }else{</span><br><span class="line">                                    return Observable.just(6,7,8,9);</span><br><span class="line">                                }</span><br><span class="line">                            }</span><br><span class="line">                        });</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>repeat() -------------- 重复发送被观察者的事件，times 为发送次数</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .repeat(2)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>repeatWhen() ------------------ 这个方法可以会返回一个新的被观察者设定一定逻辑来决定是否重复发送事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .repeatWhen(new Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public ObservableSource&lt;?&gt; apply(Observable&lt;Object&gt; objectObservable) throws Exception {</span><br><span class="line">                        return Observable.empty();//直接发送 onComplete() 事件</span><br><span class="line">//                        return Observable.just(1);//不发送任何事件</span><br><span class="line">//                        return Observable.error(new Exception("404"));//发送 onError() 事件</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.e("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>subscribeOn() ------------ 指定被观察者的线程，要注意的时，如果多次调用此方法，只有第一次有效</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                LogUtils.d("当前线程："+Thread.currentThread().getName());</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .subscribeOn(Schedulers.newThread())</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                        LogUtils.d("onSubscribe()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                        LogUtils.d("onNext()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                        LogUtils.d("onError()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                        LogUtils.d("onComplete()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>observeOn() ----------------- 指定观察者的线程，每指定一次就会生效一次</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                LogUtils.d("当前线程："+Thread.currentThread().getName());</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">                e.onNext(3);</span><br><span class="line">                e.onNext(4);</span><br><span class="line">//                e.onError(new NullPointerException());</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .subscribeOn(Schedulers.newThread())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                        LogUtils.d("onSubscribe()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                        LogUtils.d("onNext()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                        LogUtils.d("onError()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                        LogUtils.d("onComplete()方法—当前线程："+Thread.currentThread().getName());</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="过滤操作符"> 过滤操作符</span></h2>
<ul>
<li>filter() -------------- 通过一定逻辑来过滤被观察者发送的事件，如果返回 true 则会发送事件，否则不会发送</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 5, 6)</span><br><span class="line">                .filter(new Predicate&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception {</span><br><span class="line">                        if (integer % 2 == 0) {</span><br><span class="line">                            return true;</span><br><span class="line">                        } else {</span><br><span class="line">                            return false;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                })</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>ofType() ----------------- 可以过滤不符合该类型事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just("one","two","three",1,2,3)</span><br><span class="line">               .ofType(Integer.class)</span><br><span class="line">               .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onSubscribe(Disposable d) {</span><br><span class="line">                       LogUtils.d("onSubscribe()方法");</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onNext(Integer integer) {</span><br><span class="line">                       LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onError(Throwable e) {</span><br><span class="line">                       LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                   }</span><br><span class="line"></span><br><span class="line">                   @Override</span><br><span class="line">                   public void onComplete() {</span><br><span class="line">                       LogUtils.d("onComplete()方法");</span><br><span class="line">                   }</span><br><span class="line">               });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>skip() &amp; skipLast() --------------- 跳过正序某些事件，count 代表跳过事件的数量</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6)</span><br><span class="line">                .skip(2)//跳过前面2个事件</span><br><span class="line">                .skipLast(2)//跳过后面2个事件</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>distinct() ------------ 过滤事件序列中的重复事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,4,3,2,1)</span><br><span class="line">                .distinct()</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);//1,2,3,4</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>distinctUntilChanged() ---------------- 过滤掉连续重复的事件</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,4,3,2,1)</span><br><span class="line">                .distinctUntilChanged()</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);//1，2，3，4，3，2，1</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>take() &amp; takeLast() --------------------- 控制观察者接收的事件的数量</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5,6,7,8,9)</span><br><span class="line">                .take(3)//只接收前面3个</span><br><span class="line">//                .takeLast(2)//只接收后面2个</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>debounce() ----------------- 如果两件事件发送的时间间隔小于设定的时间间隔则前一件事件就不会发送给观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onNext(1);</span><br><span class="line">                Thread.sleep(900);</span><br><span class="line">                e.onNext(2);</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .debounce(1,TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(new Observer&lt;Integer&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Integer integer) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + integer);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>firstElement() &amp;&amp; lastElement() ----------------- firstElement() 取事件序列的第一个元素，lastElement() 取事件序列的最后一个元素</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .firstElement()</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("firstElement() 方法 " + integer);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">        Observable.just(1, 2, 3, 4)</span><br><span class="line">                .lastElement()</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("lastElement() 方法 " + integer);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>elementAt() &amp; elementAtOrError() -------------- elementAt() 可以指定取出事件序列中事件，但是输入的 index 超出事件序列的总数的话就不会出现任何结果。这种情况下，你想发出异常信息的话就用 elementAtOrError()</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .elementAt(4)</span><br><span class="line">                .subscribe(new Consumer &lt; Integer &gt; () {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("elementAt() 方法 " + integer);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .elementAtOrError(4)//报错</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("elementAtOrError() 方法 " + integer);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<h2><span id="条件操作符"> 条件操作符</span></h2>
<ul>
<li>all() ---------------- 判断事件序列是否全部满足某个事件，如果都满足则返回 true，反之则返回 false</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4)</span><br><span class="line">                .all(new Predicate&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception {</span><br><span class="line">                        return integer &lt; 5;</span><br><span class="line">                    }</span><br><span class="line">                }).subscribe(new Consumer&lt;Boolean&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Boolean aBoolean) throws Exception {</span><br><span class="line">                LogUtils.d("aBoolean : " + aBoolean);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>takeWhile() ------------- 可以设置条件，当某个数据满足条件时就会发送该数据，反之则不发送</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">                .takeWhile(new Predicate&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public boolean test(Integer integer) throws Exception {</span><br><span class="line">                        return integer &lt; 4;//如果第一条数据没有满足条件，后面的都不会进行</span><br><span class="line">                    }</span><br><span class="line">                }).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer integer) throws Exception {</span><br><span class="line">                LogUtils.d("integer : " + integer);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>skipWhile() ---------- 可以设置条件，当某个数据满足条件时不发送该数据，反之则发送</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">        .skipWhile(new Predicate&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public boolean test(Integer integer) throws Exception {</span><br><span class="line">                return integer &lt; 4;//当满足条件时，后面的都运行</span><br><span class="line">            }</span><br><span class="line">        }).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">    @Override</span><br><span class="line">    public void accept(Integer integer) throws Exception {</span><br><span class="line">        LogUtils.d("integer : " + integer);</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>takeUntil() -------------- 可以设置条件，当事件满足此条件时，下一次的事件就不会被发送了</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1, 2, 3, 4, 3, 2)</span><br><span class="line">            .takeUntil(new Predicate&lt;Integer&gt;() {</span><br><span class="line">                @Override</span><br><span class="line">                public boolean test(Integer integer) throws Exception {</span><br><span class="line">                    return integer &gt;= 3;//当满足条件后，从下一次的事件开始都不会发送了</span><br><span class="line">                }</span><br><span class="line">            }).subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">        @Override</span><br><span class="line">        public void accept(Integer integer) throws Exception {</span><br><span class="line">            LogUtils.d("integer : " + integer);</span><br><span class="line">        }</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>skipUntil() ------------ 当 skipUntil() 中的 Observable 发送事件了，原来的 Observable 才会发送事件给观察者</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.intervalRange(1, 5, 0, 1, TimeUnit.SECONDS)</span><br><span class="line">                .skipUntil(Observable.intervalRange(1, 3, 2, 1, TimeUnit.SECONDS))</span><br><span class="line">                .subscribe(new Observer&lt;Long&gt;() {</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onSubscribe(Disposable d) {</span><br><span class="line">                        LogUtils.d("onSubscribe()方法");</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onNext(Long along) {</span><br><span class="line">                        LogUtils.d("onNext()方法 : " + along);</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onError(Throwable e) {</span><br><span class="line">                        LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    public void onComplete() {</span><br><span class="line">                        LogUtils.d("onComplete()方法");</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>sequenceEqual() --------------- 判断两个 Observable 发送的事件是否相同</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.sequenceEqual(Observable.just(1, 2, 3), Observable.just(1, 2, 3))</span><br><span class="line">                .subscribe(new Consumer&lt;Boolean&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Boolean aBoolean) throws Exception {</span><br><span class="line">                        LogUtils.d("aBoolean : " + aBoolean);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>contains() ------------- 判断事件序列中是否含有某个元素，如果有则返回 true，如果没有则返回 false</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.just(1,2,3,4,5)</span><br><span class="line">                .contains(3)</span><br><span class="line">                .subscribe(new Consumer&lt;Boolean&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Boolean aBoolean) throws Exception {</span><br><span class="line">                        LogUtils.d("aBoolean : " + aBoolean);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>isEmpty() --------------- 判断事件序列是否为空 ( true ：空 )</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">          @Override</span><br><span class="line">          public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">              e.onComplete();</span><br><span class="line">          }</span><br><span class="line">      })</span><br><span class="line">              .isEmpty()</span><br><span class="line">              .subscribe(new Consumer&lt;Boolean&gt;() {</span><br><span class="line">                  @Override</span><br><span class="line">                  public void accept(Boolean aBoolean) throws Exception {</span><br><span class="line">                      LogUtils.d("aBoolean : " + aBoolean);</span><br><span class="line">                  }</span><br><span class="line">              });</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>amb() --------------- amb() 要传入一个 Observable 集合，但是只会发送最先发送事件的 Observable 中的事件，其余 Observable 将会被丢弃</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">List&lt;Observable&lt;Long&gt;&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">list.add(Observable.intervalRange(1, 5, 1, 1, TimeUnit.SECONDS));</span><br><span class="line">list.add(Observable.intervalRange(11, 5, 0, 1, TimeUnit.SECONDS));</span><br><span class="line">list.add(Observable.intervalRange(21, 5, 2, 1, TimeUnit.SECONDS));</span><br><span class="line">Observable.amb(list)</span><br><span class="line">        .subscribe(new Observer&lt;Long&gt;() {</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onSubscribe(Disposable d) {</span><br><span class="line">                LogUtils.d("onSubscribe()方法");</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onNext(Long along) {</span><br><span class="line">                LogUtils.d("onNext()方法 : " + along);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onError(Throwable e) {</span><br><span class="line">                LogUtils.d("onError()方法 :" + e.toString());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onComplete() {</span><br><span class="line">                LogUtils.d("onComplete()方法");</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>defaultIfEmpty() -------------- 如果观察者只发送一个 onComplete() 事件，则可以利用这个方法发送一个值</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() {</span><br><span class="line">            @Override</span><br><span class="line">            public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception {</span><br><span class="line">                e.onComplete();</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">                .defaultIfEmpty(1001)</span><br><span class="line">                .subscribe(new Consumer&lt;Integer&gt;() {</span><br><span class="line">                    @Override</span><br><span class="line">                    public void accept(Integer integer) throws Exception {</span><br><span class="line">                        LogUtils.d("integer : " + integer);</span><br><span class="line">                    }</span><br><span class="line">                });</span><br></pre></td></tr></tbody></table></figure>
]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>rxjava2</tag>
      </tags>
  </entry>
</search>
